// Code generated by "go-syncmap -type seenMap<interface{}, struct{}>"; DO NOT EDIT.

package spliterator

import "sync"

func _() {
	// An "cannot convert seenMap literal (type seenMap) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(seenMap{})
}

var _nil_seenMap_struct___value = func() (val struct{}) { return }()

func (m *seenMap) Store(key interface{}, value struct{}) {
	(*sync.Map)(m).Store(key, value)
}

func (m *seenMap) LoadOrStore(key interface{}, value struct{}) (struct{}, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_seenMap_struct___value, loaded
	}
	return actual.(struct{}), loaded
}

func (m *seenMap) Load(key interface{}) (struct{}, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_seenMap_struct___value, ok
	}
	return value.(struct{}), ok
}

func (m *seenMap) Delete(key interface{}) {
	(*sync.Map)(m).Delete(key)
}

func (m *seenMap) Range(f func(key interface{}, value struct{}) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(interface{}), value.(struct{}))
	})
}
