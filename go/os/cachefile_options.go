// Code generated by "go-option -type CacheFile"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package os

import "time"

// A CacheFileOption sets options.
type CacheFileOption interface {
	apply(*CacheFile)
}

// EmptyCacheFileOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyCacheFileOption struct{}

func (EmptyCacheFileOption) apply(*CacheFile) {}

// CacheFileOptionFunc wraps a function that modifies CacheFile into an
// implementation of the CacheFileOption interface.
type CacheFileOptionFunc func(*CacheFile)

func (f CacheFileOptionFunc) apply(do *CacheFile) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *CacheFile) ApplyOptions(options ...CacheFileOption) *CacheFile {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithCacheFile sets CacheFile.
func WithCacheFile(v CacheFile) CacheFileOption {
	return CacheFileOptionFunc(func(o *CacheFile) {
		*o = v
	})
}

// WithCacheFileBucketRootDir sets BucketRootDir in CacheFile.
// cache root dir
func WithCacheFileBucketRootDir(v string) CacheFileOption {
	return CacheFileOptionFunc(func(o *CacheFile) {
		o.BucketRootDir = v
	})
}

// WithCacheFileBucketKeyFunc sets BucketKeyFunc in CacheFile.
// generate bucket key from key(file path)
// bucket key should not contain any of the magic characters recognized by [filepath.Match]
// otherwise, bucket key will be escaped by MD5CacheKey
// see: https://github.com/golang/go/issues/13516
func WithCacheFileBucketKeyFunc(v func(key string) string) CacheFileOption {
	return CacheFileOptionFunc(func(o *CacheFile) {
		o.BucketKeyFunc = v
	})
}

// WithCacheFileCacheMetaExt sets CacheMetaExt in CacheFile.
// the file name extension used by path. ".cache" if empty
func WithCacheFileCacheMetaExt(v string) CacheFileOption {
	return CacheFileOptionFunc(func(o *CacheFile) {
		o.CacheMetaExt = v
	})
}

// WithCacheFileCacheExpiredAfter sets CacheExpiredAfter in CacheFile.
// Cache file expiration time, lazy expire cache files base on cache URL modification time
func WithCacheFileCacheExpiredAfter(v time.Duration) CacheFileOption {
	return CacheFileOptionFunc(func(o *CacheFile) {
		o.CacheExpiredAfter = v
	})
}
