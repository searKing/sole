// Code generated by "go-enum -type Radix"; DO NOT EDIT.

package radix

import (
	"database/sql"
	"database/sql/driver"
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Binary-0]
	_ = x[Octonary-1]
	_ = x[Decimal-2]
	_ = x[Hexadecimal-3]
}

const _Radix_name = "BinaryOctonaryDecimalHexadecimal"

var _Radix_index = [...]uint8{0, 6, 14, 21, 32}

func _() {
	var _nil_Radix_value = func() (val Radix) { return }()

	// An "cannot convert Radix literal (type Radix) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_Radix_value
}

func (i Radix) String() string {
	if i < 0 || i >= Radix(len(_Radix_index)-1) {
		return "Radix(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Radix_name[_Radix_index[i]:_Radix_index[i+1]]
}

var _Radix_values = []Radix{0, 1, 2, 3}

var _Radix_name_to_values = map[string]Radix{
	_Radix_name[0:6]:   0,
	_Radix_name[6:14]:  1,
	_Radix_name[14:21]: 2,
	_Radix_name[21:32]: 3,
}

// ParseRadixString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseRadixString(s string) (Radix, error) {
	if val, ok := _Radix_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%[1]s does not belong to Radix values", s)
}

// RadixValues returns all values of the enum
func RadixValues() []Radix {
	return _Radix_values
}

// IsARadix returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Radix) Registered() bool {
	for _, v := range _Radix_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_Radix_value = func() (val Radix) { return }()

	// An "cannot convert Radix literal (type Radix) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_Radix_value

	// An "cannot convert Radix literal (type Radix) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_Radix_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Radix
func (i Radix) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Radix
func (i *Radix) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseRadixString(string(data))
	return err
}

func _() {
	var _nil_Radix_value = func() (val Radix) { return }()

	// An "cannot convert Radix literal (type Radix) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_Radix_value

	// An "cannot convert Radix literal (type Radix) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_Radix_value
}

// MarshalJSON implements the json.Marshaler interface for Radix
func (i Radix) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Radix
func (i *Radix) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Radix should be a string, got %[1]s", data)
	}

	var err error
	*i, err = ParseRadixString(s)
	return err
}

func _() {
	var _nil_Radix_value = func() (val Radix) { return }()

	// An "cannot convert Radix literal (type Radix) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_Radix_value

	// An "cannot convert Radix literal (type Radix) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_Radix_value
}

// MarshalText implements the encoding.TextMarshaler interface for Radix
func (i Radix) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Radix
func (i *Radix) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseRadixString(string(text))
	return err
}

//func _() {
//	var _nil_Radix_value = func() (val Radix) { return }()
//
//	// An "cannot convert Radix literal (type Radix) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_Radix_value
//
//	// An "cannot convert Radix literal (type Radix) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_Radix_value
//}

// MarshalYAML implements a YAML Marshaler for Radix
func (i Radix) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Radix
func (i *Radix) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseRadixString(s)
	return err
}

func _() {
	var _nil_Radix_value = func() (val Radix) { return }()

	// An "cannot convert Radix literal (type Radix) to type driver.Valuer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ driver.Valuer = _nil_Radix_value

	// An "cannot convert Radix literal (type Radix) to type sql.Scanner" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ sql.Scanner = &_nil_Radix_value
}

func (i Radix) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Radix) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParseRadixString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// RadixSliceContains reports whether sunEnums is within enums.
func RadixSliceContains(enums []Radix, sunEnums ...Radix) bool {
	var seenEnums = map[Radix]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// RadixSliceContainsAny reports whether any sunEnum is within enums.
func RadixSliceContainsAny(enums []Radix, sunEnums ...Radix) bool {
	var seenEnums = map[Radix]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
