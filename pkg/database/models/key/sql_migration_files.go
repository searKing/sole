// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package key Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// migrations/sql/shared/.gitattributes
// migrations/sql/shared/.gitkeep
// migrations/sql/shared/sole_key.sql
package key

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationsSqlSharedGitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2e\xcc\x51\xd0\x4d\x2e\xca\x49\xe3\x02\x04\x00\x00\xff\xff\x5b\x50\x4f\xd9\x0c\x00\x00\x00")

func migrationsSqlSharedGitattributesBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlSharedGitattributes,
		"migrations/sql/shared/.gitattributes",
	)
}

func migrationsSqlSharedGitattributes() (*asset, error) {
	bytes, err := migrationsSqlSharedGitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/.gitattributes", size: 12, mode: os.FileMode(420), modTime: time.Unix(1591722058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlSharedGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrationsSqlSharedGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlSharedGitkeep,
		"migrations/sql/shared/.gitkeep",
	)
}

func migrationsSqlSharedGitkeep() (*asset, error) {
	bytes, err := migrationsSqlSharedGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1591722058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlSharedSole_keySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x4f\xd3\x50\x18\xbe\xef\xaf\x78\x13\x2e\xb6\xe1\x80\xb9\xc4\xc4\x84\x70\x51\xba\x03\x34\x6c\xdd\x6c\x4f\x0d\x5c\x35\x65\x3d\xdb\xea\x66\xbb\xf4\x9c\x41\x76\xc7\x05\xea\x30\x41\x31\x51\x89\x0c\x8d\x24\x24\x78\xa1\x13\x13\x44\x22\x31\xfc\x19\xda\xb1\x7f\x61\xfa\xc1\x3e\x00\x4d\x8c\xe7\xaa\xe7\xc9\x79\x3e\xde\xd3\xf7\x3d\x53\xe3\x1c\x8c\x83\x60\xd7\x9b\x8e\x59\xae\x30\x48\xa7\xd2\x29\xc0\x15\x02\x94\xe8\xce\xa2\x69\x95\x81\x6f\xb0\x8a\xed\x4c\x02\x5f\xab\x41\x70\x86\x82\x43\x28\x71\x56\x89\x31\xe9\x73\x55\x4a\xc0\x2e\x01\xab\x98\x14\xa8\xdd\x70\x8a\x04\x8a\xb6\x41\xc0\xa4\x50\xb6\x57\x89\x63\x11\x03\x56\x9a\xa0\xc3\xac\x92\x99\xa0\xac\x59\x23\x3e\xab\x66\x16\x89\x45\x09\xb0\x8a\xce\xa0\xa8\x5b\xb0\x42\xa0\x64\x37\x2c\x03\x4c\x0b\x58\x85\x40\x56\x14\x90\xa4\x20\x28\x99\x35\xe2\xfb\x4c\x71\xdc\xc4\x04\xdc\x79\x6c\x96\x1d\x9d\x11\x50\xeb\x60\xd9\xcc\xd1\x2d\xaa\x17\x99\x69\x5b\x9c\x20\x23\x1e\x23\xc0\xfc\x6c\x16\x81\x38\x07\x52\x1e\x03\x5a\x12\x15\xac\x00\xb5\x6b\x44\xab\x92\x26\x17\xe7\x00\x00\xc6\xe0\xe2\x74\xd7\x7d\xbe\xef\xbd\xdf\xef\xb6\x3b\x01\x44\x09\xd3\x4c\xc3\xff\x82\x87\xbc\x2c\x2c\xf0\x72\x3c\x9d\xbe\x97\x08\x00\x5f\x48\x52\xb3\x59\x10\xf2\xb9\x1c\x92\x30\xc4\xaa\xa4\xe9\x6d\xae\xbb\xdf\x3e\x74\x77\x37\x7a\xed\xa7\xee\x76\xcb\xdd\xde\xea\x1e\x1e\xc5\x92\x81\x58\x95\x34\xff\x4d\xac\xbb\xbb\x21\x66\x86\xc8\x86\xce\x74\x00\xc0\x68\x09\xc3\xf0\xfa\x13\xd9\x7b\x73\xe4\x6d\x75\x62\x49\x2e\x2a\xcf\x3d\x7f\xe2\x1e\x3c\x73\xbf\xec\x78\x9d\xef\x01\x14\xa5\xf1\xd7\xac\x38\x2f\x4a\x18\x54\x49\x11\xe7\x25\x94\x19\x12\xe5\x55\x9c\xd7\x44\x49\x90\x51\xa0\xdd\xf7\xb8\x38\x3d\xeb\xbd\xee\xf4\x03\x16\x1d\xa2\x33\x62\x68\x3a\x83\x0c\x8f\x11\x16\x73\xe8\x66\xc0\x0c\x9a\xe3\xd5\x2c\x06\x41\x95\x65\x24\x61\xcd\x3f\xa5\x60\x3e\x57\x18\xc8\xba\xad\xb6\x7b\xf6\xd3\xdb\x39\xe9\xed\x1c\x47\xd2\x8d\xba\xf1\x3f\xd2\x79\x09\xd4\x82\x4f\xfc\x9b\xad\xb7\xb7\x7e\x79\xfe\xca\x6b\x1f\x7b\x6f\x8f\x46\xcc\xc7\xe0\xf2\xd7\x57\xb7\xf5\xb1\xf7\xee\x20\xbc\x33\xaa\x19\xa4\x46\x18\x31\x00\x8b\xd2\xf2\xc8\xa5\xdd\x08\x93\x1a\x18\x50\xbb\xc4\x20\x64\x26\x21\x05\x25\xdb\xf1\x1b\x35\x42\x8c\x24\xdc\x0d\xa0\x68\x1b\x79\x47\xbb\x5b\x0b\xef\xaf\x2b\xaf\xd1\x0e\x08\xeb\x09\x73\x5f\xab\xa7\xbb\xd9\xf2\xf6\x3e\x7b\x2f\x0e\xdd\xd6\x49\x00\xad\x12\x87\x9a\xb6\xe5\x7f\x8e\xf6\xc0\x6d\xf7\x3b\x54\x52\x28\xe4\xbe\xfc\x71\xd5\x62\x05\x59\xcc\xf1\xf2\x32\x2c\xa2\x65\xa8\x57\xfd\x66\x8f\x9b\x46\x22\xf4\x15\xf2\x92\x82\x65\xde\x37\x68\x54\xb5\x70\xb0\xb4\x68\x24\x54\x49\x7c\xa0\x22\x88\x87\x68\x32\x9a\x94\x04\x97\x18\xfc\xd5\x05\x5e\x56\x10\x86\x19\x68\xb0\xd2\xfd\x7e\x84\x99\xd8\x23\x6a\x5b\xb0\x46\x56\x7c\x0e\x5c\xee\x7f\x8a\x4d\x8f\xbe\x07\x19\x7b\xcd\xe2\x32\x72\xbe\x30\x78\x01\xae\x4d\xff\xf4\xef\x00\x00\x00\xff\xff\x7f\x17\x01\x27\xeb\x04\x00\x00")

func migrationsSqlSharedSole_keySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlSharedSole_keySql,
		"migrations/sql/shared/sole_key.sql",
	)
}

func migrationsSqlSharedSole_keySql() (*asset, error) {
	bytes, err := migrationsSqlSharedSole_keySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/sole_key.sql", size: 1259, mode: os.FileMode(420), modTime: time.Unix(1599757425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/sql/shared/.gitattributes": migrationsSqlSharedGitattributes,
	"migrations/sql/shared/.gitkeep":       migrationsSqlSharedGitkeep,
	"migrations/sql/shared/sole_key.sql":   migrationsSqlSharedSole_keySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"sql": &bintree{nil, map[string]*bintree{
			"shared": &bintree{nil, map[string]*bintree{
				".gitattributes": &bintree{migrationsSqlSharedGitattributes, map[string]*bintree{}},
				".gitkeep":       &bintree{migrationsSqlSharedGitkeep, map[string]*bintree{}},
				"sole_key.sql":   &bintree{migrationsSqlSharedSole_keySql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
