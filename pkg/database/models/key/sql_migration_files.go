// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/shared/.gitattributes
// migrations/sql/shared/.gitkeep
// migrations/sql/shared/shield_key.sql

package key

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrationsSqlSharedGitattributes = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2e\xcc\x51\xd0\x4d\x2e\xca\x49\xe3\x02\x04\x00\x00\xff\xff" +
		"\x5b\x50\x4f\xd9\x0c\x00\x00\x00")

func bindataMigrationsSqlSharedGitattributesBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrationsSqlSharedGitattributes,
		"migrations/sql/shared/.gitattributes",
	)
}

func bindataMigrationsSqlSharedGitattributes() (*asset, error) {
	bytes, err := bindataMigrationsSqlSharedGitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/sql/shared/.gitattributes",
		size:        12,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1562140230, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrationsSqlSharedGitkeep = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataMigrationsSqlSharedGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrationsSqlSharedGitkeep,
		"migrations/sql/shared/.gitkeep",
	)
}

func bindataMigrationsSqlSharedGitkeep() (*asset, error) {
	bytes, err := bindataMigrationsSqlSharedGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/sql/shared/.gitkeep",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1562140230, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrationsSqlSharedShieldkeysql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdf\x6b\xd3\x50\x14\x7e\xcf\x5f\x71\x60\x0f\x6d\xb1\x83\x39\x10" +
		"\x84\xb1\x87\x2c\xb9\xdb\x82\xed\x4d\x4d\x6e\x64\x7b\x0a\x71\xb9\xd5\xd8\x99\x94\x26\x75\xf4\x6d\x0f\x53\x3b\x61" +
		"\x3a\x41\x2d\xb6\x53\x2c\x0c\xe6\x83\xd6\x0a\x73\x0e\x87\xec\x9f\xd9\xbd\x6d\xff\x0b\xc9\x8f\xf5\x87\x9d\x82\x78" +
		"\x9e\xee\xfd\xc8\xf9\xbe\xef\x9c\x9c\x73\x67\x67\xe1\xda\x43\xe7\x5e\xc5\x0a\x28\x18\x65\x70\xbd\xa0\x62\xb9\xbe" +
		"\xb5\x11\x38\x9e\x2b\x48\x1a\x12\x09\x02\x22\x2e\xe5\x10\x28\xcb\x80\x55\x02\x68\x4d\xd1\x89\x0e\xfe\x7d\x87\x6e" +
		"\xda\x66\x89\xd6\x84\xb4\x00\x00\x30\x03\x17\xa7\x4d\xf6\xac\xcd\xdf\xb5\x7b\xad\x4e\x04\xf9\x34\x30\x1d\x3b\x3c" +
		"\xc1\x1d\x51\x93\x56\x45\x2d\x3d\x3f\x7f\x23\x13\x01\x21\x15\x36\x72\x39\x90\xd4\x7c\x1e\x61\x02\xa9\x12\xad\xf1" +
		"\xdd\x6d\xf6\xf5\x7d\xaf\xb9\x33\x68\x3d\x61\xfb\x75\xb6\xbf\xd7\x3b\xea\xa6\xb2\x11\x59\x89\xd6\xfe\x8d\xac\xd7" +
		"\xdc\x51\xe4\xb1\x64\xdb\x0a\x2c\x00\x20\x68\x8d\xc0\x78\xfc\x29\x99\xbf\xee\xf2\xbd\x4e\x2a\x2b\x24\xe5\xb1\xf3" +
		"\xc7\xec\xf0\x29\xfb\xdc\xe0\x9d\x6f\x11\x94\xb8\x09\x63\x49\x59\x51\x30\x01\x03\xeb\xca\x0a\x46\xf2\x18\xa9\x68" +
		"\x10\xd5\x54\xb0\xa4\xa1\x88\x7b\xa8\x71\x71\x7a\x36\x78\xd5\x19\x1a\xdc\xa8\x50\x2b\xa0\xb6\x69\x05\x20\x8b\x04" +
		"\x11\x25\x8f\xa6\x0d\xca\x68\x59\x34\x72\x04\x24\x43\xd3\x10\x26\x66\xf8\x95\x4e\xc4\x7c\x61\x44\xcb\xea\x2d\x76" +
		"\xf6\x83\x37\x4e\x06\x8d\xe3\x84\xba\x5a\xb6\xff\x87\x5a\xc5\x60\x14\xc2\xc4\xbf\xc9\xf2\x83\xed\xfe\xf9\x4b\xde" +
		"\x3a\xe6\x6f\xba\x13\xe2\x33\xd0\xff\xf9\x85\xd5\x3f\x0c\xde\x1e\xc6\x3d\xf3\x4d\x9b\x6e\xd2\x80\xda\x40\x14\xbc" +
		"\x3e\xd1\xb4\x29\x33\x73\x23\x01\xdf\x2b\x06\x10\x67\x66\x61\x0e\x8a\x5e\x25\x1c\xd5\x04\xb1\xb3\x70\x3d\x82\x92" +
		"\x6b\xa2\x9d\xdc\xae\x2c\x7c\x18\x97\x5a\x93\x13\x10\xd7\x13\xfb\xfe\xad\x9e\xde\x6e\x9d\x1f\x7c\xe2\xcf\x8f\x58" +
		"\xfd\x24\x82\x1e\xd1\x8a\xef\x78\x6e\x78\x9c\x9c\x81\xab\xfa\x3b\x56\x52\x4c\xc4\x5e\x7c\xbf\x1c\xb1\x82\xa6\xe4" +
		"\x45\x6d\x1d\x6e\xa1\x75\x28\x97\xc2\x61\x4f\x3b\x76\x26\xd6\x95\x54\xac\x13\x4d\x0c\x05\xaa\x25\x33\x5e\x2c\x33" +
		"\x59\x09\x03\x2b\xb7\x0d\x04\xe9\x18\xcd\x26\x9b\x92\x11\x32\xa3\xbf\xba\x2a\x6a\x3a\x22\xb0\x08\xd5\xa0\x78\x73" +
		"\x68\x61\x31\xf5\xc0\xf7\x5c\xd8\xa2\x77\xc3\x1c\xe8\xb7\x3f\xa6\x16\x04\x61\xfc\x45\x90\xbd\x2d\x57\x90\x35\xb5" +
		"\x30\x7a\x03\xa6\xf6\x7f\xe1\x57\x00\x00\x00\xff\xff\xdb\xb7\xf7\xfa\x43\x04\x00\x00")

func bindataMigrationsSqlSharedShieldkeysqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrationsSqlSharedShieldkeysql,
		"migrations/sql/shared/shield_key.sql",
	)
}

func bindataMigrationsSqlSharedShieldkeysql() (*asset, error) {
	bytes, err := bindataMigrationsSqlSharedShieldkeysqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/sql/shared/shield_key.sql",
		size:        1091,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1572348953, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"migrations/sql/shared/.gitattributes": bindataMigrationsSqlSharedGitattributes,
	"migrations/sql/shared/.gitkeep":       bindataMigrationsSqlSharedGitkeep,
	"migrations/sql/shared/shield_key.sql": bindataMigrationsSqlSharedShieldkeysql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"migrations": {Func: nil, Children: map[string]*bintree{
		"sql": {Func: nil, Children: map[string]*bintree{
			"shared": {Func: nil, Children: map[string]*bintree{
				".gitattributes": {Func: bindataMigrationsSqlSharedGitattributes, Children: map[string]*bintree{}},
				".gitkeep":       {Func: bindataMigrationsSqlSharedGitkeep, Children: map[string]*bintree{}},
				"shield_key.sql": {Func: bindataMigrationsSqlSharedShieldkeysql, Children: map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
