// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: opentrace.proto

package opentrace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tracing_Type int32

const (
	Tracing_uber_jaeger Tracing_Type = 0 //uber-jaeger
	Tracing_zipkin      Tracing_Type = 1 //zipkin
)

// Enum value maps for Tracing_Type.
var (
	Tracing_Type_name = map[int32]string{
		0: "uber_jaeger",
		1: "zipkin",
	}
	Tracing_Type_value = map[string]int32{
		"uber_jaeger": 0,
		"zipkin":      1,
	}
)

func (x Tracing_Type) Enum() *Tracing_Type {
	p := new(Tracing_Type)
	*p = x
	return p
}

func (x Tracing_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tracing_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_opentrace_proto_enumTypes[0].Descriptor()
}

func (Tracing_Type) Type() protoreflect.EnumType {
	return &file_opentrace_proto_enumTypes[0]
}

func (x Tracing_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tracing_Type.Descriptor instead.
func (Tracing_Type) EnumDescriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0, 0}
}

// Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
type Tracing_Jaeger_Sampler_Type int32

const (
	Tracing_Jaeger_Sampler_const         Tracing_Jaeger_Sampler_Type = 0
	Tracing_Jaeger_Sampler_probabilistic Tracing_Jaeger_Sampler_Type = 1
	Tracing_Jaeger_Sampler_rateLimiting  Tracing_Jaeger_Sampler_Type = 2
	Tracing_Jaeger_Sampler_remote        Tracing_Jaeger_Sampler_Type = 3
)

// Enum value maps for Tracing_Jaeger_Sampler_Type.
var (
	Tracing_Jaeger_Sampler_Type_name = map[int32]string{
		0: "const",
		1: "probabilistic",
		2: "rateLimiting",
		3: "remote",
	}
	Tracing_Jaeger_Sampler_Type_value = map[string]int32{
		"const":         0,
		"probabilistic": 1,
		"rateLimiting":  2,
		"remote":        3,
	}
)

func (x Tracing_Jaeger_Sampler_Type) Enum() *Tracing_Jaeger_Sampler_Type {
	p := new(Tracing_Jaeger_Sampler_Type)
	*p = x
	return p
}

func (x Tracing_Jaeger_Sampler_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tracing_Jaeger_Sampler_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_opentrace_proto_enumTypes[1].Descriptor()
}

func (Tracing_Jaeger_Sampler_Type) Type() protoreflect.EnumType {
	return &file_opentrace_proto_enumTypes[1]
}

func (x Tracing_Jaeger_Sampler_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tracing_Jaeger_Sampler_Type.Descriptor instead.
func (Tracing_Jaeger_Sampler_Type) EnumDescriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

type Tracing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable      bool            `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Type        Tracing_Type    `protobuf:"varint,2,opt,name=type,proto3,enum=sole.api.v1.viper.opentrace.Tracing_Type" json:"type,omitempty"`
	Jaeger      *Tracing_Jaeger `protobuf:"bytes,3,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	ServiceName string          `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *Tracing) Reset() {
	*x = Tracing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentrace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing) ProtoMessage() {}

func (x *Tracing) ProtoReflect() protoreflect.Message {
	mi := &file_opentrace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing.ProtoReflect.Descriptor instead.
func (*Tracing) Descriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0}
}

func (x *Tracing) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Tracing) GetType() Tracing_Type {
	if x != nil {
		return x.Type
	}
	return Tracing_uber_jaeger
}

func (x *Tracing) GetJaeger() *Tracing_Jaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

func (x *Tracing) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type Tracing_Jaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reporter *Tracing_Jaeger_Reporter `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Sampler  *Tracing_Jaeger_Sampler  `protobuf:"bytes,2,opt,name=sampler,proto3" json:"sampler,omitempty"`
}

func (x *Tracing_Jaeger) Reset() {
	*x = Tracing_Jaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentrace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger) ProtoMessage() {}

func (x *Tracing_Jaeger) ProtoReflect() protoreflect.Message {
	mi := &file_opentrace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger) Descriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Tracing_Jaeger) GetReporter() *Tracing_Jaeger_Reporter {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Tracing_Jaeger) GetSampler() *Tracing_Jaeger_Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

// Reporter configures the reporter. All fields are optional.
type Tracing_Jaeger_Reporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocalAgentHostPort instructs reporter to send spans to jaeger-agent at this address
	LocalAgentHostPort string `protobuf:"bytes,1,opt,name=local_agent_host_port,json=localAgentHostPort,proto3" json:"local_agent_host_port,omitempty"`
}

func (x *Tracing_Jaeger_Reporter) Reset() {
	*x = Tracing_Jaeger_Reporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentrace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger_Reporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger_Reporter) ProtoMessage() {}

func (x *Tracing_Jaeger_Reporter) ProtoReflect() protoreflect.Message {
	mi := &file_opentrace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger_Reporter.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger_Reporter) Descriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Tracing_Jaeger_Reporter) GetLocalAgentHostPort() string {
	if x != nil {
		return x.LocalAgentHostPort
	}
	return ""
}

// Sampler allows initializing a non-default sampler.  All fields are optional.
type Tracing_Jaeger_Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_url is the address of jaeger-agent's HTTP sampling server
	ServerUrl string                      `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	Type      Tracing_Jaeger_Sampler_Type `protobuf:"varint,2,opt,name=type,proto3,enum=sole.api.v1.viper.opentrace.Tracing_Jaeger_Sampler_Type" json:"type,omitempty"`
	// Param is a value passed to the sampler.
	// Valid values for Param field are:
	// - for "const" sampler, 0 or 1 for always false/true respectively
	// - for "probabilistic" sampler, a probability between 0 and 1
	// - for "rateLimiting" sampler, the number of spans per second
	// - for "remote" sampler, param is the same as for "probabilistic"
	//   and indicates the initial sampling rate before the actual one
	//   is received from the mothership.
	Param float32 `protobuf:"fixed32,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *Tracing_Jaeger_Sampler) Reset() {
	*x = Tracing_Jaeger_Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentrace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger_Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger_Sampler) ProtoMessage() {}

func (x *Tracing_Jaeger_Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_opentrace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger_Sampler.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger_Sampler) Descriptor() ([]byte, []int) {
	return file_opentrace_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Tracing_Jaeger_Sampler) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *Tracing_Jaeger_Sampler) GetType() Tracing_Jaeger_Sampler_Type {
	if x != nil {
		return x.Type
	}
	return Tracing_Jaeger_Sampler_const
}

func (x *Tracing_Jaeger_Sampler) GetParam() float32 {
	if x != nil {
		return x.Param
	}
	return 0
}

var File_opentrace_proto protoreflect.FileDescriptor

var file_opentrace_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x69, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xab,
	0x05, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x69, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06,
	0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbb, 0x03, 0x0a, 0x06, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x1a, 0x3d, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x1a, 0xd0, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x10, 0x03, 0x22, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x62, 0x65, 0x72, 0x5f, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x7a, 0x69, 0x70, 0x6b, 0x69, 0x6e, 0x10, 0x01, 0x42, 0x3b, 0x5a, 0x39,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x3b,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_opentrace_proto_rawDescOnce sync.Once
	file_opentrace_proto_rawDescData = file_opentrace_proto_rawDesc
)

func file_opentrace_proto_rawDescGZIP() []byte {
	file_opentrace_proto_rawDescOnce.Do(func() {
		file_opentrace_proto_rawDescData = protoimpl.X.CompressGZIP(file_opentrace_proto_rawDescData)
	})
	return file_opentrace_proto_rawDescData
}

var file_opentrace_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_opentrace_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_opentrace_proto_goTypes = []interface{}{
	(Tracing_Type)(0),                // 0: sole.api.v1.viper.opentrace.Tracing.Type
	(Tracing_Jaeger_Sampler_Type)(0), // 1: sole.api.v1.viper.opentrace.Tracing.Jaeger.Sampler.Type
	(*Tracing)(nil),                  // 2: sole.api.v1.viper.opentrace.Tracing
	(*Tracing_Jaeger)(nil),           // 3: sole.api.v1.viper.opentrace.Tracing.Jaeger
	(*Tracing_Jaeger_Reporter)(nil),  // 4: sole.api.v1.viper.opentrace.Tracing.Jaeger.Reporter
	(*Tracing_Jaeger_Sampler)(nil),   // 5: sole.api.v1.viper.opentrace.Tracing.Jaeger.Sampler
}
var file_opentrace_proto_depIdxs = []int32{
	0, // 0: sole.api.v1.viper.opentrace.Tracing.type:type_name -> sole.api.v1.viper.opentrace.Tracing.Type
	3, // 1: sole.api.v1.viper.opentrace.Tracing.jaeger:type_name -> sole.api.v1.viper.opentrace.Tracing.Jaeger
	4, // 2: sole.api.v1.viper.opentrace.Tracing.Jaeger.reporter:type_name -> sole.api.v1.viper.opentrace.Tracing.Jaeger.Reporter
	5, // 3: sole.api.v1.viper.opentrace.Tracing.Jaeger.sampler:type_name -> sole.api.v1.viper.opentrace.Tracing.Jaeger.Sampler
	1, // 4: sole.api.v1.viper.opentrace.Tracing.Jaeger.Sampler.type:type_name -> sole.api.v1.viper.opentrace.Tracing.Jaeger.Sampler.Type
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_opentrace_proto_init() }
func file_opentrace_proto_init() {
	if File_opentrace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opentrace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentrace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentrace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger_Reporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentrace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger_Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opentrace_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opentrace_proto_goTypes,
		DependencyIndexes: file_opentrace_proto_depIdxs,
		EnumInfos:         file_opentrace_proto_enumTypes,
		MessageInfos:      file_opentrace_proto_msgTypes,
	}.Build()
	File_opentrace_proto = out.File
	file_opentrace_proto_rawDesc = nil
	file_opentrace_proto_goTypes = nil
	file_opentrace_proto_depIdxs = nil
}
