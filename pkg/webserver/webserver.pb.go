// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: webserver.proto

package webserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindAddr                     *Web_Net             `protobuf:"bytes,1,opt,name=bind_addr,json=bindAddr,proto3" json:"bind_addr,omitempty"`                                                                       // for listen
	AdvertiseAddr                *Web_Net             `protobuf:"bytes,2,opt,name=advertise_addr,json=advertiseAddr,proto3" json:"advertise_addr,omitempty"`                                                        // for expose
	Tls                          *Web_TLS             `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                 // for tls such as https
	Cors                         *Web_CORS            `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`                                                                                               // for cors
	MaxConcurrencyUnary          int64                `protobuf:"varint,5,opt,name=max_concurrency_unary,json=maxConcurrencyUnary,proto3" json:"max_concurrency_unary,omitempty"`                                   // for concurrent parallel requests of unary server, The default is 0 (no limit is given)
	BurstLimitTimeoutUnary       *durationpb.Duration `protobuf:"bytes,6,opt,name=burst_limit_timeout_unary,json=burstLimitTimeoutUnary,proto3" json:"burst_limit_timeout_unary,omitempty"`                         // for concurrent parallel requests of unary server, The default is 0 (no limit is given)
	MaxConcurrencyStream         int64                `protobuf:"varint,7,opt,name=max_concurrency_stream,json=maxConcurrencyStream,proto3" json:"max_concurrency_stream,omitempty"`                                // for concurrent parallel requests of stream server, The default is 0 (no limit is given)
	BurstLimitTimeoutStream      *durationpb.Duration `protobuf:"bytes,8,opt,name=burst_limit_timeout_stream,json=burstLimitTimeoutStream,proto3" json:"burst_limit_timeout_stream,omitempty"`                      // for concurrent parallel requests of stream server, The default is 0 (no limit is given)
	HandledTimeoutUnary          *durationpb.Duration `protobuf:"bytes,9,opt,name=handled_timeout_unary,json=handledTimeoutUnary,proto3" json:"handled_timeout_unary,omitempty"`                                    // for max handing time of unary server, The default is 0 (no limit is given)
	HandledTimeoutStream         *durationpb.Duration `protobuf:"bytes,10,opt,name=handled_timeout_stream,json=handledTimeoutStream,proto3" json:"handled_timeout_stream,omitempty"`                                // for max handing time of unary server, The default is 0 (no limit is given)
	MaxReceiveMessageSizeInBytes int64                `protobuf:"varint,11,opt,name=max_receive_message_size_in_bytes,json=maxReceiveMessageSizeInBytes,proto3" json:"max_receive_message_size_in_bytes,omitempty"` // sets the maximum message size in bytes the grpc server can receive, The default is 0 (no limit is given).
	MaxSendMessageSizeInBytes    int64                `protobuf:"varint,12,opt,name=max_send_message_size_in_bytes,json=maxSendMessageSizeInBytes,proto3" json:"max_send_message_size_in_bytes,omitempty"`          // sets the maximum message size in bytes the grpc server can send, The default is 0 (no limit is given).
	// for debug
	ForceDisableTls        bool                 `protobuf:"varint,13,opt,name=force_disable_tls,json=forceDisableTls,proto3" json:"force_disable_tls,omitempty"`                      // disable tls
	LocalIpResolver        *Web_LocalIpResolver `protobuf:"bytes,14,opt,name=local_ip_resolver,json=localIpResolver,proto3" json:"local_ip_resolver,omitempty"`                       // for resolve local ip to expose, used if advertise_addr is empty
	NoGrpcProxy            bool                 `protobuf:"varint,15,opt,name=no_grpc_proxy,json=noGrpcProxy,proto3" json:"no_grpc_proxy,omitempty"`                                  // disable http proxy for grpc client to connect grpc server
	EnableLogrusMiddleware bool                 `protobuf:"varint,16,opt,name=enable_logrus_middleware,json=enableLogrusMiddleware,proto3" json:"enable_logrus_middleware,omitempty"` // disable logrus middleware
}

func (x *Web) Reset() {
	*x = Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web) ProtoMessage() {}

func (x *Web) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web.ProtoReflect.Descriptor instead.
func (*Web) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0}
}

func (x *Web) GetBindAddr() *Web_Net {
	if x != nil {
		return x.BindAddr
	}
	return nil
}

func (x *Web) GetAdvertiseAddr() *Web_Net {
	if x != nil {
		return x.AdvertiseAddr
	}
	return nil
}

func (x *Web) GetTls() *Web_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Web) GetCors() *Web_CORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Web) GetMaxConcurrencyUnary() int64 {
	if x != nil {
		return x.MaxConcurrencyUnary
	}
	return 0
}

func (x *Web) GetBurstLimitTimeoutUnary() *durationpb.Duration {
	if x != nil {
		return x.BurstLimitTimeoutUnary
	}
	return nil
}

func (x *Web) GetMaxConcurrencyStream() int64 {
	if x != nil {
		return x.MaxConcurrencyStream
	}
	return 0
}

func (x *Web) GetBurstLimitTimeoutStream() *durationpb.Duration {
	if x != nil {
		return x.BurstLimitTimeoutStream
	}
	return nil
}

func (x *Web) GetHandledTimeoutUnary() *durationpb.Duration {
	if x != nil {
		return x.HandledTimeoutUnary
	}
	return nil
}

func (x *Web) GetHandledTimeoutStream() *durationpb.Duration {
	if x != nil {
		return x.HandledTimeoutStream
	}
	return nil
}

func (x *Web) GetMaxReceiveMessageSizeInBytes() int64 {
	if x != nil {
		return x.MaxReceiveMessageSizeInBytes
	}
	return 0
}

func (x *Web) GetMaxSendMessageSizeInBytes() int64 {
	if x != nil {
		return x.MaxSendMessageSizeInBytes
	}
	return 0
}

func (x *Web) GetForceDisableTls() bool {
	if x != nil {
		return x.ForceDisableTls
	}
	return false
}

func (x *Web) GetLocalIpResolver() *Web_LocalIpResolver {
	if x != nil {
		return x.LocalIpResolver
	}
	return nil
}

func (x *Web) GetNoGrpcProxy() bool {
	if x != nil {
		return x.NoGrpcProxy
	}
	return false
}

func (x *Web) GetEnableLogrusMiddleware() bool {
	if x != nil {
		return x.EnableLogrusMiddleware
	}
	return false
}

type Web_Net struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"` // service name to register to consul for dns
	Port    int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Web_Net) Reset() {
	*x = Web_Net{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_Net) ProtoMessage() {}

func (x *Web_Net) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_Net.ProtoReflect.Descriptor instead.
func (*Web_Net) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Web_Net) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Web_Net) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Web_Net) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Web_LocalIpResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks  []string             `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	Addresses []string             `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Timeout   *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Web_LocalIpResolver) Reset() {
	*x = Web_LocalIpResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_LocalIpResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_LocalIpResolver) ProtoMessage() {}

func (x *Web_LocalIpResolver) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_LocalIpResolver.ProtoReflect.Descriptor instead.
func (*Web_LocalIpResolver) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Web_LocalIpResolver) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Web_LocalIpResolver) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Web_LocalIpResolver) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Web_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable        bool             `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	KeyPairBase64 *Web_TLS_KeyPair `protobuf:"bytes,2,opt,name=key_pair_base64,json=keyPairBase64,proto3" json:"key_pair_base64,omitempty"` // key pair in base64 format encoded from pem
	KeyPairPath   *Web_TLS_KeyPair `protobuf:"bytes,3,opt,name=key_pair_path,json=keyPairPath,proto3" json:"key_pair_path,omitempty"`       // key pair stored in file from pem
	// service_name is used to verify the hostname on the returned
	// certificates unless InsecureSkipVerify is given. It is also included
	// in the client's handshake to support virtual hosting unless it is
	// an IP address.
	ServiceName      string   `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	AllowedTlsCidrs  []string `protobuf:"bytes,5,rep,name=allowed_tls_cidrs,json=allowedTlsCidrs,proto3" json:"allowed_tls_cidrs,omitempty"` //"127.0.0.1/24"
	WhitelistedPaths []string `protobuf:"bytes,6,rep,name=whitelisted_paths,json=whitelistedPaths,proto3" json:"whitelisted_paths,omitempty"`
}

func (x *Web_TLS) Reset() {
	*x = Web_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_TLS) ProtoMessage() {}

func (x *Web_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_TLS.ProtoReflect.Descriptor instead.
func (*Web_TLS) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Web_TLS) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Web_TLS) GetKeyPairBase64() *Web_TLS_KeyPair {
	if x != nil {
		return x.KeyPairBase64
	}
	return nil
}

func (x *Web_TLS) GetKeyPairPath() *Web_TLS_KeyPair {
	if x != nil {
		return x.KeyPairPath
	}
	return nil
}

func (x *Web_TLS) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Web_TLS) GetAllowedTlsCidrs() []string {
	if x != nil {
		return x.AllowedTlsCidrs
	}
	return nil
}

func (x *Web_TLS) GetWhitelistedPaths() []string {
	if x != nil {
		return x.WhitelistedPaths
	}
	return nil
}

type Web_CORS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// returns Access-Control-Allow-Origin: * if false
	UseConditional bool `protobuf:"varint,2,opt,name=use_conditional,json=useConditional,proto3" json:"use_conditional,omitempty"`
	// allowed_origins is a list of origins a cross-domain request can be executed from.
	// If the special "*" value is present in the list, all origins will be allowed.
	// An origin may contain a wildcard (*) to replace 0 or more characters
	// (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penalty.
	// Only one wildcard can be used per origin.
	// Default value is ["*"]
	// return Access-Control-Allow-Origin
	AllowedOrigins []string `protobuf:"bytes,3,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	// allowed_methods is a list of methods the client is allowed to use with
	// cross-domain requests. Default value is simple methods (HEAD, GET and POST).
	AllowedMethods []string `protobuf:"bytes,4,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
	// allowed_headers is list of non simple headers the client is allowed to use with
	// cross-domain requests.
	// If the special "*" value is present in the list, all headers will be allowed.
	// Default value is [] but "Origin" is always appended to the list.
	AllowedHeaders []string `protobuf:"bytes,5,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	// exposed_headers indicates which headers are safe to expose to the API of a CORS
	// API specification
	// return Access-Control-Expose-Headers
	ExposedHeaders []string `protobuf:"bytes,6,rep,name=exposed_headers,json=exposedHeaders,proto3" json:"exposed_headers,omitempty"`
	// allow_credentials indicates whether the request can include user credentials like
	// cookies, HTTP authentication or client side SSL certificates.
	// return Access-Control-Allow-Credentials
	AllowCredentials bool `protobuf:"varint,7,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// options_passthrough instructs preflight to let other potential next handlers to
	// process the OPTIONS method. Turn this on if your application handles OPTIONS.
	OptionsPassthrough bool `protobuf:"varint,8,opt,name=options_passthrough,json=optionsPassthrough,proto3" json:"options_passthrough,omitempty"`
	// max_age indicates how long the results of a preflight request
	// can be cached
	MaxAge *durationpb.Duration `protobuf:"bytes,9,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// debug flag adds additional output to debug server side CORS issues
	Debug bool `protobuf:"varint,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Web_CORS) Reset() {
	*x = Web_CORS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_CORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_CORS) ProtoMessage() {}

func (x *Web_CORS) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_CORS.ProtoReflect.Descriptor instead.
func (*Web_CORS) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Web_CORS) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Web_CORS) GetUseConditional() bool {
	if x != nil {
		return x.UseConditional
	}
	return false
}

func (x *Web_CORS) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *Web_CORS) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *Web_CORS) GetAllowedHeaders() []string {
	if x != nil {
		return x.AllowedHeaders
	}
	return nil
}

func (x *Web_CORS) GetExposedHeaders() []string {
	if x != nil {
		return x.ExposedHeaders
	}
	return nil
}

func (x *Web_CORS) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *Web_CORS) GetOptionsPassthrough() bool {
	if x != nil {
		return x.OptionsPassthrough
	}
	return false
}

func (x *Web_CORS) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Web_CORS) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

// a public/private key pair
type Web_TLS_KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert string `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"` // public key
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`   // private key
}

func (x *Web_TLS_KeyPair) Reset() {
	*x = Web_TLS_KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_TLS_KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_TLS_KeyPair) ProtoMessage() {}

func (x *Web_TLS_KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_webserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_TLS_KeyPair.ProtoReflect.Descriptor instead.
func (*Web_TLS_KeyPair) Descriptor() ([]byte, []int) {
	return file_webserver_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Web_TLS_KeyPair) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *Web_TLS_KeyPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_webserver_proto protoreflect.FileDescriptor

var file_webserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x69, 0x70, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x10, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x43,
	0x4f, 0x52, 0x53, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x54, 0x0a,
	0x19, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x56, 0x0a, 0x1a, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x62, 0x75, 0x72, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x4f, 0x0a, 0x16, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x47, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1e, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x6f, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x72, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x72, 0x75, 0x73, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x47, 0x0a, 0x03, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x80,
	0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x1a, 0xf2, 0x02, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x54, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x54, 0x4c, 0x53,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x50, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70,
	0x65, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x2e, 0x54, 0x4c, 0x53, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x54, 0x6c, 0x73, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x2f, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x93, 0x03, 0x0a, 0x04, 0x43, 0x4f, 0x52, 0x53, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x32, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3b, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_webserver_proto_rawDescOnce sync.Once
	file_webserver_proto_rawDescData = file_webserver_proto_rawDesc
)

func file_webserver_proto_rawDescGZIP() []byte {
	file_webserver_proto_rawDescOnce.Do(func() {
		file_webserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_webserver_proto_rawDescData)
	})
	return file_webserver_proto_rawDescData
}

var file_webserver_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_webserver_proto_goTypes = []interface{}{
	(*Web)(nil),                 // 0: sole.api.v1.viper.webserver.Web
	(*Web_Net)(nil),             // 1: sole.api.v1.viper.webserver.Web.Net
	(*Web_LocalIpResolver)(nil), // 2: sole.api.v1.viper.webserver.Web.LocalIpResolver
	(*Web_TLS)(nil),             // 3: sole.api.v1.viper.webserver.Web.TLS
	(*Web_CORS)(nil),            // 4: sole.api.v1.viper.webserver.Web.CORS
	(*Web_TLS_KeyPair)(nil),     // 5: sole.api.v1.viper.webserver.Web.TLS.KeyPair
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
}
var file_webserver_proto_depIdxs = []int32{
	1,  // 0: sole.api.v1.viper.webserver.Web.bind_addr:type_name -> sole.api.v1.viper.webserver.Web.Net
	1,  // 1: sole.api.v1.viper.webserver.Web.advertise_addr:type_name -> sole.api.v1.viper.webserver.Web.Net
	3,  // 2: sole.api.v1.viper.webserver.Web.tls:type_name -> sole.api.v1.viper.webserver.Web.TLS
	4,  // 3: sole.api.v1.viper.webserver.Web.cors:type_name -> sole.api.v1.viper.webserver.Web.CORS
	6,  // 4: sole.api.v1.viper.webserver.Web.burst_limit_timeout_unary:type_name -> google.protobuf.Duration
	6,  // 5: sole.api.v1.viper.webserver.Web.burst_limit_timeout_stream:type_name -> google.protobuf.Duration
	6,  // 6: sole.api.v1.viper.webserver.Web.handled_timeout_unary:type_name -> google.protobuf.Duration
	6,  // 7: sole.api.v1.viper.webserver.Web.handled_timeout_stream:type_name -> google.protobuf.Duration
	2,  // 8: sole.api.v1.viper.webserver.Web.local_ip_resolver:type_name -> sole.api.v1.viper.webserver.Web.LocalIpResolver
	6,  // 9: sole.api.v1.viper.webserver.Web.LocalIpResolver.timeout:type_name -> google.protobuf.Duration
	5,  // 10: sole.api.v1.viper.webserver.Web.TLS.key_pair_base64:type_name -> sole.api.v1.viper.webserver.Web.TLS.KeyPair
	5,  // 11: sole.api.v1.viper.webserver.Web.TLS.key_pair_path:type_name -> sole.api.v1.viper.webserver.Web.TLS.KeyPair
	6,  // 12: sole.api.v1.viper.webserver.Web.CORS.max_age:type_name -> google.protobuf.Duration
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_webserver_proto_init() }
func file_webserver_proto_init() {
	if File_webserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_Net); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_LocalIpResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_CORS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_TLS_KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webserver_proto_goTypes,
		DependencyIndexes: file_webserver_proto_depIdxs,
		MessageInfos:      file_webserver_proto_msgTypes,
	}.Build()
	File_webserver_proto = out.File
	file_webserver_proto_rawDesc = nil
	file_webserver_proto_goTypes = nil
	file_webserver_proto_depIdxs = nil
}
