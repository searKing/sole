// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: consul.proto

package consul

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Consul_ServiceResolver_ResolverType int32

const (
	Consul_ServiceResolver_resolver_type_random  Consul_ServiceResolver_ResolverType = 0
	Consul_ServiceResolver_resolver_type_consist Consul_ServiceResolver_ResolverType = 1
)

// Enum value maps for Consul_ServiceResolver_ResolverType.
var (
	Consul_ServiceResolver_ResolverType_name = map[int32]string{
		0: "resolver_type_random",
		1: "resolver_type_consist",
	}
	Consul_ServiceResolver_ResolverType_value = map[string]int32{
		"resolver_type_random":  0,
		"resolver_type_consist": 1,
	}
)

func (x Consul_ServiceResolver_ResolverType) Enum() *Consul_ServiceResolver_ResolverType {
	p := new(Consul_ServiceResolver_ResolverType)
	*p = x
	return p
}

func (x Consul_ServiceResolver_ResolverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Consul_ServiceResolver_ResolverType) Descriptor() protoreflect.EnumDescriptor {
	return file_consul_proto_enumTypes[0].Descriptor()
}

func (Consul_ServiceResolver_ResolverType) Type() protoreflect.EnumType {
	return &file_consul_proto_enumTypes[0]
}

func (x Consul_ServiceResolver_ResolverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Consul_ServiceResolver_ResolverType.Descriptor instead.
func (Consul_ServiceResolver_ResolverType) EnumDescriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Consul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsulAddress   string                  `protobuf:"bytes,1,opt,name=consul_address,json=consulAddress,proto3" json:"consul_address,omitempty"`       // host:port, addr of consul server
	ServiceRegistry *Consul_ServiceRegistry `protobuf:"bytes,2,opt,name=service_registry,json=serviceRegistry,proto3" json:"service_registry,omitempty"` // for service registry
	ServiceResolver *Consul_ServiceResolver `protobuf:"bytes,3,opt,name=service_resolver,json=serviceResolver,proto3" json:"service_resolver,omitempty"` // for service resolver
}

func (x *Consul) Reset() {
	*x = Consul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul) ProtoMessage() {}

func (x *Consul) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul.ProtoReflect.Descriptor instead.
func (*Consul) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0}
}

func (x *Consul) GetConsulAddress() string {
	if x != nil {
		return x.ConsulAddress
	}
	return ""
}

func (x *Consul) GetServiceRegistry() *Consul_ServiceRegistry {
	if x != nil {
		return x.ServiceRegistry
	}
	return nil
}

func (x *Consul) GetServiceResolver() *Consul_ServiceResolver {
	if x != nil {
		return x.ServiceResolver
	}
	return nil
}

type Consul_ServiceRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterInterval      *durationpb.Duration              `protobuf:"bytes,1,opt,name=register_interval,json=registerInterval,proto3" json:"register_interval,omitempty"` // interval to register services to consul
	HealthCheckInterval   *durationpb.Duration              `protobuf:"bytes,2,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	Services              []*Consul_ServiceRegistry_Service `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	DefaultServiceAddress string                            `protobuf:"bytes,4,opt,name=default_service_address,json=defaultServiceAddress,proto3" json:"default_service_address,omitempty"` // host:port, default addr of services to register if not empty
}

func (x *Consul_ServiceRegistry) Reset() {
	*x = Consul_ServiceRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul_ServiceRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul_ServiceRegistry) ProtoMessage() {}

func (x *Consul_ServiceRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul_ServiceRegistry.ProtoReflect.Descriptor instead.
func (*Consul_ServiceRegistry) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Consul_ServiceRegistry) GetRegisterInterval() *durationpb.Duration {
	if x != nil {
		return x.RegisterInterval
	}
	return nil
}

func (x *Consul_ServiceRegistry) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

func (x *Consul_ServiceRegistry) GetServices() []*Consul_ServiceRegistry_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Consul_ServiceRegistry) GetDefaultServiceAddress() string {
	if x != nil {
		return x.DefaultServiceAddress
	}
	return ""
}

type Consul_ServiceResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolveInterval *durationpb.Duration              `protobuf:"bytes,1,opt,name=resolve_interval,json=resolveInterval,proto3" json:"resolve_interval,omitempty"` // interval to pull server nodes from consul
	Services        []*Consul_ServiceResolver_Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *Consul_ServiceResolver) Reset() {
	*x = Consul_ServiceResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul_ServiceResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul_ServiceResolver) ProtoMessage() {}

func (x *Consul_ServiceResolver) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul_ServiceResolver.ProtoReflect.Descriptor instead.
func (*Consul_ServiceResolver) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Consul_ServiceResolver) GetResolveInterval() *durationpb.Duration {
	if x != nil {
		return x.ResolveInterval
	}
	return nil
}

func (x *Consul_ServiceResolver) GetServices() []*Consul_ServiceResolver_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type Consul_ServiceRegistry_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // service name
	Address        string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // host:port
	HealthCheckUrl string `protobuf:"bytes,3,opt,name=health_check_url,json=healthCheckUrl,proto3" json:"health_check_url,omitempty"`
}

func (x *Consul_ServiceRegistry_Service) Reset() {
	*x = Consul_ServiceRegistry_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul_ServiceRegistry_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul_ServiceRegistry_Service) ProtoMessage() {}

func (x *Consul_ServiceRegistry_Service) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul_ServiceRegistry_Service.ProtoReflect.Descriptor instead.
func (*Consul_ServiceRegistry_Service) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Consul_ServiceRegistry_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consul_ServiceRegistry_Service) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Consul_ServiceRegistry_Service) GetHealthCheckUrl() string {
	if x != nil {
		return x.HealthCheckUrl
	}
	return ""
}

type Consul_ServiceResolver_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // service name
	ResolverType Consul_ServiceResolver_ResolverType `protobuf:"varint,2,opt,name=resolver_type,json=resolverType,proto3,enum=sole.api.v1.viper.consul.Consul_ServiceResolver_ResolverType" json:"resolver_type,omitempty"`
}

func (x *Consul_ServiceResolver_Service) Reset() {
	*x = Consul_ServiceResolver_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consul_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul_ServiceResolver_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul_ServiceResolver_Service) ProtoMessage() {}

func (x *Consul_ServiceResolver_Service) ProtoReflect() protoreflect.Message {
	mi := &file_consul_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul_ServiceResolver_Service.ProtoReflect.Descriptor instead.
func (*Consul_ServiceResolver_Service) Descriptor() ([]byte, []int) {
	return file_consul_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Consul_ServiceResolver_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consul_ServiceResolver_Service) GetResolverType() Consul_ServiceResolver_ResolverType {
	if x != nil {
		return x.ResolverType
	}
	return Consul_ServiceResolver_resolver_type_random
}

var File_consul_proto protoreflect.FileDescriptor

var file_consul_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x1a, 0x99, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x4d, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x54, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x61, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x1a, 0xf6, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x81, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x10, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consul_proto_rawDescOnce sync.Once
	file_consul_proto_rawDescData = file_consul_proto_rawDesc
)

func file_consul_proto_rawDescGZIP() []byte {
	file_consul_proto_rawDescOnce.Do(func() {
		file_consul_proto_rawDescData = protoimpl.X.CompressGZIP(file_consul_proto_rawDescData)
	})
	return file_consul_proto_rawDescData
}

var file_consul_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_consul_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_consul_proto_goTypes = []interface{}{
	(Consul_ServiceResolver_ResolverType)(0), // 0: sole.api.v1.viper.consul.Consul.ServiceResolver.ResolverType
	(*Consul)(nil),                           // 1: sole.api.v1.viper.consul.Consul
	(*Consul_ServiceRegistry)(nil),           // 2: sole.api.v1.viper.consul.Consul.ServiceRegistry
	(*Consul_ServiceResolver)(nil),           // 3: sole.api.v1.viper.consul.Consul.ServiceResolver
	(*Consul_ServiceRegistry_Service)(nil),   // 4: sole.api.v1.viper.consul.Consul.ServiceRegistry.Service
	(*Consul_ServiceResolver_Service)(nil),   // 5: sole.api.v1.viper.consul.Consul.ServiceResolver.Service
	(*durationpb.Duration)(nil),              // 6: google.protobuf.Duration
}
var file_consul_proto_depIdxs = []int32{
	2, // 0: sole.api.v1.viper.consul.Consul.service_registry:type_name -> sole.api.v1.viper.consul.Consul.ServiceRegistry
	3, // 1: sole.api.v1.viper.consul.Consul.service_resolver:type_name -> sole.api.v1.viper.consul.Consul.ServiceResolver
	6, // 2: sole.api.v1.viper.consul.Consul.ServiceRegistry.register_interval:type_name -> google.protobuf.Duration
	6, // 3: sole.api.v1.viper.consul.Consul.ServiceRegistry.health_check_interval:type_name -> google.protobuf.Duration
	4, // 4: sole.api.v1.viper.consul.Consul.ServiceRegistry.services:type_name -> sole.api.v1.viper.consul.Consul.ServiceRegistry.Service
	6, // 5: sole.api.v1.viper.consul.Consul.ServiceResolver.resolve_interval:type_name -> google.protobuf.Duration
	5, // 6: sole.api.v1.viper.consul.Consul.ServiceResolver.services:type_name -> sole.api.v1.viper.consul.Consul.ServiceResolver.Service
	0, // 7: sole.api.v1.viper.consul.Consul.ServiceResolver.Service.resolver_type:type_name -> sole.api.v1.viper.consul.Consul.ServiceResolver.ResolverType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_consul_proto_init() }
func file_consul_proto_init() {
	if File_consul_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consul_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul_ServiceRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul_ServiceResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul_ServiceRegistry_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consul_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul_ServiceResolver_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consul_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consul_proto_goTypes,
		DependencyIndexes: file_consul_proto_depIdxs,
		EnumInfos:         file_consul_proto_enumTypes,
		MessageInfos:      file_consul_proto_msgTypes,
	}.Build()
	File_consul_proto = out.File
	file_consul_proto_rawDesc = nil
	file_consul_proto_goTypes = nil
	file_consul_proto_depIdxs = nil
}
