// Code generated by "go-option -type=wrapper"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package otlpsql

import "go.opentelemetry.io/otel/attribute"

// A WrapperOption sets options.
type WrapperOption interface {
	apply(*wrapper)
}

// EmptyWrapperOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyWrapperOption struct{}

func (EmptyWrapperOption) apply(*wrapper) {}

// WrapperOptionFunc wraps a function that modifies wrapper into an
// implementation of the WrapperOption interface.
type WrapperOptionFunc func(*wrapper)

func (f WrapperOptionFunc) apply(do *wrapper) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *wrapper) ApplyOptions(options ...WrapperOption) *wrapper {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// withWrapper sets wrapper.
func withWrapper(v wrapper) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		*o = v
	})
}

// WithWrapperAllowRoot sets AllowRoot in wrapper.
// AllowRoot, if set to true, will allow otlpsql to create root spans in
// absence of existing spans or even context.
// Default is to not trace otlpsql calls if no existing parent span is found
// in context or when using methods not taking context.
func WithWrapperAllowRoot(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.AllowRoot = v
	})
}

// WithWrapperPing sets Ping in wrapper.
// Ping, if set to true, will enable the creation of spans on Ping requests.
func WithWrapperPing(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.Ping = v
	})
}

// WithWrapperRowsNext sets RowsNext in wrapper.
// RowsNext, if set to true, will enable the creation of spans on RowsNext
// calls. This can result in many spans.
func WithWrapperRowsNext(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.RowsNext = v
	})
}

// WithWrapperRowsClose sets RowsClose in wrapper.
// RowsClose, if set to true, will enable the creation of spans on RowsClose
// calls.
func WithWrapperRowsClose(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.RowsClose = v
	})
}

// WithWrapperRowsAffected sets RowsAffected in wrapper.
// RowsAffected, if set to true, will enable the creation of spans on
// RowsAffected calls.
func WithWrapperRowsAffected(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.RowsAffected = v
	})
}

// WithWrapperLastInsertID sets LastInsertID in wrapper.
// LastInsertID, if set to true, will enable the creation of spans on
// LastInsertId calls.
func WithWrapperLastInsertID(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.LastInsertID = v
	})
}

// WithWrapperQuery sets Query in wrapper.
// Query, if set to true, will enable recording of sql queries in spans.
// Only allow this if it is safe to have queries recorded with respect to
// security.
func WithWrapperQuery(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.Query = v
	})
}

// WithWrapperQueryParams sets QueryParams in wrapper.
// QueryParams, if set to true, will enable recording of parameters used
// with parametrized queries. Only allow this if it is safe to have
// parameters recorded with respect to security.
// This setting is a noop if the Query option is set to false.
func WithWrapperQueryParams(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.QueryParams = v
	})
}

// WithWrapperDefaultAttributes sets DefaultAttributes in wrapper.
// DefaultAttributes will be set to each span as default.
func WithWrapperDefaultAttributes(v []attribute.KeyValue) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.DefaultAttributes = v
	})
}

// WithWrapperInstanceName sets InstanceName in wrapper.
// InstanceName identifies database.
func WithWrapperInstanceName(v string) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.InstanceName = v
	})
}

// WithWrapperDisableErrSkip sets DisableErrSkip in wrapper.
// DisableErrSkip, if set to true, will suppress driver.ErrSkip errors in spans.
func WithWrapperDisableErrSkip(v bool) WrapperOption {
	return WrapperOptionFunc(func(o *wrapper) {
		o.DisableErrSkip = v
	})
}
