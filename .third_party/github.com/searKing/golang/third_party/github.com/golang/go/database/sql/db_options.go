// Code generated by "go-option -type DB"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package sql

import (
	"log/slog"

	"github.com/jmoiron/sqlx"
)

// A DBOption sets options.
type DBOption interface {
	apply(*DB)
}

// EmptyDBOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyDBOption struct{}

func (EmptyDBOption) apply(*DB) {}

// DBOptionFunc wraps a function that modifies DB into an
// implementation of the DBOption interface.
type DBOptionFunc func(*DB)

func (f DBOptionFunc) apply(do *DB) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *DB) ApplyOptions(options ...DBOption) *DB {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithDB sets DB.
func WithDB(v DB) DBOption {
	return DBOptionFunc(func(o *DB) {
		*o = v
	})
}

// WithDBDSN sets DSN in DB.
func WithDBDSN(v string) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.DSN = v
	})
}

// WithDBDb sets db in DB.
func WithDBDb(v *sqlx.DB) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.db = v
	})
}

// WithDBDriverName sets driverName in DB.
func WithDBDriverName(v string) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.driverName = v
	})
}

// WithDBDriverPackage sets driverPackage in DB.
func WithDBDriverPackage(v string) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.driverPackage = v
	})
}

// WithDBLogger sets logger in DB.
func WithDBLogger(v *slog.Logger) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.logger = v
	})
}

// WithDBOpts sets opts in DB.
// options
func WithDBOpts(v struct {
	UseTracedDriver  bool
	TraceOrphans     bool
	OmitArgs         bool
	ForcedDriverName string
}) DBOption {
	return DBOptionFunc(func(o *DB) {
		o.opts = v
	})
}
