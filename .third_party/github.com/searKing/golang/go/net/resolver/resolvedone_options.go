// Code generated by "go-option -type resolveDone"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package resolver

// A ResolveDoneOption sets options.
type ResolveDoneOption interface {
	apply(*resolveDone)
}

// EmptyResolveDoneOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyResolveDoneOption struct{}

func (EmptyResolveDoneOption) apply(*resolveDone) {}

// ResolveDoneOptionFunc wraps a function that modifies resolveDone into an
// implementation of the ResolveDoneOption interface.
type ResolveDoneOptionFunc func(*resolveDone)

func (f ResolveDoneOptionFunc) apply(do *resolveDone) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *resolveDone) ApplyOptions(options ...ResolveDoneOption) *resolveDone {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// sample code for option, default for nothing to change
func _ResolveDoneOptionWithDefault() ResolveDoneOption {
	return ResolveDoneOptionFunc(func(*resolveDone) {
		// nothing to change
	})
}
