consumes:
- application/json
definitions:
  apiHttpBody:
    description: |-
      Message that represents an arbitrary HTTP body. It should only be used for
      payload formats that can't be represented as JSON, such as raw binary or
      an HTML page.


      This message can be used both in streaming and non-streaming API methods in
      the request as well as the response.

      It can be used as a top-level request field, which is convenient if one
      wants to extract parameters from either the URL or HTTP template into the
      request fields and also want access to the raw HTTP body.

      Example:

          message GetResourceRequest {
            // A unique request id.
            string request_id = 1;

            // The raw HTTP body is bound to this field.
            google.api.HttpBody http_body = 2;
          }

          service ResourceService {
            rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);
            rpc UpdateResource(google.api.HttpBody) returns
            (google.protobuf.Empty);
          }

      Example with streaming methods:

          service CaldavService {
            rpc GetCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);
            rpc UpdateCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);
          }

      Use of this type only changes how the request and response bodies are
      handled, all other features will continue to work unchanged.
    properties:
      content_type:
        description: The HTTP Content-Type header value specifying the content type of the body.
        type: string
      data:
        description: The HTTP request/response body as raw binary.
        format: byte
        type: string
      extensions:
        description: |-
          Application specific response metadata. Must be set in the first response
          for streaming APIs.
        items:
          $ref: '#/definitions/protobufAny'
        type: array
    type: object
  dateDateResponse:
    properties:
      date:
        type: string
      request_id:
        type: string
    type: object
  healthAliveResponse:
    example:
      status: ok
    properties:
      status:
        $ref: '#/definitions/healthStatus'
        description: Status always contains "ok".
    required:
    - status
    type: object
  healthReadyResponse:
    example:
      status: ok
    properties:
      errors:
        additionalProperties:
          type: string
        description: Errors contains a list of errors that caused the not ready status.
        type: object
      status:
        $ref: '#/definitions/healthStatus'
        description: Status always contains "ok".
    type: object
  healthStatus:
    default: ok
    enum:
    - ok
    type: string
  healthVersionResponse:
    example:
      version: dev-master
    properties:
      version:
        title: 服务软件版本
        type: string
    type: object
  protobufAny:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    properties:
      type_url:
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
      value:
        description: Must be a valid serialized protocol buffer of the above specified type.
        format: byte
        type: string
    type: object
  runtimeError:
    properties:
      code:
        format: int32
        type: integer
      details:
        items:
          $ref: '#/definitions/protobufAny'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
info:
  contact:
    email: searKingChan@gmail.com
    name: sole
    url: http://github.com/searKing/sole
  title: sole
  version: 1.0.0
paths:
  /date/*path:
    get:
      description: |
        + 本接口返回服务节点当前日期
        + 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。
      operationId: Now
      parameters:
      - in: query
        name: request_id
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/dateDateResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 日期查询
      tags:
      - 日期查询
  /date/now:
    get:
      description: |
        + 本接口返回服务节点当前日期
        + 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。
      operationId: Now3
      parameters:
      - in: query
        name: request_id
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/dateDateResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 日期查询
      tags:
      - 日期查询
  /date/now/**:
    get:
      description: |
        + 本接口返回服务节点当前日期
        + 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。
      operationId: Now2
      parameters:
      - in: query
        name: request_id
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/dateDateResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 日期查询
      tags:
      - 日期查询
  /debug/pprof:
    get:
      description: |
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      externalDocs:
        description: golang pprof
        url: https://github.com/golang/go/wiki/Performance
      operationId: PProf3
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: golang 性能监控
      tags:
      - 服务性能
  /debug/pprof/**:
    get:
      description: |
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      externalDocs:
        description: golang pprof
        url: https://github.com/golang/go/wiki/Performance
      operationId: PProf2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: golang 性能监控
      tags:
      - 服务性能
  /debug/pprof/*path:
    get:
      description: |
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      externalDocs:
        description: golang pprof
        url: https://github.com/golang/go/wiki/Performance
      operationId: PProf
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: golang 性能监控
      tags:
      - 服务性能
  /debug/vars:
    get:
      description: |
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      externalDocs:
        description: golang expvar
        url: http://golang.org/pkg/expvar
      operationId: ExpVar
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: golang 变量监控
      tags:
      - 服务性能
  /doc/swagger/swagger-ui:
    get:
      description: |-
        + 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
        + 本接口提供Swagger文档在线预览静态站点,快速预览Swagger文档
      externalDocs:
        description: swagger io
        url: https://swagger.io/
      operationId: UI
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 静态Swagger UI
      tags:
      - 文档服务
  /doc/swagger/swagger-ui/index.html:
    get:
      description: |-
        + 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
        + 本接口提供Swagger文档在线预览静态站点,快速预览Swagger文档
      externalDocs:
        description: swagger io
        url: https://swagger.io/
      operationId: UI2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 静态Swagger UI
      tags:
      - 文档服务
  /doc/swagger/swagger.json:
    get:
      description: |-
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
        + 本接口提供Swagger文档描述文件，json格式
      externalDocs:
        description: swagger io
        url: https://swagger.io/
      operationId: Json
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 静态Swagger JSON
      tags:
      - 文档服务
  /doc/swagger/swagger.yaml:
    get:
      description: |-
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
        + 本接口提供Swagger文档描述文件，yaml格式
      externalDocs:
        description: swagger io
        url: https://swagger.io/
      operationId: Yaml
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 静态Swagger YAML
      tags:
      - 文档服务
  /health/alive:
    get:
      description: |-
        + 本接口检测服务节点状态，即该节点是否正常启动；但不包括依赖的其他服务状态
        + 当本服务HTTP服务启动成功后 ，返回状态码200。
        + 当前状态码并不检测本服务所依赖的其他服务的运行状态
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
      operationId: Alive
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/healthAliveResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 节点启动状态检测
      tags:
      - 健康监测
  /health/metrics/prometheus:
    get:
      description: |
        + 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
        + 支持promethus API接口，promethus是一种集中式度量系统，用于记录可聚合的数据；如队列的当前深度，随元素入队出队而更新；HTTP的请求个数，随HTTP请求到来而更新
      externalDocs:
        description: prometheus
        url: https://prometheus.io/docs/prometheus/latest/querying/api/
      operationId: MetricsPrometheus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: Prometheus监控
      tags:
      - 微服务管理
  /health/ready:
    get:
      description: |-
        + 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
      operationId: Ready
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/healthReadyResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 节点就绪状态监测
      tags:
      - 健康监测
  /index:
    get:
      description: |-
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      operationId: HomePage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 主页
      tags:
      - 主页
  /index.html:
    get:
      description: |-
        + 本接口返回服务节点资源信息
        + 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。
      operationId: HomePage2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 主页
      tags:
      - 主页
  /version:
    get:
      description: |
        + 本接口返回服务节点软件版本
        + 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。
      operationId: Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/healthVersionResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      summary: 服务版本查询
      tags:
      - 健康监测
produces:
- application/json
swagger: "2.0"
