{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "sole",
    "contact": {
      "name": "sole",
      "url": "http://github.com/searKing/sole",
      "email": "searKingChan@gmail.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/date/*path": {
      "get": {
        "description": "+ 本接口返回服务节点当前日期\n+ 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。\n",
        "tags": [
          "日期查询"
        ],
        "summary": "日期查询",
        "operationId": "Now",
        "parameters": [
          {
            "type": "string",
            "name": "request_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dateDateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/date/now": {
      "get": {
        "description": "+ 本接口返回服务节点当前日期\n+ 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。\n",
        "tags": [
          "日期查询"
        ],
        "summary": "日期查询",
        "operationId": "Now3",
        "parameters": [
          {
            "type": "string",
            "name": "request_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dateDateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/date/now/**": {
      "get": {
        "description": "+ 本接口返回服务节点当前日期\n+ 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。\n",
        "tags": [
          "日期查询"
        ],
        "summary": "日期查询",
        "operationId": "Now2",
        "parameters": [
          {
            "type": "string",
            "name": "request_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dateDateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/debug/pprof": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n",
        "tags": [
          "服务性能"
        ],
        "summary": "golang 性能监控",
        "externalDocs": {
          "description": "golang pprof",
          "url": "https://github.com/golang/go/wiki/Performance"
        },
        "operationId": "PProf3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/debug/pprof/**": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n",
        "tags": [
          "服务性能"
        ],
        "summary": "golang 性能监控",
        "externalDocs": {
          "description": "golang pprof",
          "url": "https://github.com/golang/go/wiki/Performance"
        },
        "operationId": "PProf2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/debug/pprof/*path": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n",
        "tags": [
          "服务性能"
        ],
        "summary": "golang 性能监控",
        "externalDocs": {
          "description": "golang pprof",
          "url": "https://github.com/golang/go/wiki/Performance"
        },
        "operationId": "PProf",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/debug/vars": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n",
        "tags": [
          "服务性能"
        ],
        "summary": "golang 变量监控",
        "externalDocs": {
          "description": "golang expvar",
          "url": "http://golang.org/pkg/expvar"
        },
        "operationId": "ExpVar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/doc/swagger/swagger-ui": {
      "get": {
        "description": "+ 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。\n+ 本接口提供Swagger文档在线预览静态站点,快速预览Swagger文档",
        "tags": [
          "文档服务"
        ],
        "summary": "静态Swagger UI",
        "externalDocs": {
          "description": "swagger io",
          "url": "https://swagger.io/"
        },
        "operationId": "UI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/doc/swagger/swagger-ui/index.html": {
      "get": {
        "description": "+ 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。\n+ 本接口提供Swagger文档在线预览静态站点,快速预览Swagger文档",
        "tags": [
          "文档服务"
        ],
        "summary": "静态Swagger UI",
        "externalDocs": {
          "description": "swagger io",
          "url": "https://swagger.io/"
        },
        "operationId": "UI2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/doc/swagger/swagger.json": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n+ 本接口提供Swagger文档描述文件，json格式",
        "tags": [
          "文档服务"
        ],
        "summary": "静态Swagger JSON",
        "externalDocs": {
          "description": "swagger io",
          "url": "https://swagger.io/"
        },
        "operationId": "Json",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/doc/swagger/swagger.yaml": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。\n+ 本接口提供Swagger文档描述文件，yaml格式",
        "tags": [
          "文档服务"
        ],
        "summary": "静态Swagger YAML",
        "externalDocs": {
          "description": "swagger io",
          "url": "https://swagger.io/"
        },
        "operationId": "Yaml",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/health/alive": {
      "get": {
        "description": "+ 本接口检测服务节点状态，即该节点是否正常启动；但不包括依赖的其他服务状态\n+ 当本服务HTTP服务启动成功后 ，返回状态码200。\n+ 当前状态码并不检测本服务所依赖的其他服务的运行状态\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。",
        "tags": [
          "健康监测"
        ],
        "summary": "节点启动状态检测",
        "operationId": "Alive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthAliveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/health/metrics/prometheus": {
      "get": {
        "description": "+ 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。\n+ 支持promethus API接口，promethus是一种集中式度量系统，用于记录可聚合的数据；如队列的当前深度，随元素入队出队而更新；HTTP的请求个数，随HTTP请求到来而更新\n",
        "tags": [
          "微服务管理"
        ],
        "summary": "Prometheus监控",
        "externalDocs": {
          "description": "prometheus",
          "url": "https://prometheus.io/docs/prometheus/latest/querying/api/"
        },
        "operationId": "MetricsPrometheus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "+ 本接口检测本服务节点状态，即服务节点是否可用，即是否可正常对外提供服务；包括本节点HTTP服务运行状态及所依赖的其他服务的运行状态\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。",
        "tags": [
          "健康监测"
        ],
        "summary": "节点就绪状态监测",
        "operationId": "Ready",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthReadyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/index": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。",
        "tags": [
          "主页"
        ],
        "summary": "主页",
        "operationId": "HomePage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/index.html": {
      "get": {
        "description": "+ 本接口返回服务节点资源信息\n+ 如果本服务运行在多个节点之上，此接口返回的资源页面只针对当前访问的服务节点，并不反应整个集群的资源状态。",
        "tags": [
          "主页"
        ],
        "summary": "主页",
        "operationId": "HomePage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "+ 本接口返回服务节点软件版本\n+ 如果本服务运行在多个节点之上，此接口返回的健康状态码只针对当前访问的服务节点，并不反应整个集群的健康状态。\n",
        "tags": [
          "健康监测"
        ],
        "summary": "服务版本查询",
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiHttpBody": {
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "content_type": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "dateDateResponse": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        }
      }
    },
    "healthAliveResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Status always contains \"ok\".",
          "$ref": "#/definitions/healthStatus"
        }
      },
      "example": {
        "status": "ok"
      }
    },
    "healthReadyResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "Status always contains \"ok\".",
          "$ref": "#/definitions/healthStatus"
        }
      },
      "example": {
        "status": "ok"
      }
    },
    "healthStatus": {
      "type": "string",
      "default": "ok",
      "enum": [
        "ok"
      ]
    },
    "healthVersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "服务软件版本"
        }
      },
      "example": {
        "version": "dev-master"
      }
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "type": "object",
      "properties": {
        "type_url": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        },
        "value": {
          "description": "Must be a valid serialized protocol buffer of the above specified type.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}