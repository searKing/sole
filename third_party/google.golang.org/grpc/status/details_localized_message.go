package status

import (
	"errors"

	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// The locale used following the specification defined at
// http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
// Examples are: "en-US", "fr-CH", "es-MX", "zh-CN"
// advice: use locale generated by golang.org/x/text/language.Tag
// "en-US" : language.AmericanEnglish.String()
// "zh-CN" : language.SimplifiedChinese.String()
func GetLocalizedMessage(s *Status, locale string) string {
	for _, d := range s.Details() {
		switch d := d.(type) {
		case errdetails.LocalizedMessage:
			if d.GetLocale() != locale {
				continue
			}
			return d.GetMessage()
		}
	}
	return s.Message()
}

// GetLocalizedMessageError is a convenience function which returns an error that formats as the given Status with
// locale message or message.
func GetLocalizedMessageError(s *Status, locale string) error {
	if s.Code() == codes.OK {
		return nil
	}
	return errors.New(GetLocalizedMessage(s, locale))
}

// GetLocalizedMessageFromError is a convenience function which removes the need to handle the
// error which may be not Status from GetLocalizedMessage.
func GetLocalizedMessageFromError(err error, locale string) string {
	return GetLocalizedMessage(status.Convert(err), locale)
}

// GetErrorWithLocalizedMessage is a convenience function which removes the need to handle the
// error which may be not Status from GetLocalizedMessageError.
func GetErrorWithLocalizedMessage(err error, locale string) error {
	return GetLocalizedMessageError(status.Convert(err), locale)
}
