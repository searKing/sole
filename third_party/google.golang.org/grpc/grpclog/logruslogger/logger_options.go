// Code generated by "go-option -type Logger"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package logruslogger

import "github.com/sirupsen/logrus"

// A LoggerOption sets options.
type LoggerOption interface {
	apply(*Logger)
}

// EmptyLoggerOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyLoggerOption struct{}

func (EmptyLoggerOption) apply(*Logger) {}

// LoggerOptionFunc wraps a function that modifies Logger into an
// implementation of the LoggerOption interface.
type LoggerOptionFunc func(*Logger)

func (f LoggerOptionFunc) apply(do *Logger) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *Logger) ApplyOptions(options ...LoggerOption) *Logger {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithLogger sets Logger.
func WithLogger(v Logger) LoggerOption {
	return LoggerOptionFunc(func(o *Logger) {
		*o = v
	})
}

// WithLoggerEntry sets Entry in Logger.
func WithLoggerEntry(v *logrus.Entry) LoggerOption {
	return LoggerOptionFunc(func(o *Logger) {
		o.Entry = v
	})
}

// WithLoggerVerbose sets verbose in Logger.
func WithLoggerVerbose(v int) LoggerOption {
	return LoggerOptionFunc(func(o *Logger) {
		o.verbose = v
	})
}

// WithLoggerLevelTranslator sets LevelTranslator in Logger.
func WithLoggerLevelTranslator(v func(level logrus.Level) logrus.Level) LoggerOption {
	return LoggerOptionFunc(func(o *Logger) {
		o.LevelTranslator = v
	})
}
