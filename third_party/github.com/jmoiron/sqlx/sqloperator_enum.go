// Code generated by "go-enum -type SqlOperator -trimprefix=SqlOperator --transform=upper"; DO NOT EDIT.

package sqlx

import (
	"database/sql"
	"database/sql/driver"
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SqlOperatorAnd-0]
	_ = x[SqlOperatorOr-1]
	_ = x[SqlOperatorNot-2]
}

const _SqlOperator_name = "ANDORNOT"

var _SqlOperator_index = [...]uint8{0, 3, 5, 8}

func _() {
	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()

	// An "cannot convert SqlOperator literal (type SqlOperator) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_SqlOperator_value
}

func (i SqlOperator) String() string {
	if i < 0 || i >= SqlOperator(len(_SqlOperator_index)-1) {
		return "SqlOperator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SqlOperator_name[_SqlOperator_index[i]:_SqlOperator_index[i+1]]
}

var _SqlOperator_values = []SqlOperator{0, 1, 2}

var _SqlOperator_name_to_values = map[string]SqlOperator{
	_SqlOperator_name[0:3]: 0,
	_SqlOperator_name[3:5]: 1,
	_SqlOperator_name[5:8]: 2,
}

// ParseSqlOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseSqlOperatorString(s string) (SqlOperator, error) {
	if val, ok := _SqlOperator_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%[1]s does not belong to SqlOperator values", s)
}

// SqlOperatorValues returns all values of the enum
func SqlOperatorValues() []SqlOperator {
	return _SqlOperator_values
}

// IsASqlOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SqlOperator) Registered() bool {
	for _, v := range _SqlOperator_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()

	// An "cannot convert SqlOperator literal (type SqlOperator) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_SqlOperator_value

	// An "cannot convert SqlOperator literal (type SqlOperator) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_SqlOperator_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for SqlOperator
func (i SqlOperator) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for SqlOperator
func (i *SqlOperator) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseSqlOperatorString(string(data))
	return err
}

func _() {
	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()

	// An "cannot convert SqlOperator literal (type SqlOperator) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_SqlOperator_value

	// An "cannot convert SqlOperator literal (type SqlOperator) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_SqlOperator_value
}

// MarshalJSON implements the json.Marshaler interface for SqlOperator
func (i SqlOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SqlOperator
func (i *SqlOperator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SqlOperator should be a string, got %[1]s", data)
	}

	var err error
	*i, err = ParseSqlOperatorString(s)
	return err
}

func _() {
	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()

	// An "cannot convert SqlOperator literal (type SqlOperator) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_SqlOperator_value

	// An "cannot convert SqlOperator literal (type SqlOperator) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_SqlOperator_value
}

// MarshalText implements the encoding.TextMarshaler interface for SqlOperator
func (i SqlOperator) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SqlOperator
func (i *SqlOperator) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseSqlOperatorString(string(text))
	return err
}

//func _() {
//	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()
//
//	// An "cannot convert SqlOperator literal (type SqlOperator) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_SqlOperator_value
//
//	// An "cannot convert SqlOperator literal (type SqlOperator) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_SqlOperator_value
//}

// MarshalYAML implements a YAML Marshaler for SqlOperator
func (i SqlOperator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SqlOperator
func (i *SqlOperator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseSqlOperatorString(s)
	return err
}

func _() {
	var _nil_SqlOperator_value = func() (val SqlOperator) { return }()

	// An "cannot convert SqlOperator literal (type SqlOperator) to type driver.Valuer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ driver.Valuer = _nil_SqlOperator_value

	// An "cannot convert SqlOperator literal (type SqlOperator) to type sql.Scanner" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ sql.Scanner = &_nil_SqlOperator_value
}

func (i SqlOperator) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SqlOperator) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParseSqlOperatorString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// SqlOperatorSliceContains reports whether sunEnums is within enums.
func SqlOperatorSliceContains(enums []SqlOperator, sunEnums ...SqlOperator) bool {
	var seenEnums = map[SqlOperator]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// SqlOperatorSliceContainsAny reports whether any sunEnum is within enums.
func SqlOperatorSliceContainsAny(enums []SqlOperator, sunEnums ...SqlOperator) bool {
	var seenEnums = map[SqlOperator]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
