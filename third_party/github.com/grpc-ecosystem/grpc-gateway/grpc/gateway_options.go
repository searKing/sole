// Code generated by "go-option -type=Gateway"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package grpc

import (
	"net/http"
	"sync"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"
)

// A GatewayOption sets options.
type GatewayOption interface {
	apply(*Gateway)
}

// EmptyGatewayOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyGatewayOption struct{}

func (EmptyGatewayOption) apply(*Gateway) {}

// GatewayOptionFunc wraps a function that modifies Gateway into an
// implementation of the GatewayOption interface.
type GatewayOptionFunc func(*Gateway)

func (f GatewayOptionFunc) apply(do *Gateway) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *Gateway) ApplyOptions(options ...GatewayOption) *Gateway {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithGateway sets Gateway.
func WithGateway(v Gateway) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		*o = v
	})
}

// WithGatewayOpt sets opt in Gateway.
// options
func WithGatewayOpt(v gatewayOption) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		o.opt = v
	})
}

// WithGatewayHttpMuxToGrpc sets httpMuxToGrpc in Gateway.
func WithGatewayHttpMuxToGrpc(v *runtime.ServeMux) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		o.httpMuxToGrpc = v
	})
}

// WithGatewayHandler sets Handler in Gateway.
func WithGatewayHandler(v http.Handler) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		o.Handler = v
	})
}

// WithGatewayGrpcServer sets grpcServer in Gateway.
// runtime
func WithGatewayGrpcServer(v *grpc.Server) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		o.grpcServer = v
	})
}

// WithGatewayOnce sets once in Gateway.
func WithGatewayOnce(v sync.Once) GatewayOption {
	return GatewayOptionFunc(func(o *Gateway) {
		o.once = v
	})
}
