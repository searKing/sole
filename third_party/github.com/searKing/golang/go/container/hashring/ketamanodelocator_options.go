// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by "go-option -type NodeLocator"; DO NOT EDIT.

package hashring

var _default_KetamaNodeLocator_value = func() (val NodeLocator) { return }()

// A NodeLocatorOption sets options.
type NodeLocatorOption interface {
	apply(*NodeLocator)
}

// EmptyKetamaNodeLocatorOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyKetamaNodeLocatorOption struct{}

func (EmptyKetamaNodeLocatorOption) apply(*NodeLocator) {}

// KetamaNodeLocatorOptionFunc wraps a function that modifies NodeLocator into an
// implementation of the NodeLocatorOption interface.
type KetamaNodeLocatorOptionFunc func(*NodeLocator)

func (f KetamaNodeLocatorOptionFunc) apply(do *NodeLocator) {
	f(do)
}

// sample code for option, default for nothing to change
func _KetamaNodeLocatorOptionWithDefault() NodeLocatorOption {
	return KetamaNodeLocatorOptionFunc(func(*NodeLocator) {
		// nothing to change
	})
}

func (c *NodeLocator) ApplyOptions(options ...NodeLocatorOption) *NodeLocator {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(c)
	}
	return c
}
