// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// generated by jsonenums -type Event; DO NOT EDIT

package resilience

import (
	"encoding/json"
	"fmt"
)

var (
	_EventNameToValue = map[string]Event{
		"EventNew":     EventNew,
		"EventClose":   EventClose,
		"EventExpired": EventExpired,
	}

	_EventValueToName = map[Event]string{
		EventNew:     "EventNew",
		EventClose:   "EventClose",
		EventExpired: "EventExpired",
	}
)

func init() {
	var v Event
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EventNameToValue = map[string]Event{
			interface{}(EventNew).(fmt.Stringer).String():     EventNew,
			interface{}(EventClose).(fmt.Stringer).String():   EventClose,
			interface{}(EventExpired).(fmt.Stringer).String(): EventExpired,
		}
	}
}

// MarshalJSON is generated so Event satisfies json.Marshaler.
func (r Event) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EventValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Event: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Event satisfies json.Unmarshaler.
func (r *Event) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Event should be a string, got %s", data)
	}
	v, ok := _EventNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Event %q", s)
	}
	*r = v
	return nil
}
