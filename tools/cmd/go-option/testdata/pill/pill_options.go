// Code generated by "go-option -type Pill"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package main

import time_ "time"

// A PillOption sets options.
type PillOption[T comparable] interface {
	apply(*Pill[T])
}

// EmptyPillOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyPillOption[T comparable] struct{}

func (EmptyPillOption[T]) apply(*Pill[T]) {}

// PillOptionFunc wraps a function that modifies Pill[T] into an
// implementation of the PillOption[T comparable] interface.
type PillOptionFunc[T comparable] func(*Pill[T])

func (f PillOptionFunc[T]) apply(do *Pill[T]) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *Pill[T]) ApplyOptions(options ...PillOption[T]) *Pill[T] {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithPill sets Pill.
func WithPill[T comparable](v Pill[T]) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		*o = v
	})
}

// WithPillName sets Name in Pill[T].
// This is Name doc comment
// This is Name line comment
func WithPillName[T comparable](v string) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.Name = v
	})
}

// WithAge sets Age in Pill[T].
func WithAge[T comparable](v string) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.Age = v
	})
}

// WithPillTitle sets NameAlias in Pill[T].
func WithPillTitle[T comparable](v string) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.NameAlias = v
	})
}

// WithPillGenericType sets genericType in Pill[T].
func WithPillGenericType[T comparable](v GenericType[T]) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.genericType = v
	})
}

// WithPillStructType sets structType in Pill[T].
func WithPillStructType[T comparable](v time_.Time) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.structType = v
	})
}

// WithPillArrayType sets arrayType in Pill[T].
func WithPillArrayType[T comparable](v [5]T) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.arrayType = v
	})
}

// WithPillPointerType sets pointerType in Pill[T].
func WithPillPointerType[T comparable](v *[5]T) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.pointerType = v
	})
}

// WithPillFuncType sets funcType in Pill[T].
func WithPillFuncType[T comparable](v func()) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.funcType = v
	})
}

// WithPillInterfaceType sets interfaceType in Pill[T].
func WithPillInterfaceType[T comparable](v any) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.interfaceType = v
	})
}

// WithPillMapType appends mapType in Pill[T].
func WithPillMapType[T comparable](m map[string]int64) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		if o.mapType == nil {
			o.mapType = m
			return
		}
		for k, v := range m {
			o.mapType[k] = v
		}
	})
}

// WithPillMapTypeReplace sets mapType in Pill[T].
func WithPillMapTypeReplace[T comparable](v map[string]int64) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.mapType = v
	})
}

// WithPillSliceType appends sliceType in Pill[T].
func WithPillSliceType[T comparable](v ...int64) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.sliceType = append(o.sliceType, v...)
	})
}

// WithPillSliceTypeReplace sets sliceType in Pill[T].
func WithPillSliceTypeReplace[T comparable](v ...int64) PillOption[T] {
	return PillOptionFunc[T](func(o *Pill[T]) {
		o.sliceType = v
	})
}
