// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package options

import (
	"context"
	"github.com/searKing/golang/pkg/webserver"
	"github.com/searKing/sole/pkg/web/modules/date"
	"github.com/searKing/sole/pkg/web/modules/debug"
	"github.com/searKing/sole/pkg/web/modules/doc/swagger"
	"github.com/searKing/sole/pkg/web/modules/index"
	"github.com/searKing/sole/pkg/web/modules/webapp"
	"github.com/searKing/sole/soletemplate/pkg/application"
	soletemplate2 "github.com/searKing/sole/soletemplate/web/app/soletemplate"
	"github.com/searKing/sole/soletemplate/web/modules/soletemplate"
	"github.com/spf13/viper"
)

import (
	_ "github.com/searKing/golang/pkg/instrumentation/otel/metric/otlpmetric/otlpmetricgrpc"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/metric/otlpmetric/otlpmetrichttp"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/metric/prometheusmetric"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/metric/stdoutmetric"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/trace/otlptrace/otlptracegrpc"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/trace/otlptrace/otlptracehttp"
	_ "github.com/searKing/golang/pkg/instrumentation/otel/trace/stdouttrace"
	_ "gocloud.dev/secrets/localsecrets"
)

// Injectors from inject_webserver.go:

func RunServer(ctx context.Context, cancel context.CancelFunc) (*_RunningServer, func(), error) {
	viperViper := viper.GetViper()
	configuration, err := NewConfig(ctx, viperViper)
	if err != nil {
		return nil, nil, err
	}
	options_env, err := NewEnv(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_log, err := NewLog(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	webServer, err := NewWebServer(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_otelMetric, err := NewOtelMetric(ctx, webServer, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_otelTrace, err := NewOtelTrace(ctx, webServer, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_fileCleaner, err := NewFileCleaner(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	controller := debug.NewController()
	dateController := date.NewController()
	indexController := index.NewController()
	swaggerController := swagger.NewController()
	webappController := webapp.NewController()
	validate := NewValidator()
	factory, err := NewTemplateExampleRepository(ctx, validate)
	if err != nil {
		return nil, nil, err
	}
	templateExampleHandler := application.NewTemplateExampleHandler(factory)
	commands := application.Commands{
		TemplateExample: templateExampleHandler,
	}
	queries := application.Queries{}
	applicationApplication := application.Application{
		Commands: commands,
		Queries:  queries,
	}
	keeper, cleanup, err := NewSecret(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	soletemplateController := soletemplate.NewController(applicationApplication, keeper)
	v := soletemplate2.NewWebHandlers(webServer, controller, dateController, indexController, swaggerController, webappController, soletemplateController)
	options_gc, err := NewGC(ctx, configuration)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	options_RunningServer, err := _NewRunningServer(ctx, options_env, options_log, options_otelMetric, options_otelTrace, webServer, options_fileCleaner, v, options_gc)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return options_RunningServer, func() {
		cleanup()
	}, nil
}

// inject_webserver.go:

type _RunningServer struct{}

// NewRunningServer 加载配置、启动服务
func _NewRunningServer(ctx context.Context, _ *_env, _ *_log, _ *_otelMetric, _ *_otelTrace,
	ws *webserver.WebServer, _ *_fileCleaner, _ []webserver.WebHandler, _ *_gc) (s *_RunningServer, err error) {
	prepared, err := ws.PrepareRun()
	if err != nil {
		return nil, err
	}

	return nil, prepared.Run(ctx)
}
