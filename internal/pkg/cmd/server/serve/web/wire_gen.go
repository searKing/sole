// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package web

import (
	"context"
	"github.com/searKing/sole/internal/pkg/provider"
	"github.com/searKing/sole/pkg/appinfo"
	"github.com/searKing/sole/pkg/webserver"
	"github.com/spf13/viper"
)

// Injectors from inject_appinfo.go:

//go:generate wire
// NewAppInfo is a Wire injector function that sets up the server using config file.
func NewAppInfo(ctx context.Context, opt *ServerRunOptions) error {
	config := opt.AppInfo
	error2 := appinfo.NewAppInfo(ctx, config)
	return error2
}

// Injectors from inject_config.go:

//go:generate wire
// NewConfig is a Wire injector function that sets up the server using config file.
func NewConfig(ctx context.Context, opt *ServerRunOptions) (*provider.Provider, error) {
	config := opt.Provider
	providerProvider, err := provider.NewProvider(ctx, config)
	if err != nil {
		return nil, err
	}
	return providerProvider, nil
}

// Injectors from inject_server.go:

//go:generate wire
func NewServerRunOptions() (*ServerRunOptions, error) {
	viperViper := viper.GetViper()
	config := NewProviderConfig(viperViper)
	webserverConfig := NewWebServerConfig(viperViper)
	appinfoConfig := NewAppInfoConfig(viperViper)
	serverRunOptions := &ServerRunOptions{
		Provider:         config,
		WebServerOptions: webserverConfig,
		AppInfo:          appinfoConfig,
	}
	return serverRunOptions, nil
}

// Injectors from inject_webserver..go:

//go:generate wire
// NewWebServer is a Wire injector function that sets up the server using WebServer(grpc+http).
func NewWebServer(ctx context.Context, opt *ServerRunOptions) (*webserver.WebServer, error) {
	config := opt.WebServerOptions
	webServer, err := webserver.NewWebServer(ctx, config)
	if err != nil {
		return nil, err
	}
	return webServer, nil
}

// inject_appinfo.go:

func NewAppInfoConfig(v *viper.Viper) *appinfo.Config {
	return appinfo.NewViperConfig(v, "app_info")
}

// inject_config.go:

func NewProviderConfig(v *viper.Viper) *provider.Config {
	return provider.NewViperConfig(v)
}

// inject_webserver..go:

func NewWebServerConfig(v *viper.Viper) *webserver.Config {
	return webserver.NewViperConfig(v, "web")
}
