// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package web

import (
	"context"
	"github.com/google/wire"
	"github.com/searKing/sole/internal/pkg/provider"
	"github.com/searKing/sole/pkg/appinfo"
	"github.com/searKing/sole/pkg/webserver"
	"github.com/searKing/sole/web/golang"
	"github.com/spf13/viper"
	"gocloud.dev/secrets"
)

import (
	_ "gocloud.dev/secrets/localsecrets"
)

// Injectors from inject_appinfo.go:

//go:generate wire
// NewAppInfo is a Wire injector function that sets up the server using config file.
func NewAppInfo(ctx context.Context, opt *ServerRunOptions) error {
	config := opt.AppInfo
	error2 := appinfo.NewAppInfo(ctx, config)
	return error2
}

// Injectors from inject_config.go:

//go:generate wire
// NewConfig is a Wire injector function that sets up the server using config file.
func NewConfig(ctx context.Context, opt *ServerRunOptions) (*provider.Provider, error) {
	config := opt.Provider
	providerProvider, err := provider.NewProvider(ctx, config)
	if err != nil {
		return nil, err
	}
	return providerProvider, nil
}

// Injectors from inject_secrets.go:

//go:generate wire
// NewSecrets is a Wire injector function that sets up the server using config file.
func NewSecrets(ctx context.Context, config *provider.Provider) (*secrets.Keeper, func(), error) {
	keeper, cleanup, err := openSecrets(ctx, config)
	if err != nil {
		return nil, nil, err
	}
	return keeper, func() {
		cleanup()
	}, nil
}

// Injectors from inject_server.go:

//go:generate wire
func NewServerRunOptions() (*ServerRunOptions, error) {
	viperViper := viper.GetViper()
	config := NewProviderConfig(viperViper)
	webserverConfig := NewWebServerConfig(viperViper)
	appinfoConfig := NewAppInfoConfig(viperViper)
	serverRunOptions := &ServerRunOptions{
		Provider:         config,
		WebServerOptions: webserverConfig,
		AppInfo:          appinfoConfig,
	}
	return serverRunOptions, nil
}

// Injectors from inject_webserver..go:

//go:generate wire
// NewWebServer is a Wire injector function that sets up the server using WebServer(grpc+http).
func NewWebServer(ctx context.Context, opt *ServerRunOptions) (*webserver.WebServer, func(), error) {
	config := opt.WebServerOptions
	providerProvider, err := NewConfig(ctx, opt)
	if err != nil {
		return nil, nil, err
	}
	keeper, cleanup, err := NewSecrets(ctx, providerProvider)
	if err != nil {
		return nil, nil, err
	}
	handler := golang.NewHandler(keeper)
	webServer, err := setupWebServer(ctx, config, handler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return webServer, func() {
		cleanup()
	}, nil
}

// inject_appinfo.go:

func NewAppInfoConfig(v *viper.Viper) *appinfo.Config {
	return appinfo.NewViperConfig(v, "app_info")
}

// inject_config.go:

func NewProviderConfig(v *viper.Viper) *provider.Config {
	return provider.NewViperConfig(v)
}

// inject_secrets.go:

func openSecrets(ctx context.Context, opt *provider.Provider) (keeper *secrets.Keeper, cleanup func(), err error) {
	keeper, err = secrets.OpenKeeper(ctx, opt.Proto.GetSecret())
	if err != nil {
		return nil, nil, err
	}
	return keeper, func() {
		keeper.Close()
	}, nil
}

// inject_server.go:

var NewServerRunOptionsSet = wire.NewSet(wire.Struct(new(ServerRunOptions), "Provider", "WebServerOptions", "AppInfo"), viper.GetViper, NewProviderConfig,
	NewWebServerConfig,
	NewAppInfoConfig)

// inject_webserver..go:

func NewWebServerConfig(v *viper.Viper) *webserver.Config {
	return webserver.NewViperConfig(v, "web")
}

func setupWebServer(ctx context.Context, config *webserver.Config, handler *golang.Handler) (ws *webserver.WebServer, err error) {
	ws, err = webserver.NewWebServer(ctx, config)
	if err != nil {
		return nil, err
	}
	ws.InstallWebHandlers(handler)
	return ws, nil
}
