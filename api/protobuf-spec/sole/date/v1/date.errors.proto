syntax = "proto3";

package searking.sole.api.sole.date.v1;

option go_package = "github.com/searKing/sole/api/protobuf-spec/sole/date/v1;v1";

// Proto file describing ad date errors.

// The error reason represented by type and enum.
message ErrorCode {
  // The list of error enums
  oneof error_code {
    DateErrorEnum.DateError date_error = 1;
  }
}

// Container for enum describing possible date errors.
message DateErrorEnum{
  // Enum describing possible date errors.
  enum DateError {
    // The canonical error codes for gRPC APIs.
    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
    // Not an error; returned on success.
    // 无错误。
    OK = 0;
    // The operation was cancelled, typically by the caller.
    // 请求被客户端取消。
    CANCELLED = 1;
    // Unknown error.  For example, this error may be returned when
    // a `Status` value received from another address space belongs to
    // an error space that is not known in this address space.  Also
    // errors raised by APIs that do not return enough error information
    // may be converted to this error.
    // 出现未知的服务器错误。通常是服务器错误。
    UNKNOWN = 2;
    // The client specified an invalid argument.  Note that this differs
    // from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
    // that are problematic regardless of the state of the system
    // (e.g., a malformed file name).
    // 客户端指定了无效参数。如需了解详情，请查看错误消息和错误详细信息。
    INVALID_ARGUMENT = 3;
    // The deadline expired before the operation could complete. For operations
    // that change the state of the system, this error may be returned
    // even if the operation has completed successfully.  For example, a
    // successful response from a server could have been delayed long
    // enough for the deadline to expire.
    // 超出请求时限。仅当调用者设置的时限比方法的默认时限短（即请求的时限不足以让服务器处理请求）并且请求未在时限范围内完成时，才会发生这种情况。
    DEADLINE_EXCEEDED = 4;
    // Some requested entity (e.g., file or directory) was not found.
    //
    // Note to server developers: if a request is denied for an entire class
    // of users, such as gradual feature rollout or undocumented allowlist,
    // `NOT_FOUND` may be used. If a request is denied for some users within
    // a class of users, such as user-based access control, `PERMISSION_DENIED`
    // must be used.
    // 未找到指定的资源。
    NOT_FOUND = 5;
    // The entity that a client attempted to create (e.g., file or directory)
    // already exists.
    // 客户端尝试创建的资源已存在。
    ALREADY_EXISTS = 6;
    // The caller does not have permission to execute the specified
    // operation. `PERMISSION_DENIED` must not be used for rejections
    // caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
    // instead for those errors). `PERMISSION_DENIED` must not be
    // used if the caller can not be identified (use `UNAUTHENTICATED`
    // instead for those errors). This error code does not imply the
    // request is valid or the requested entity exists or satisfies
    // other pre-conditions.
    // 客户端权限不足。这可能是因为 OAuth 令牌没有正确的范围、客户端没有权限或者 API 尚未启用。
    PERMISSION_DENIED = 7;
    // The request does not have valid authentication credentials for the
    // operation.
    // 由于 OAuth 令牌丢失、无效或过期，请求未通过身份验证。
    UNAUTHENTICATED = 16;
    // Some resource has been exhausted, perhaps a per-user quota, or
    // perhaps the entire file system is out of space.
    // 资源配额不足或达到速率限制。如需了解详情，请查看错误消息和错误详细信息。
    RESOURCE_EXHAUSTED = 8;
    // The operation was rejected because the system is not in a state
    // required for the operation's execution.  For example, the directory
    // to be deleted is non-empty, an rmdir operation is applied to
    // a non-directory, etc.
    //
    // Service implementors can use the following guidelines to decide
    // between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
    //  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
    //  (b) Use `ABORTED` if the client should retry at a higher level. For
    //      example, when a client-specified test-and-set fails, indicating the
    //      client should restart a read-modify-write sequence.
    //  (c) Use `FAILED_PRECONDITION` if the client should not retry until
    //      the system state has been explicitly fixed. For example, if an "rmdir"
    //      fails because the directory is non-empty, `FAILED_PRECONDITION`
    //      should be returned since the client should not retry unless
    //      the files are deleted from the directory.
    // 请求无法在当前系统状态下执行，例如删除非空目录。
    FAILED_PRECONDITION = 9;
    // The operation was aborted, typically due to a concurrency issue such as
    // a sequencer check failure or transaction abort.
    //
    // See the guidelines above for deciding between `FAILED_PRECONDITION`,
    // `ABORTED`, and `UNAVAILABLE`.
    // 并发冲突，例如读取/修改/写入冲突
    ABORTED = 10;
    // The operation was attempted past the valid range.  E.g., seeking or
    // reading past end-of-file.
    //
    // Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
    // be fixed if the system state changes. For example, a 32-bit file
    // system will generate `INVALID_ARGUMENT` if asked to read at an
    // offset that is not in the range [0,2^32-1], but it will generate
    // `OUT_OF_RANGE` if asked to read from an offset past the current
    // file size.
    //
    // There is a fair bit of overlap between `FAILED_PRECONDITION` and
    // `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
    // error) when it applies so that callers who are iterating through
    // a space can easily look for an `OUT_OF_RANGE` error to detect when
    // they are done.
    // 客户端指定了无效范围
    OUT_OF_RANGE = 11;
    // The operation is not implemented or is not supported/enabled in this
    // service.
    // API 方法未通过服务器实现
    UNIMPLEMENTED = 12;
    // Internal errors.  This means that some invariants expected by the
    // underlying system have been broken.  This error code is reserved
    // for serious errors.
    // 出现内部服务器错误。通常是服务器错误
    INTERNAL = 13;
    // The service is currently unavailable.  This is most likely a
    // transient condition, which can be corrected by retrying with
    // a backoff. Note that it is not always safe to retry
    // non-idempotent operations.
    //
    // See the guidelines above for deciding between `FAILED_PRECONDITION`,
    // `ABORTED`, and `UNAVAILABLE`.
    // 服务不可用。通常是服务器已关闭
    UNAVAILABLE = 14;
    // Unrecoverable data loss or corruption.
    // 出现不可恢复的数据丢失或数据损坏。客户端应该向用户报告错误
    DATA_LOSS = 15;
    // Reserved for gRPC
    // 以上为gRPC保留错误码
    // ...
  }
}
