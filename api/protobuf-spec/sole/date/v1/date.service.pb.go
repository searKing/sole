// Code generated by protoc-gen-go-tag. DO NOT EDIT.
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: sole/date/v1/date.service.proto

// Date Query API

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/searKing/golang/tools/protoc-gen-go-tag/tag"
	_ "github.com/searKing/sole/api/protobuf-spec/sole/types/v1"
	errors "github.com/searKing/sole/api/protobuf-spec/sole/types/v1/errors"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=RequestId,proto3" json:"request_id,omitempty" validate:"required"`
}

func (x *DateRequest) Reset() {
	*x = DateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sole_date_v1_date_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRequest) ProtoMessage() {}

func (x *DateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sole_date_v1_date_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRequest.ProtoReflect.Descriptor instead.
func (*DateRequest) Descriptor() ([]byte, []int) {
	return file_sole_date_v1_date_service_proto_rawDescGZIP(), []int{0}
}

func (x *DateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string               `protobuf:"bytes,1,opt,name=request_id,proto3" json:"request_id,omitempty"`
	Date      string               `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Error     *errors.Error_Status `protobuf:"bytes,1000,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DateResponse) Reset() {
	*x = DateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sole_date_v1_date_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateResponse) ProtoMessage() {}

func (x *DateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sole_date_v1_date_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateResponse.ProtoReflect.Descriptor instead.
func (*DateResponse) Descriptor() ([]byte, []int) {
	return file_sole_date_v1_date_service_proto_rawDescGZIP(), []int{1}
}

func (x *DateResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DateResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateResponse) GetError() *errors.Error_Status {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_sole_date_v1_date_service_proto protoreflect.FileDescriptor

var file_sole_date_v1_date_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x74,
	0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xc2, 0xde, 0x1f, 0x15, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x0c, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xba,
	0x06, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89,
	0x03, 0x0a, 0x03, 0x4e, 0x6f, 0x77, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa6, 0x02, 0x92, 0x41, 0xe2, 0x01, 0x0a, 0x0c, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x1a, 0xbd, 0x01, 0x2b, 0x20, 0xe6, 0x9c, 0xac, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xac, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x8a, 0xef,
	0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0xaa, 0xe9, 0x92, 0x88,
	0xe5, 0xaf, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7,
	0x9a, 0x84, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc,
	0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb4,
	0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0xe3, 0x80, 0x82, 0x0a, 0x32, 0x00, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x2f, 0x2a, 0x2a,
	0x5a, 0x0b, 0x12, 0x09, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x5a, 0x0e, 0x3a,
	0x01, 0x2a, 0x22, 0x09, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x12, 0x0b, 0x2f,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x2a, 0x70, 0x61, 0x74, 0x68, 0x12, 0x9e, 0x03, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb9, 0x02, 0x92, 0x41, 0xe9, 0x01, 0x0a, 0x13, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x2d, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x1a, 0xbd, 0x01, 0x2b, 0x20,
	0xe6, 0x9c, 0xac, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89,
	0x8d, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe6, 0x9c, 0xac, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5,
	0x9c, 0xa8, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9,
	0x8b, 0xe4, 0xb8, 0x8a, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe5,
	0x8f, 0xaa, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x8d, 0xe5,
	0xba, 0x94, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe3, 0x80, 0x82, 0x0a, 0x32, 0x00, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2f, 0x2a, 0x2a, 0x5a, 0x0d, 0x12, 0x0b, 0x2f, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5a, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x2a, 0x70, 0x61, 0x74, 0x68, 0x42, 0x3c, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sole_date_v1_date_service_proto_rawDescOnce sync.Once
	file_sole_date_v1_date_service_proto_rawDescData = file_sole_date_v1_date_service_proto_rawDesc
)

func file_sole_date_v1_date_service_proto_rawDescGZIP() []byte {
	file_sole_date_v1_date_service_proto_rawDescOnce.Do(func() {
		file_sole_date_v1_date_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_sole_date_v1_date_service_proto_rawDescData)
	})
	return file_sole_date_v1_date_service_proto_rawDescData
}

var file_sole_date_v1_date_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sole_date_v1_date_service_proto_goTypes = []interface{}{
	(*DateRequest)(nil),         // 0: searking.sole.api.sole.date.v1.DateRequest
	(*DateResponse)(nil),        // 1: searking.sole.api.sole.date.v1.DateResponse
	(*errors.Error_Status)(nil), // 2: searking.sole.api.sole.types.v1.errors.Error.Status
}
var file_sole_date_v1_date_service_proto_depIdxs = []int32{
	2, // 0: searking.sole.api.sole.date.v1.DateResponse.error:type_name -> searking.sole.api.sole.types.v1.errors.Error.Status
	0, // 1: searking.sole.api.sole.date.v1.DateService.Now:input_type -> searking.sole.api.sole.date.v1.DateRequest
	0, // 2: searking.sole.api.sole.date.v1.DateService.Error:input_type -> searking.sole.api.sole.date.v1.DateRequest
	1, // 3: searking.sole.api.sole.date.v1.DateService.Now:output_type -> searking.sole.api.sole.date.v1.DateResponse
	1, // 4: searking.sole.api.sole.date.v1.DateService.Error:output_type -> searking.sole.api.sole.date.v1.DateResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sole_date_v1_date_service_proto_init() }
func file_sole_date_v1_date_service_proto_init() {
	if File_sole_date_v1_date_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sole_date_v1_date_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sole_date_v1_date_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sole_date_v1_date_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sole_date_v1_date_service_proto_goTypes,
		DependencyIndexes: file_sole_date_v1_date_service_proto_depIdxs,
		MessageInfos:      file_sole_date_v1_date_service_proto_msgTypes,
	}.Build()
	File_sole_date_v1_date_service_proto = out.File
	file_sole_date_v1_date_service_proto_rawDesc = nil
	file_sole_date_v1_date_service_proto_goTypes = nil
	file_sole_date_v1_date_service_proto_depIdxs = nil
}
