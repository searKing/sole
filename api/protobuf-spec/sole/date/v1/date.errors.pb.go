// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: sole/date/v1/date.errors.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible date errors.
type DateErrorEnum_DateError int32

const (
	// The canonical error codes for gRPC APIs.
	// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
	// Not an error; returned on success.
	// 无错误。
	DateErrorEnum_OK DateErrorEnum_DateError = 0
	// The operation was cancelled, typically by the caller.
	// 请求被客户端取消。
	DateErrorEnum_CANCELLED DateErrorEnum_DateError = 1
	// Unknown error.  For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space.  Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	// 出现未知的服务器错误。通常是服务器错误。
	DateErrorEnum_UNKNOWN DateErrorEnum_DateError = 2
	// The client specified an invalid argument.  Note that this differs
	// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	// 客户端指定了无效参数。如需了解详情，请查看错误消息和错误详细信息。
	DateErrorEnum_INVALID_ARGUMENT DateErrorEnum_DateError = 3
	// The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully.  For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	// 超出请求时限。仅当调用者设置的时限比方法的默认时限短（即请求的时限不足以让服务器处理请求）并且请求未在时限范围内完成时，才会发生这种情况。
	DateErrorEnum_DEADLINE_EXCEEDED DateErrorEnum_DateError = 4
	// Some requested entity (e.g., file or directory) was not found.
	//
	// Note to server developers: if a request is denied for an entire class
	// of users, such as gradual feature rollout or undocumented allowlist,
	// `NOT_FOUND` may be used. If a request is denied for some users within
	// a class of users, such as user-based access control, `PERMISSION_DENIED`
	// must be used.
	// 未找到指定的资源。
	DateErrorEnum_NOT_FOUND DateErrorEnum_DateError = 5
	// The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	// 客户端尝试创建的资源已存在。
	DateErrorEnum_ALREADY_EXISTS DateErrorEnum_DateError = 6
	// The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors). This error code does not imply the
	// request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	// 客户端权限不足。这可能是因为 OAuth 令牌没有正确的范围、客户端没有权限或者 API 尚未启用。
	DateErrorEnum_PERMISSION_DENIED DateErrorEnum_DateError = 7
	// The request does not have valid authentication credentials for the
	// operation.
	// 由于 OAuth 令牌丢失、无效或过期，请求未通过身份验证。
	DateErrorEnum_UNAUTHENTICATED DateErrorEnum_DateError = 16
	// Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	// 资源配额不足或达到速率限制。如需了解详情，请查看错误消息和错误详细信息。
	DateErrorEnum_RESOURCE_EXHAUSTED DateErrorEnum_DateError = 8
	// The operation was rejected because the system is not in a state
	// required for the operation's execution.  For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//
	//	(a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//	(b) Use `ABORTED` if the client should retry at a higher level. For
	//	    example, when a client-specified test-and-set fails, indicating the
	//	    client should restart a read-modify-write sequence.
	//	(c) Use `FAILED_PRECONDITION` if the client should not retry until
	//	    the system state has been explicitly fixed. For example, if an "rmdir"
	//	    fails because the directory is non-empty, `FAILED_PRECONDITION`
	//	    should be returned since the client should not retry unless
	//	    the files are deleted from the directory.
	//
	// 请求无法在当前系统状态下执行，例如删除非空目录。
	DateErrorEnum_FAILED_PRECONDITION DateErrorEnum_DateError = 9
	// The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	// 并发冲突，例如读取/修改/写入冲突
	DateErrorEnum_ABORTED DateErrorEnum_DateError = 10
	// The operation was attempted past the valid range.  E.g., seeking or
	// reading past end-of-file.
	//
	// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate `INVALID_ARGUMENT` if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// `OUT_OF_RANGE` if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between `FAILED_PRECONDITION` and
	// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an `OUT_OF_RANGE` error to detect when
	// they are done.
	// 客户端指定了无效范围
	DateErrorEnum_OUT_OF_RANGE DateErrorEnum_DateError = 11
	// The operation is not implemented or is not supported/enabled in this
	// service.
	// API 方法未通过服务器实现
	DateErrorEnum_UNIMPLEMENTED DateErrorEnum_DateError = 12
	// Internal errors.  This means that some invariants expected by the
	// underlying system have been broken.  This error code is reserved
	// for serious errors.
	// 出现内部服务器错误。通常是服务器错误
	DateErrorEnum_INTERNAL DateErrorEnum_DateError = 13
	// The service is currently unavailable.  This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	// 服务不可用。通常是服务器已关闭
	DateErrorEnum_UNAVAILABLE DateErrorEnum_DateError = 14
	// Unrecoverable data loss or corruption.
	// 出现不可恢复的数据丢失或数据损坏。客户端应该向用户报告错误
	DateErrorEnum_DATA_LOSS DateErrorEnum_DateError = 15
)

// Enum value maps for DateErrorEnum_DateError.
var (
	DateErrorEnum_DateError_name = map[int32]string{
		0:  "OK",
		1:  "CANCELLED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		16: "UNAUTHENTICATED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
	}
	DateErrorEnum_DateError_value = map[string]int32{
		"OK":                  0,
		"CANCELLED":           1,
		"UNKNOWN":             2,
		"INVALID_ARGUMENT":    3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"UNAUTHENTICATED":     16,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATA_LOSS":           15,
	}
)

func (x DateErrorEnum_DateError) Enum() *DateErrorEnum_DateError {
	p := new(DateErrorEnum_DateError)
	*p = x
	return p
}

func (x DateErrorEnum_DateError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateErrorEnum_DateError) Descriptor() protoreflect.EnumDescriptor {
	return file_sole_date_v1_date_errors_proto_enumTypes[0].Descriptor()
}

func (DateErrorEnum_DateError) Type() protoreflect.EnumType {
	return &file_sole_date_v1_date_errors_proto_enumTypes[0]
}

func (x DateErrorEnum_DateError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateErrorEnum_DateError.Descriptor instead.
func (DateErrorEnum_DateError) EnumDescriptor() ([]byte, []int) {
	return file_sole_date_v1_date_errors_proto_rawDescGZIP(), []int{1, 0}
}

// The error reason represented by type and enum.
type ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of error enums
	//
	// Types that are assignable to ErrorCode:
	//
	//	*ErrorCode_DateError
	ErrorCode isErrorCode_ErrorCode `protobuf_oneof:"error_code"`
}

func (x *ErrorCode) Reset() {
	*x = ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sole_date_v1_date_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCode) ProtoMessage() {}

func (x *ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_sole_date_v1_date_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCode.ProtoReflect.Descriptor instead.
func (*ErrorCode) Descriptor() ([]byte, []int) {
	return file_sole_date_v1_date_errors_proto_rawDescGZIP(), []int{0}
}

func (m *ErrorCode) GetErrorCode() isErrorCode_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return nil
}

func (x *ErrorCode) GetDateError() DateErrorEnum_DateError {
	if x, ok := x.GetErrorCode().(*ErrorCode_DateError); ok {
		return x.DateError
	}
	return DateErrorEnum_OK
}

type isErrorCode_ErrorCode interface {
	isErrorCode_ErrorCode()
}

type ErrorCode_DateError struct {
	DateError DateErrorEnum_DateError `protobuf:"varint,1,opt,name=date_error,json=dateError,proto3,enum=searking.sole.api.sole.date.v1.DateErrorEnum_DateError,oneof"`
}

func (*ErrorCode_DateError) isErrorCode_ErrorCode() {}

// Container for enum describing possible date errors.
type DateErrorEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DateErrorEnum) Reset() {
	*x = DateErrorEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sole_date_v1_date_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateErrorEnum) ProtoMessage() {}

func (x *DateErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_sole_date_v1_date_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateErrorEnum.ProtoReflect.Descriptor instead.
func (*DateErrorEnum) Descriptor() ([]byte, []int) {
	return file_sole_date_v1_date_errors_proto_rawDescGZIP(), []int{1}
}

var File_sole_date_v1_date_errors_proto protoreflect.FileDescriptor

var file_sole_date_v1_date_errors_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x22, 0x73, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0xbc, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sole_date_v1_date_errors_proto_rawDescOnce sync.Once
	file_sole_date_v1_date_errors_proto_rawDescData = file_sole_date_v1_date_errors_proto_rawDesc
)

func file_sole_date_v1_date_errors_proto_rawDescGZIP() []byte {
	file_sole_date_v1_date_errors_proto_rawDescOnce.Do(func() {
		file_sole_date_v1_date_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_sole_date_v1_date_errors_proto_rawDescData)
	})
	return file_sole_date_v1_date_errors_proto_rawDescData
}

var file_sole_date_v1_date_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sole_date_v1_date_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sole_date_v1_date_errors_proto_goTypes = []interface{}{
	(DateErrorEnum_DateError)(0), // 0: searking.sole.api.sole.date.v1.DateErrorEnum.DateError
	(*ErrorCode)(nil),            // 1: searking.sole.api.sole.date.v1.ErrorCode
	(*DateErrorEnum)(nil),        // 2: searking.sole.api.sole.date.v1.DateErrorEnum
}
var file_sole_date_v1_date_errors_proto_depIdxs = []int32{
	0, // 0: searking.sole.api.sole.date.v1.ErrorCode.date_error:type_name -> searking.sole.api.sole.date.v1.DateErrorEnum.DateError
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sole_date_v1_date_errors_proto_init() }
func file_sole_date_v1_date_errors_proto_init() {
	if File_sole_date_v1_date_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sole_date_v1_date_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sole_date_v1_date_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateErrorEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sole_date_v1_date_errors_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ErrorCode_DateError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sole_date_v1_date_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sole_date_v1_date_errors_proto_goTypes,
		DependencyIndexes: file_sole_date_v1_date_errors_proto_depIdxs,
		EnumInfos:         file_sole_date_v1_date_errors_proto_enumTypes,
		MessageInfos:      file_sole_date_v1_date_errors_proto_msgTypes,
	}.Build()
	File_sole_date_v1_date_errors_proto = out.File
	file_sole_date_v1_date_errors_proto_rawDesc = nil
	file_sole_date_v1_date_errors_proto_goTypes = nil
	file_sole_date_v1_date_errors_proto_depIdxs = nil
}
