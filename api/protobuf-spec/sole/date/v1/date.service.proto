syntax = "proto3";

// Date Query API
package searking.sole.api.sole.date.v1;

import "google/api/annotations.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";
import "github.com/searKing/golang/tools/protoc-gen-go-tag/tag/tag.proto";

import "sole/types/v1/types.proto";

option go_package = "github.com/searKing/sole/api/protobuf-spec/sole/date/v1;v1";

// Date Service
service DateService {
  // Date Query
  rpc Now (DateRequest) returns (DateResponse) {
    option (google.api.http) = {
      get: "/date/*path" // just for gin, ignore this path for grpc_gateway
      additional_bindings {
        get: '/date/now/**' // just for grpc_gateway, ignore this path gin or yapi
      }
      additional_bindings {
        get: '/date/now' // just for yapi, ignore this path gin
      }
      additional_bindings {
        post: '/date/now' // just for grpc_gateway, ignore this path gin or yapi
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "日期查询"
      consumes:""
      produces:"application/json"
      description:"+ 本接口返回服务节点当前日期\n"
          "+ 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的日期。\n"
    };
  };

  // Date Query, only return error, for test only
  rpc Error (DateRequest) returns (DateResponse) {
    option (google.api.http) = {
      get: "/date/error/*path" // just for gin, ignore this path for grpc_gateway
      additional_bindings {
        get: '/date/error/**' // just for grpc_gateway, ignore this path gin or yapi
      }
      additional_bindings {
        get: '/date/error' // just for yapi, ignore this path gin
      }
      additional_bindings {
        post: '/date/error' // just for grpc_gateway, ignore this path gin or yapi
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "日期查询-错误"
      consumes:""
      produces:"application/json"
      description:"+ 本接口返回服务节点当前错误\n"
          "+ 如果本服务运行在多个节点之上，此接口返回的日期只针对当前访问的服务节点，并不反应整个集群的错误。\n"
    };
  };
}


message DateRequest {
  string request_id = 1[json_name = "RequestId", (google.protobuf.field_tag) = {struct_tag: 'validate:"required"'}];
}

message DateResponse {
  string request_id = 1 [json_name = "request_id"];
  string date = 2 [json_name = "date"];

  types.v1.errors.Error.Status error = 1000[json_name = "error"];
}
