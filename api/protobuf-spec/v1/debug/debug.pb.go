// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug.proto

// 健康监测服务 API

package debug

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("debug.proto", fileDescriptor_8d9d361be58531fb)
}

var fileDescriptor_8d9d361be58531fb = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x93, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x6b, 0xa0, 0x05, 0xd7, 0x08, 0x1a, 0xc4, 0x43, 0xf4, 0x10, 0x7a, 0x2d, 0xbb, 0x43,
	0xe3, 0xc9, 0x14, 0x0f, 0x2d, 0x16, 0x04, 0x2f, 0x81, 0x82, 0x07, 0x6f, 0x93, 0xcd, 0x64, 0xb2,
	0x36, 0xd9, 0x19, 0x66, 0x27, 0xff, 0x6e, 0x69, 0x0c, 0xa2, 0x31, 0x31, 0x25, 0x56, 0x84, 0x34,
	0x2d, 0x44, 0x63, 0x95, 0xa0, 0xed, 0xc5, 0x96, 0xa4, 0xb4, 0xe6, 0xec, 0xcd, 0xb3, 0x47, 0xdd,
	0xd9, 0x6c, 0x4e, 0xfd, 0x0a, 0xb2, 0xbb, 0x49, 0x89, 0x7a, 0xf2, 0xea, 0x65, 0x99, 0x9d, 0xf7,
	0x37, 0xcf, 0xec, 0xfb, 0xbc, 0xfb, 0x48, 0x97, 0xe2, 0x28, 0x96, 0xc1, 0x0a, 0x65, 0x84, 0x93,
	0xc0, 0x55, 0x83, 0xa4, 0x90, 0x02, 0xa9, 0xa6, 0x64, 0x17, 0x15, 0xb7, 0x10, 0xbc, 0x81, 0x09,
	0xc1, 0x29, 0x04, 0x5c, 0x20, 0x96, 0x49, 0x00, 0x94, 0xa6, 0xbc, 0xe0, 0xf1, 0xc1, 0xd0, 0x9f,
	0xc5, 0x38, 0x32, 0x54, 0xa6, 0x51, 0x4e, 0xd8, 0x98, 0x88, 0x60, 0x8d, 0x27, 0x33, 0x31, 0x45,
	0x25, 0x69, 0xe0, 0xc1, 0x90, 0x6a, 0xc6, 0xdf, 0x4b, 0x00, 0xa9, 0x06, 0x92, 0x9c, 0xd3, 0x18,
	0x89, 0x4f, 0xd4, 0xd7, 0xa6, 0xcf, 0x32, 0xaa, 0xca, 0x48, 0x25, 0x46, 0xc1, 0xe0, 0x68, 0xfc,
	0x8a, 0x21, 0x47, 0x39, 0x58, 0xf0, 0x6e, 0x57, 0x65, 0x8c, 0x74, 0xd9, 0xc8, 0x41, 0x8c, 0x11,
	0x03, 0x84, 0x72, 0x8d, 0xe8, 0x06, 0x80, 0xba, 0x4e, 0x38, 0x74, 0xd7, 0x9e, 0x68, 0xf8, 0xdb,
	0xac, 0xe4, 0xbf, 0xeb, 0x74, 0xb6, 0x86, 0x58, 0x56, 0x53, 0x51, 0xe0, 0x87, 0x4f, 0x9a, 0x8d,
	0x46, 0x19, 0x49, 0x04, 0xae, 0x2b, 0xde, 0xb7, 0x28, 0x93, 0x76, 0x94, 0x55, 0xa7, 0xd7, 0xe0,
	0xb5, 0xc9, 0xbe, 0x63, 0xcc, 0x3d, 0xce, 0xe9, 0x0a, 0x89, 0x17, 0xe6, 0xbb, 0xbe, 0xc6, 0xf2,
	0x9e, 0x4f, 0xf2, 0x5b, 0xad, 0x9a, 0xa8, 0xb4, 0xad, 0xe2, 0x7b, 0xfb, 0xf1, 0x69, 0xf0, 0xeb,
	0x85, 0x85, 0x90, 0xd5, 0xfa, 0x68, 0xbd, 0x78, 0x27, 0xea, 0x6f, 0xed, 0xc1, 0x96, 0xd8, 0xde,
	0xf5, 0xea, 0x76, 0xa5, 0x34, 0x2c, 0xf5, 0xed, 0xc3, 0xb2, 0x75, 0xbc, 0x69, 0x0e, 0xda, 0xd6,
	0xc6, 0x81, 0xb4, 0x10, 0x12, 0x7b, 0x25, 0x6b, 0xb7, 0xe5, 0xf0, 0x1e, 0x33, 0xd8, 0xb4, 0xdb,
	0x55, 0xd1, 0xfa, 0x20, 0x3a, 0x4d, 0xb3, 0xd7, 0xf5, 0x8e, 0x98, 0xfd, 0xe7, 0x66, 0xaf, 0x72,
	0x76, 0x52, 0xb5, 0x3e, 0x75, 0xa6, 0x65, 0x87, 0xcd, 0xb2, 0xa7, 0x36, 0x6a, 0x1f, 0x8e, 0x76,
	0xde, 0x88, 0x7a, 0x77, 0xd4, 0x78, 0x2a, 0x0e, 0xfa, 0xe2, 0xf4, 0xa5, 0x78, 0x56, 0xb3, 0xf7,
	0x07, 0xa3, 0xd7, 0xfb, 0xc3, 0x66, 0x79, 0xfa, 0xf6, 0xb3, 0x93, 0xaa, 0xe8, 0x1f, 0x99, 0xbd,
	0x9a, 0xa8, 0xd7, 0xc4, 0xf1, 0x96, 0xf5, 0xea, 0xb3, 0xd9, 0xeb, 0x8e, 0xb6, 0x9f, 0x0c, 0xbf,
	0x74, 0xce, 0xd5, 0x86, 0x95, 0x23, 0xab, 0xb8, 0xf1, 0xb3, 0x58, 0x92, 0xe6, 0xef, 0x48, 0x7e,
	0x4c, 0x52, 0x50, 0xc7, 0x21, 0x4a, 0x1d, 0x7b, 0x64, 0x67, 0x3c, 0x46, 0x04, 0x80, 0xdf, 0x46,
	0xea, 0x00, 0x00, 0x13, 0x90, 0xd3, 0xd6, 0x35, 0x10, 0x45, 0x2c, 0x41, 0x58, 0x1a, 0xea, 0x2a,
	0x0a, 0xcf, 0x44, 0x2e, 0x72, 0x94, 0xe7, 0x20, 0xc9, 0xd3, 0xa9, 0xc0, 0x77, 0x9f, 0x34, 0xb7,
	0x9a, 0xa7, 0x0f, 0x20, 0xfb, 0x47, 0x97, 0xdb, 0xbe, 0xc6, 0xf2, 0xce, 0xff, 0xec, 0xb2, 0x2c,
	0x5d, 0x1e, 0xbb, 0x8c, 0xf2, 0x34, 0x0b, 0x59, 0xe0, 0xa6, 0x63, 0xb3, 0xe3, 0xb2, 0xbb, 0xab,
	0x10, 0x86, 0x01, 0x5d, 0xc7, 0xc0, 0xab, 0x86, 0x67, 0x22, 0x57, 0x20, 0xa5, 0x29, 0x4d, 0x75,
	0x7f, 0x6a, 0xf0, 0xc8, 0x20, 0xfa, 0xca, 0xd2, 0xc3, 0xdb, 0x53, 0x23, 0x31, 0x10, 0x64, 0xf7,
	0x35, 0x1d, 0x03, 0x27, 0xcb, 0xe7, 0xc9, 0x94, 0x0d, 0x8a, 0x54, 0x37, 0x64, 0xd9, 0x45, 0xe0,
	0x26, 0x7b, 0xc9, 0x7d, 0xc6, 0xe6, 0x5c, 0xe2, 0xd6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95,
	0x80, 0x0c, 0x1c, 0x08, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugServiceClient interface {
	// golang 性能监控
	PProf(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// golang 变量监控
	ExpVar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type debugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugServiceClient(cc grpc.ClientConnInterface) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) PProf(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.debug.DebugService/PProf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) ExpVar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.debug.DebugService/ExpVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
type DebugServiceServer interface {
	// golang 性能监控
	PProf(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
	// golang 变量监控
	ExpVar(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
}

// UnimplementedDebugServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServiceServer struct {
}

func (*UnimplementedDebugServiceServer) PProf(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PProf not implemented")
}
func (*UnimplementedDebugServiceServer) ExpVar(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpVar not implemented")
}

func RegisterDebugServiceServer(s *grpc.Server, srv DebugServiceServer) {
	s.RegisterService(&_DebugService_serviceDesc, srv)
}

func _DebugService_PProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).PProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.debug.DebugService/PProf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).PProf(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_ExpVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).ExpVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.debug.DebugService/ExpVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).ExpVar(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sole.api.v1.debug.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PProf",
			Handler:    _DebugService_PProf_Handler,
		},
		{
			MethodName: "ExpVar",
			Handler:    _DebugService_ExpVar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}
