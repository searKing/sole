// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package webapp

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebAppServiceClient is the client API for WebAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebAppServiceClient interface {
	// 静态文件下载
	File(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Proxy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type webAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAppServiceClient(cc grpc.ClientConnInterface) WebAppServiceClient {
	return &webAppServiceClient{cc}
}

func (c *webAppServiceClient) File(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.webapp.WebAppService/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) Proxy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.webapp.WebAppService/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAppServiceServer is the server API for WebAppService service.
// All implementations must embed UnimplementedWebAppServiceServer
// for forward compatibility
type WebAppServiceServer interface {
	// 静态文件下载
	File(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	Proxy(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedWebAppServiceServer()
}

// UnimplementedWebAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebAppServiceServer struct {
}

func (UnimplementedWebAppServiceServer) File(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedWebAppServiceServer) Proxy(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedWebAppServiceServer) mustEmbedUnimplementedWebAppServiceServer() {}

// UnsafeWebAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebAppServiceServer will
// result in compilation errors.
type UnsafeWebAppServiceServer interface {
	mustEmbedUnimplementedWebAppServiceServer()
}

func RegisterWebAppServiceServer(s grpc.ServiceRegistrar, srv WebAppServiceServer) {
	s.RegisterService(&WebAppService_ServiceDesc, srv)
}

func _WebAppService_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.webapp.WebAppService/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).File(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.webapp.WebAppService/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).Proxy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WebAppService_ServiceDesc is the grpc.ServiceDesc for WebAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sole.api.v1.webapp.WebAppService",
	HandlerType: (*WebAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "File",
			Handler:    _WebAppService_File_Handler,
		},
		{
			MethodName: "Proxy",
			Handler:    _WebAppService_Proxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webapp.proto",
}
