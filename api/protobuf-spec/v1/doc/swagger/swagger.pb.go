// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: swagger.proto

// Swagger服务 API

package swagger

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("swagger.proto", fileDescriptor_49635b75e059a131)
}

var fileDescriptor_49635b75e059a131 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x4f, 0x13, 0x5b,
	0x14, 0xc7, 0x5f, 0x0a, 0x79, 0xc9, 0x9b, 0xbc, 0xf7, 0xf2, 0xd2, 0x67, 0x34, 0xa9, 0x9b, 0xca,
	0x16, 0x99, 0x09, 0x10, 0x37, 0xb8, 0x82, 0xc4, 0x04, 0x75, 0x63, 0x02, 0x2e, 0x74, 0x37, 0x9d,
	0x8e, 0xc3, 0x98, 0xb6, 0x77, 0xd2, 0xb9, 0x80, 0xdd, 0xb5, 0x4d, 0x11, 0x28, 0xad, 0xd3, 0x20,
	0x56, 0x69, 0x0b, 0x52, 0x5a, 0x90, 0xf0, 0xab, 0x18, 0x6d, 0x6d, 0x4b, 0xa5, 0xd1, 0xc4, 0xbf,
	0xc4, 0xb9, 0x77, 0x66, 0x56, 0xdd, 0xba, 0x60, 0x61, 0xa6, 0x77, 0xaa, 0x23, 0x2e, 0x54, 0xd8,
	0xba, 0xea, 0xed, 0x3d, 0xdf, 0xf3, 0xbd, 0xe7, 0x7c, 0xee, 0xe9, 0x2d, 0xf5, 0x8f, 0x3c, 0xcd,
	0x0a, 0x02, 0x1f, 0xa4, 0xa5, 0x20, 0x80, 0xc0, 0x79, 0x41, 0x06, 0x3e, 0x9e, 0x66, 0x25, 0x91,
	0x9e, 0xea, 0xa7, 0xbd, 0x80, 0xa3, 0xad, 0xb0, 0xeb, 0xa2, 0x00, 0x80, 0xe0, 0xe3, 0x99, 0xb6,
	0xcc, 0x33, 0x79, 0x8f, 0xe1, 0xfd, 0x12, 0x0c, 0x91, 0x2c, 0x97, 0xfb, 0x64, 0xd0, 0xcb, 0xcb,
	0x5c, 0x50, 0x94, 0x20, 0xb0, 0x7c, 0x5d, 0x43, 0x82, 0x08, 0x27, 0x26, 0x3d, 0x34, 0x07, 0xfc,
	0x0c, 0x11, 0xb3, 0x92, 0x28, 0x7f, 0xbf, 0x64, 0x58, 0x49, 0x64, 0x26, 0x20, 0x94, 0x3c, 0xc0,
	0xdb, 0x71, 0x1f, 0xb3, 0xe7, 0x06, 0x25, 0xae, 0x8f, 0xe7, 0x80, 0x1c, 0x92, 0x21, 0x6f, 0x7d,
	0x15, 0x58, 0xc8, 0x4f, 0xb3, 0x21, 0x72, 0x3a, 0xd7, 0x27, 0xf0, 0x81, 0x3e, 0xab, 0x6a, 0x06,
	0x48, 0x50, 0x04, 0x01, 0x99, 0x61, 0x03, 0x01, 0x00, 0xd9, 0xf6, 0x9a, 0x98, 0x0e, 0xbc, 0xa7,
	0xa8, 0x7f, 0xc7, 0x88, 0x6a, 0x8c, 0x0f, 0x4e, 0x89, 0x1c, 0xef, 0x3c, 0x76, 0x50, 0xdd, 0x37,
	0x64, 0x10, 0x70, 0x9e, 0xa7, 0x49, 0x31, 0x74, 0xa7, 0x1f, 0xfa, 0x9a, 0xd9, 0xac, 0xeb, 0x5c,
	0x67, 0xdf, 0xe4, 0x33, 0x0a, 0xa1, 0x34, 0x02, 0xbc, 0xa1, 0x9e, 0x0f, 0x8e, 0xc5, 0xe1, 0x77,
	0x0e, 0xea, 0x6f, 0x9c, 0x9e, 0xc5, 0xf9, 0x02, 0xce, 0x25, 0x51, 0x3c, 0xef, 0x0a, 0x3b, 0x7a,
	0xdd, 0x38, 0xb7, 0x8b, 0x1f, 0x6d, 0x20, 0xa5, 0xa0, 0x37, 0x97, 0x50, 0x76, 0x95, 0x44, 0xf4,
	0x78, 0x54, 0x8b, 0xd6, 0xf4, 0x72, 0x0c, 0xd7, 0x53, 0x6a, 0x33, 0x8f, 0x23, 0x25, 0xaa, 0xd7,
	0x8d, 0x36, 0xa3, 0x78, 0x35, 0x67, 0xea, 0x89, 0xa6, 0x99, 0xd2, 0xf3, 0x09, 0x94, 0xdb, 0x42,
	0xc5, 0x8c, 0x5a, 0xdd, 0x26, 0x29, 0x6a, 0x6d, 0x41, 0xad, 0xc6, 0x5b, 0x8d, 0x04, 0xde, 0x2b,
	0xda, 0x6d, 0xb5, 0x4c, 0x8c, 0xb8, 0x19, 0xf9, 0xb2, 0xb1, 0xb2, 0x8e, 0x94, 0x6d, 0x63, 0x71,
	0x0e, 0x95, 0x6a, 0xe8, 0xed, 0x63, 0x34, 0x9f, 0xd4, 0xf7, 0x9b, 0xc6, 0xd3, 0x7d, 0x2d, 0x13,
	0xb3, 0x9f, 0xde, 0x6a, 0x24, 0x50, 0xad, 0xa2, 0x56, 0x93, 0x48, 0x49, 0xa2, 0xfa, 0x12, 0x7e,
	0xf2, 0x5a, 0xad, 0x6e, 0x1b, 0xd9, 0x87, 0xda, 0x51, 0xf1, 0x8b, 0x9b, 0x16, 0xaf, 0xe0, 0x70,
	0xe4, 0x63, 0x38, 0x4a, 0xd9, 0x1a, 0xc1, 0x4a, 0x4a, 0x3d, 0xca, 0x5a, 0xd8, 0xac, 0x7e, 0x15,
	0x45, 0x6f, 0x1e, 0xe0, 0xf4, 0xac, 0x7a, 0x58, 0x69, 0x35, 0x12, 0xf7, 0x65, 0x10, 0xc0, 0x6b,
	0x0d, 0xd4, 0x50, 0x7a, 0x2e, 0x51, 0x94, 0x75, 0x0d, 0x6e, 0x11, 0x38, 0xff, 0x37, 0x2f, 0x55,
	0x1e, 0x62, 0x98, 0xce, 0xbc, 0x89, 0x80, 0x19, 0xf8, 0x63, 0xe8, 0x2f, 0xc8, 0x3f, 0x80, 0xcc,
	0x04, 0xf4, 0xfb, 0xda, 0xf8, 0xef, 0xb0, 0x7e, 0xdf, 0x6f, 0xfc, 0xa7, 0xc7, 0x1f, 0x62, 0xfd,
	0xbe, 0x53, 0xe2, 0x7f, 0xd9, 0x4d, 0x39, 0x6e, 0x5f, 0xff, 0x45, 0xf8, 0xc7, 0x5d, 0x8b, 0xc3,
	0x9f, 0xba, 0x4e, 0xc0, 0x3f, 0xe8, 0xb2, 0xd7, 0x5c, 0x08, 0xe3, 0xf2, 0xc2, 0x57, 0xb6, 0x6d,
	0x02, 0xa4, 0x3b, 0x93, 0x43, 0xf2, 0x95, 0x7d, 0x1f, 0x3f, 0x2b, 0xa1, 0xd4, 0x26, 0x52, 0x4a,
	0xda, 0xd2, 0x96, 0x15, 0xed, 0xec, 0xe0, 0xbd, 0x02, 0xaa, 0x56, 0x4d, 0xb0, 0xc5, 0x34, 0xe1,
	0x40, 0x12, 0x5b, 0x8d, 0x2c, 0x4a, 0xcc, 0xe0, 0x85, 0x5d, 0x9c, 0xdb, 0x25, 0x26, 0xa3, 0xe3,
	0xe3, 0xb7, 0xec, 0x17, 0x49, 0x0e, 0x43, 0x4a, 0x1c, 0xcf, 0x87, 0xd5, 0xa3, 0x15, 0xbd, 0x9c,
	0xd6, 0x32, 0x31, 0x34, 0x53, 0x51, 0x0f, 0xd3, 0x44, 0x66, 0x42, 0xb7, 0x29, 0xcf, 0x3e, 0x10,
	0x28, 0xb2, 0x81, 0xea, 0x6f, 0x88, 0x9b, 0xb6, 0x16, 0x39, 0xfb, 0x4c, 0xd8, 0x0d, 0x7f, 0x3c,
	0x13, 0x28, 0xb7, 0xa5, 0xd5, 0x9b, 0xc6, 0x7a, 0x4c, 0x7f, 0x31, 0x67, 0xac, 0x2c, 0x9b, 0x45,
	0xec, 0x2c, 0x6b, 0xd1, 0xda, 0x65, 0xd4, 0xdc, 0x31, 0xc2, 0xcf, 0x49, 0xe0, 0x9b, 0x8c, 0x9f,
	0x1b, 0x96, 0xff, 0x58, 0x49, 0xf2, 0x89, 0x5c, 0xfb, 0x19, 0x65, 0xcc, 0x1f, 0xfa, 0xc8, 0x95,
	0xbb, 0x83, 0xb6, 0xb7, 0x59, 0xe6, 0xd9, 0xe0, 0x4d, 0x31, 0x20, 0x30, 0xe6, 0x7f, 0x48, 0xfb,
	0x21, 0x9f, 0xea, 0x67, 0xbc, 0x80, 0xeb, 0xd8, 0x5c, 0xb5, 0x3e, 0x3d, 0x7f, 0xb6, 0x67, 0x6b,
	0xf0, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x88, 0x43, 0x9c, 0x7c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SwaggerServiceClient is the client API for SwaggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwaggerServiceClient interface {
	// 静态Swagger JSON
	Json(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// 静态Swagger YAML
	Yaml(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// 静态Swagger UI
	UI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type swaggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwaggerServiceClient(cc grpc.ClientConnInterface) SwaggerServiceClient {
	return &swaggerServiceClient{cc}
}

func (c *swaggerServiceClient) Json(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.doc.swagger.SwaggerService/Json", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swaggerServiceClient) Yaml(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.doc.swagger.SwaggerService/Yaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swaggerServiceClient) UI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.doc.swagger.SwaggerService/UI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwaggerServiceServer is the server API for SwaggerService service.
type SwaggerServiceServer interface {
	// 静态Swagger JSON
	Json(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
	// 静态Swagger YAML
	Yaml(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
	// 静态Swagger UI
	UI(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
}

// UnimplementedSwaggerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSwaggerServiceServer struct {
}

func (*UnimplementedSwaggerServiceServer) Json(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Json not implemented")
}
func (*UnimplementedSwaggerServiceServer) Yaml(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Yaml not implemented")
}
func (*UnimplementedSwaggerServiceServer) UI(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UI not implemented")
}

func RegisterSwaggerServiceServer(s *grpc.Server, srv SwaggerServiceServer) {
	s.RegisterService(&_SwaggerService_serviceDesc, srv)
}

func _SwaggerService_Json_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerServiceServer).Json(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.doc.swagger.SwaggerService/Json",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerServiceServer).Json(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerService_Yaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerServiceServer).Yaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.doc.swagger.SwaggerService/Yaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerServiceServer).Yaml(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerService_UI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerServiceServer).UI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.doc.swagger.SwaggerService/UI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerServiceServer).UI(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwaggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sole.api.v1.doc.swagger.SwaggerService",
	HandlerType: (*SwaggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Json",
			Handler:    _SwaggerService_Json_Handler,
		},
		{
			MethodName: "Yaml",
			Handler:    _SwaggerService_Yaml_Handler,
		},
		{
			MethodName: "UI",
			Handler:    _SwaggerService_UI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swagger.proto",
}
