// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: index.proto

// 主页HomePage API

package index

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("index.proto", fileDescriptor_f750e0f7889345b5)
}

var fileDescriptor_f750e0f7889345b5 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x4d, 0x0f, 0x45, 0x57, 0x2f, 0x06, 0xf1, 0x10, 0x2f, 0xc1, 0x6b, 0xc8, 0x0e, 0xad,
	0xb7, 0x7a, 0xb2, 0x20, 0x54, 0xbc, 0x08, 0xbd, 0x79, 0x9b, 0x6c, 0x9e, 0x93, 0x81, 0x64, 0x67,
	0xd8, 0x9d, 0xa6, 0xcd, 0xad, 0x0d, 0x41, 0x34, 0x26, 0xa6, 0xd4, 0x8a, 0x90, 0xc6, 0xca, 0x6a,
	0x14, 0x09, 0xda, 0x7a, 0x30, 0x65, 0x53, 0xab, 0xb9, 0xfa, 0x67, 0x08, 0xee, 0xcc, 0xee, 0x9e,
	0xfa, 0x2f, 0xc8, 0xee, 0x26, 0xb2, 0xe8, 0x65, 0x78, 0x33, 0xef, 0xf3, 0xbe, 0x6f, 0xde, 0x0f,
	0xed, 0x32, 0x35, 0xcb, 0xb0, 0xa5, 0x73, 0x8b, 0x09, 0x96, 0xbd, 0x6a, 0xb3, 0x2a, 0xe8, 0x98,
	0x53, 0xbd, 0xbe, 0xa4, 0xc7, 0x8e, 0xdc, 0x0d, 0xc2, 0x18, 0xa9, 0x02, 0x8a, 0x81, 0xd2, 0xc6,
	0x23, 0x04, 0x35, 0x2e, 0x1a, 0x09, 0x9f, 0xcb, 0xff, 0xeb, 0x2c, 0x83, 0x6d, 0x58, 0x94, 0x0b,
	0x66, 0xcd, 0x88, 0x15, 0x42, 0x45, 0x65, 0xa3, 0xa4, 0x1b, 0xac, 0x86, 0x12, 0x18, 0x73, 0x6a,
	0xff, 0x6f, 0x22, 0xcc, 0x29, 0xaa, 0x08, 0xc1, 0x4b, 0xac, 0x3c, 0x57, 0x5f, 0x4f, 0xc7, 0x5a,
	0xdc, 0x28, 0x82, 0xc1, 0xec, 0x86, 0x2d, 0x60, 0x76, 0x25, 0x58, 0xc0, 0x26, 0x6e, 0x24, 0xd9,
	0x8d, 0x22, 0x01, 0xb3, 0x68, 0x6f, 0x62, 0x42, 0xc0, 0x42, 0x8c, 0x0b, 0xca, 0x4c, 0x1b, 0x61,
	0xd3, 0x64, 0x02, 0xc7, 0x76, 0x22, 0xba, 0xfc, 0x65, 0x41, 0xbb, 0x72, 0x2f, 0xaa, 0x6c, 0x1d,
	0xac, 0x3a, 0x35, 0x20, 0xfb, 0x66, 0x41, 0xbb, 0xb8, 0xc6, 0x6a, 0xf0, 0x00, 0x13, 0xc8, 0x5e,
	0xd7, 0x93, 0xef, 0xe8, 0xf3, 0x8a, 0xf4, 0xbb, 0x51, 0xb9, 0xb9, 0x6b, 0xf3, 0xf7, 0xa8, 0x37,
	0x6b, 0x42, 0xf0, 0x55, 0x56, 0x6e, 0xdc, 0xf4, 0x32, 0x7b, 0x77, 0x7e, 0x65, 0xb4, 0x45, 0xcf,
	0xfd, 0x16, 0x3a, 0xe3, 0xdc, 0xcf, 0x4c, 0x21, 0xaf, 0x06, 0x9f, 0xd4, 0xf3, 0xf7, 0xb2, 0xf7,
	0x2e, 0x98, 0xee, 0xcb, 0x83, 0x43, 0x35, 0xe8, 0xca, 0xb6, 0x13, 0xb4, 0x9b, 0x7e, 0x73, 0x12,
	0x8c, 0x5b, 0xea, 0x74, 0xd7, 0x9b, 0x3a, 0x6a, 0xe7, 0x58, 0x2b, 0xe4, 0xe5, 0x87, 0xa6, 0x3a,
	0x1c, 0x44, 0x7c, 0xc2, 0x4c, 0x77, 0x03, 0xa7, 0x23, 0x07, 0x1f, 0xe5, 0xb0, 0xef, 0xb9, 0xa3,
	0x24, 0xc4, 0x9b, 0x3c, 0xf3, 0xdc, 0xf6, 0xf9, 0x59, 0x47, 0x7d, 0x1e, 0xa6, 0x65, 0xfd, 0x7e,
	0x2b, 0x51, 0x0b, 0x9d, 0x71, 0xf8, 0xfa, 0xad, 0xec, 0x8d, 0xc2, 0xbd, 0x27, 0xf2, 0x78, 0x22,
	0xbf, 0xbf, 0x90, 0x4f, 0xbb, 0xc1, 0xd1, 0x34, 0x7c, 0x75, 0xe4, 0xf7, 0x5b, 0xe9, 0xec, 0xe7,
	0x67, 0x1d, 0x39, 0x39, 0xf1, 0xdc, 0xae, 0xec, 0x75, 0xe5, 0xe9, 0xbe, 0x7a, 0xf9, 0xd5, 0x73,
	0x47, 0xe1, 0xc1, 0x63, 0xff, 0xc7, 0xf0, 0xaf, 0x9a, 0xdf, 0x3e, 0x51, 0xdb, 0x3b, 0xbf, 0xb7,
	0x9b, 0xcb, 0x17, 0x56, 0x2e, 0x09, 0xd8, 0x12, 0xa8, 0x22, 0x6a, 0xd5, 0xd5, 0xe2, 0xc3, 0x42,
	0x6a, 0x12, 0x36, 0x60, 0xeb, 0x3e, 0x35, 0x09, 0x8a, 0x76, 0x25, 0x1e, 0x5b, 0x7d, 0x09, 0xc5,
	0xbb, 0x72, 0x3b, 0x3e, 0x4b, 0x8b, 0x71, 0xef, 0x6e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x45,
	0x55, 0xfc, 0xc2, 0x5a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexServiceClient interface {
	// 主页
	HomePage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) HomePage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/sole.api.v1.index.IndexService/HomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
type IndexServiceServer interface {
	// 主页
	HomePage(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
}

// UnimplementedIndexServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (*UnimplementedIndexServiceServer) HomePage(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomePage not implemented")
}

func RegisterIndexServiceServer(s *grpc.Server, srv IndexServiceServer) {
	s.RegisterService(&_IndexService_serviceDesc, srv)
}

func _IndexService_HomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).HomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sole.api.v1.index.IndexService/HomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).HomePage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sole.api.v1.index.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HomePage",
			Handler:    _IndexService_HomePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index.proto",
}
