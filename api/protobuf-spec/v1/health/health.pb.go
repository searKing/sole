// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: health.proto

// 健康监测服务 API

package health

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_ok Status = 0
)

var Status_name = map[int32]string{
	0: "ok",
}

var Status_value = map[string]int32{
	"ok": 0,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdbebe66dda7cb29, []int{0}
}

type AliveResponse struct {
	// Status always contains "ok".
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=solstice.api.v1.health.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AliveResponse) Reset()         { *m = AliveResponse{} }
func (m *AliveResponse) String() string { return proto.CompactTextString(m) }
func (*AliveResponse) ProtoMessage()    {}
func (*AliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdbebe66dda7cb29, []int{0}
}

func (m *AliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliveResponse.Unmarshal(m, b)
}
func (m *AliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliveResponse.Marshal(b, m, deterministic)
}
func (m *AliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliveResponse.Merge(m, src)
}
func (m *AliveResponse) XXX_Size() int {
	return xxx_messageInfo_AliveResponse.Size(m)
}
func (m *AliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AliveResponse proto.InternalMessageInfo

func (m *AliveResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_ok
}

type ReadyResponse struct {
	// Status always contains "ok".
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=solstice.api.v1.health.Status" json:"status,omitempty"`
	// Errors contains a list of errors that caused the not ready status.
	Errors               map[string]string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReadyResponse) Reset()         { *m = ReadyResponse{} }
func (m *ReadyResponse) String() string { return proto.CompactTextString(m) }
func (*ReadyResponse) ProtoMessage()    {}
func (*ReadyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdbebe66dda7cb29, []int{1}
}

func (m *ReadyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyResponse.Unmarshal(m, b)
}
func (m *ReadyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyResponse.Marshal(b, m, deterministic)
}
func (m *ReadyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyResponse.Merge(m, src)
}
func (m *ReadyResponse) XXX_Size() int {
	return xxx_messageInfo_ReadyResponse.Size(m)
}
func (m *ReadyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyResponse proto.InternalMessageInfo

func (m *ReadyResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_ok
}

func (m *ReadyResponse) GetErrors() map[string]string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type VersionResponse struct {
	// 服务软件版本
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdbebe66dda7cb29, []int{2}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterEnum("solstice.api.v1.health.Status", Status_name, Status_value)
	proto.RegisterType((*AliveResponse)(nil), "solstice.api.v1.health.AliveResponse")
	proto.RegisterType((*ReadyResponse)(nil), "solstice.api.v1.health.ReadyResponse")
	proto.RegisterMapType((map[string]string)(nil), "solstice.api.v1.health.ReadyResponse.ErrorsEntry")
	proto.RegisterType((*VersionResponse)(nil), "solstice.api.v1.health.VersionResponse")
}

func init() {
	proto.RegisterFile("health.proto", fileDescriptor_fdbebe66dda7cb29)
}

var fileDescriptor_fdbebe66dda7cb29 = []byte{
	// 1207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x6b, 0x1b, 0xc7,
	0x17, 0x8e, 0xac, 0xc8, 0x21, 0x93, 0xe4, 0x17, 0x47, 0xbf, 0x10, 0x8c, 0x5a, 0x52, 0x75, 0xa1,
	0x34, 0x34, 0x78, 0x37, 0x56, 0xa0, 0xb4, 0xea, 0x49, 0x81, 0x80, 0x43, 0x5b, 0x08, 0x4e, 0xe8,
	0xa1, 0xb7, 0xb5, 0x34, 0x95, 0x37, 0x91, 0xb5, 0xdb, 0xdd, 0x91, 0x52, 0x11, 0x02, 0xb2, 0x6a,
	0x3b, 0x8a, 0x2c, 0x45, 0x8a, 0x6a, 0x3b, 0x46, 0x52, 0xe2, 0x84, 0xd8, 0xae, 0x71, 0x1d, 0xc9,
	0x21, 0x89, 0x23, 0xcb, 0xb2, 0x03, 0xa5, 0x87, 0x1e, 0x7a, 0x69, 0xff, 0x81, 0x1e, 0xb2, 0x33,
	0x2b, 0x41, 0x41, 0xf4, 0xd0, 0x7b, 0xd9, 0x9d, 0x95, 0x2c, 0xbb, 0xd6, 0xa1, 0x94, 0x42, 0x29,
	0x3d, 0xed, 0xcc, 0x37, 0xf3, 0xde, 0x7c, 0xef, 0x7b, 0xdf, 0x0c, 0x0b, 0x0e, 0x0f, 0x43, 0x3e,
	0x80, 0x86, 0x59, 0x49, 0x16, 0x91, 0x68, 0x3f, 0xa1, 0x88, 0x01, 0x05, 0x09, 0x5e, 0xc8, 0xf2,
	0x92, 0xc0, 0x86, 0xfb, 0x59, 0xba, 0xea, 0x78, 0xcd, 0x2f, 0x8a, 0xfe, 0x00, 0xe4, 0x8c, 0x5d,
	0x43, 0xa1, 0xcf, 0x38, 0x38, 0x22, 0xa1, 0x08, 0x0d, 0x72, 0x38, 0x77, 0x2f, 0xfa, 0xa0, 0xe2,
	0x95, 0x05, 0x09, 0x89, 0xb2, 0xb9, 0xc3, 0xed, 0x17, 0xd0, 0x70, 0x68, 0x88, 0xf5, 0x8a, 0x23,
	0x1c, 0xdd, 0xcc, 0x4b, 0x82, 0xf2, 0xc7, 0x21, 0xc7, 0x4b, 0x02, 0x37, 0x8c, 0x90, 0x34, 0x24,
	0xfa, 0x9a, 0xd9, 0x2f, 0xb5, 0xc7, 0xca, 0x92, 0xb7, 0x0f, 0x7a, 0x45, 0x25, 0xa2, 0x20, 0x68,
	0x4e, 0xfd, 0x3c, 0x82, 0xd7, 0xf8, 0x08, 0x3d, 0xdd, 0xdb, 0xe7, 0x87, 0xc1, 0x3e, 0xe5, 0x1a,
	0xef, 0xf7, 0x43, 0x99, 0x13, 0x25, 0x24, 0x88, 0x41, 0x85, 0xe3, 0x83, 0x41, 0x11, 0xf1, 0xc6,
	0x98, 0x26, 0x65, 0xae, 0x80, 0x23, 0x9e, 0x80, 0x10, 0x86, 0x83, 0x50, 0x91, 0xc4, 0xa0, 0x02,
	0xed, 0xef, 0x82, 0x6e, 0x05, 0xf1, 0x28, 0xa4, 0xf4, 0x5a, 0x9c, 0x96, 0x53, 0xff, 0x73, 0x9d,
	0x64, 0xf7, 0x56, 0x82, 0xbd, 0x64, 0xec, 0x1a, 0x34, 0x77, 0xbb, 0xdf, 0xcc, 0x7a, 0x4e, 0x82,
	0x83, 0x3f, 0x59, 0xcc, 0xb9, 0xeb, 0x98, 0xfd, 0xe8, 0x75, 0x86, 0x8e, 0x19, 0x37, 0x23, 0x5e,
	0x65, 0x6e, 0x30, 0xd8, 0x02, 0x8e, 0x0c, 0x42, 0xde, 0x17, 0xf9, 0xab, 0x87, 0xd9, 0x2f, 0x80,
	0x6e, 0x28, 0xcb, 0xa2, 0xac, 0xf4, 0x76, 0x39, 0xad, 0xa7, 0x0e, 0xb9, 0xfa, 0x3b, 0xc5, 0xed,
	0x38, 0x8e, 0x3d, 0x6f, 0xc4, 0x9c, 0x0f, 0x22, 0x39, 0x32, 0x68, 0x26, 0x70, 0xbc, 0x0f, 0x0e,
	0xb5, 0xc1, 0xf6, 0x1e, 0x60, 0xbd, 0x0a, 0x23, 0x06, 0x9d, 0x83, 0x83, 0xfa, 0xd0, 0x7e, 0x1c,
	0xd8, 0xc2, 0x7c, 0x20, 0x04, 0x7b, 0xbb, 0x0c, 0x8c, 0x4e, 0xdc, 0x5d, 0xef, 0x59, 0xdc, 0x27,
	0xb2, 0x9e, 0xff, 0xef, 0x55, 0xe7, 0x47, 0xe0, 0xe8, 0x27, 0x50, 0x56, 0x04, 0x31, 0xd8, 0x2a,
	0xb4, 0x17, 0x1c, 0x08, 0x53, 0xc8, 0x4c, 0xdd, 0x9c, 0xba, 0xdf, 0xc8, 0x7a, 0x5e, 0x77, 0x39,
	0xec, 0xbd, 0xd7, 0x19, 0x13, 0x61, 0xdc, 0x8c, 0x0f, 0x86, 0xfb, 0x46, 0x78, 0x05, 0x41, 0x99,
	0xb9, 0xf1, 0x4e, 0x0f, 0xe8, 0xa6, 0xd5, 0xdb, 0xbb, 0x41, 0x97, 0x78, 0xb5, 0x67, 0x9f, 0xeb,
	0x9b, 0x1e, 0x70, 0x64, 0xc0, 0xa8, 0xef, 0x12, 0x94, 0xc3, 0x82, 0x17, 0xda, 0xef, 0xec, 0x07,
	0x36, 0xa3, 0x8d, 0xf6, 0x13, 0x2c, 0x35, 0x10, 0xdb, 0xf4, 0x20, 0x7b, 0x5e, 0x37, 0xa8, 0xe3,
	0xad, 0x4e, 0x0a, 0xed, 0xe8, 0x3e, 0xf3, 0xbd, 0x35, 0xeb, 0xf9, 0xce, 0x0a, 0x0e, 0xe3, 0xd1,
	0x05, 0x5c, 0x79, 0xa1, 0xe5, 0xef, 0x90, 0xe7, 0x93, 0x8e, 0x39, 0xeb, 0x69, 0x27, 0x29, 0xac,
	0x90, 0xdb, 0x0b, 0x38, 0xfd, 0x88, 0x3c, 0x8a, 0x92, 0xe7, 0x93, 0xa4, 0x90, 0xc2, 0x89, 0x87,
	0xb5, 0x44, 0x4c, 0x8b, 0xad, 0x6b, 0x89, 0x35, 0x12, 0x1d, 0x6d, 0x54, 0x93, 0x38, 0xf5, 0xb4,
	0x56, 0x5a, 0xa0, 0x20, 0x99, 0x2d, 0xe1, 0xcc, 0x22, 0x79, 0xfc, 0x08, 0x97, 0xcb, 0x38, 0x53,
	0xc2, 0x89, 0xa5, 0x46, 0x35, 0xaf, 0x6e, 0x4e, 0xa8, 0xe5, 0x14, 0x4e, 0x8e, 0x93, 0xc9, 0x15,
	0x75, 0xeb, 0x5e, 0xed, 0xf9, 0x8c, 0x96, 0x1b, 0xc3, 0xe3, 0x6b, 0xea, 0xc6, 0x0c, 0x4d, 0x48,
	0x53, 0x81, 0xd3, 0x4e, 0xbc, 0xf9, 0x95, 0x7e, 0xa2, 0x01, 0x0e, 0x5c, 0xbe, 0x7c, 0x91, 0x8e,
	0x68, 0x22, 0x12, 0xcf, 0xe0, 0xc4, 0x1c, 0xce, 0xdc, 0x76, 0x36, 0xaa, 0xc9, 0xda, 0xcb, 0x29,
	0x9c, 0xbf, 0x4f, 0xe3, 0xb4, 0x07, 0xa3, 0xae, 0x33, 0x67, 0x5e, 0x45, 0x63, 0x34, 0x01, 0xbe,
	0x95, 0x6a, 0xe1, 0x78, 0x7d, 0x4d, 0x2d, 0xa7, 0x9a, 0xdc, 0xcd, 0xc4, 0xe4, 0x56, 0x74, 0x6f,
	0x16, 0xb9, 0xb1, 0xda, 0xcb, 0x4c, 0xed, 0x61, 0x72, 0x9b, 0xce, 0x62, 0x8c, 0xdc, 0x2f, 0xb4,
	0x02, 0xe9, 0x2a, 0x2e, 0x2c, 0xe1, 0xf9, 0x9c, 0x5a, 0x5e, 0xa6, 0x15, 0xab, 0xeb, 0x93, 0x6a,
	0x39, 0xd1, 0xa8, 0x26, 0xc9, 0xe3, 0x79, 0x2a, 0x95, 0xc9, 0x2d, 0x37, 0x66, 0xaa, 0xd9, 0x22,
	0x93, 0x5e, 0xae, 0x67, 0xe3, 0xb8, 0xb4, 0x4e, 0x49, 0xd6, 0x8a, 0x2f, 0xeb, 0x77, 0x8b, 0x5a,
	0x6e, 0xac, 0x5d, 0x54, 0x5d, 0x4e, 0x83, 0x33, 0x4e, 0xa7, 0x70, 0x65, 0x8a, 0x4c, 0x3f, 0x53,
	0xcb, 0xcb, 0xf5, 0xfc, 0x84, 0xb6, 0x35, 0xbf, 0x2b, 0xe1, 0xab, 0x68, 0xcc, 0xb5, 0xcf, 0xdd,
	0xc3, 0x4b, 0x52, 0x40, 0xf0, 0x1a, 0x77, 0x9b, 0xbb, 0xa2, 0x88, 0x41, 0xfb, 0x8f, 0x56, 0x60,
	0x33, 0xec, 0xff, 0xe7, 0x3d, 0xb1, 0xe3, 0xd6, 0x30, 0x71, 0x6b, 0xd6, 0x33, 0xb6, 0xdb, 0x13,
	0x3f, 0x77, 0xed, 0xe1, 0x89, 0x95, 0x4e, 0xb6, 0x68, 0xc7, 0xa9, 0x33, 0x70, 0xba, 0xa4, 0x4d,
	0x2d, 0x99, 0xab, 0x4d, 0xc4, 0xb4, 0x4b, 0x69, 0x1d, 0xcf, 0xcf, 0x90, 0x74, 0x46, 0xdd, 0xca,
	0xd3, 0xc0, 0x46, 0x35, 0x4f, 0x4d, 0x43, 0x0a, 0x2b, 0x34, 0xc9, 0xb6, 0x27, 0xda, 0x3b, 0x85,
	0xd3, 0x89, 0x7f, 0x77, 0x4f, 0xbf, 0xed, 0x02, 0x07, 0xcc, 0xa7, 0xa5, 0x63, 0x57, 0xdf, 0xee,
	0xd4, 0xd5, 0x5d, 0x6f, 0x12, 0xf3, 0x9b, 0x25, 0xeb, 0xf9, 0xd5, 0xb2, 0xab, 0xaf, 0x3f, 0x58,
	0xda, 0xfa, 0x4a, 0x8b, 0x6d, 0x2f, 0xa1, 0xb6, 0x59, 0x52, 0x37, 0xd6, 0xb4, 0x5b, 0x71, 0x52,
	0x58, 0xf9, 0xe7, 0x6b, 0x08, 0xf6, 0x14, 0xf1, 0x17, 0x1b, 0x38, 0xf6, 0x31, 0x44, 0xb2, 0xe0,
	0x55, 0x2e, 0xca, 0xe2, 0x08, 0x44, 0xc3, 0x30, 0xa4, 0x74, 0x94, 0xf3, 0x78, 0x13, 0xd7, 0xc5,
	0x1c, 0x40, 0x48, 0x3a, 0x27, 0xfa, 0x22, 0xcc, 0x92, 0x2d, 0xeb, 0x99, 0xb7, 0x81, 0xa3, 0x78,
	0xab, 0x68, 0xfa, 0xab, 0xf8, 0x50, 0xcb, 0x4c, 0x38, 0xca, 0xfb, 0xff, 0xbb, 0x16, 0x7f, 0x6f,
	0x4b, 0x4f, 0x3b, 0xc9, 0x54, 0x89, 0x24, 0x47, 0x25, 0xda, 0xba, 0x90, 0xe2, 0xf4, 0x5c, 0xbc,
	0x40, 0x49, 0x34, 0xaa, 0xc9, 0x16, 0x4a, 0x66, 0x4b, 0x6a, 0x39, 0xaa, 0x7d, 0x9d, 0xaa, 0xe7,
	0x27, 0xd4, 0xf2, 0x63, 0x5c, 0x4d, 0xe3, 0xca, 0x62, 0xfd, 0x66, 0x5a, 0x7b, 0xba, 0xa1, 0x6d,
	0xcc, 0x35, 0xaa, 0x49, 0x6d, 0x6a, 0x49, 0xad, 0xdc, 0xae, 0x15, 0x57, 0xf1, 0xe6, 0x34, 0x4e,
	0x97, 0x6a, 0xa3, 0x39, 0x9c, 0x89, 0xeb, 0xcc, 0xa6, 0x57, 0x49, 0xaa, 0xa8, 0x4b, 0xbb, 0x18,
	0xab, 0xcf, 0xce, 0xe1, 0xf8, 0x5d, 0x9d, 0x84, 0xc1, 0x9e, 0xbc, 0x78, 0x82, 0x2b, 0x8b, 0x8d,
	0x6a, 0xb2, 0x9e, 0x4b, 0xe3, 0xf1, 0x2f, 0xb5, 0x67, 0x0f, 0xf0, 0xf8, 0x82, 0xbe, 0xe7, 0x66,
	0xa5, 0x3e, 0x3b, 0x57, 0x8b, 0x26, 0x49, 0xfe, 0x19, 0x99, 0x59, 0x6d, 0x54, 0xf3, 0x7a, 0x1f,
	0x74, 0x69, 0x4b, 0x2f, 0xc8, 0x93, 0x98, 0x5a, 0x5e, 0x26, 0xd3, 0xab, 0x34, 0x4c, 0x5f, 0xa0,
	0x28, 0x8e, 0xaf, 0x92, 0x7b, 0x0b, 0xad, 0x20, 0xc0, 0x0c, 0x00, 0x20, 0x6d, 0xdb, 0xd1, 0xad,
	0xff, 0xfc, 0x29, 0x6e, 0x8e, 0xdb, 0xc6, 0x58, 0x41, 0xe4, 0x7c, 0xa2, 0x57, 0x69, 0x83, 0xb8,
	0x00, 0x8f, 0xa0, 0x82, 0xb8, 0xcf, 0x43, 0x50, 0x8e, 0x08, 0x41, 0xbf, 0xf1, 0xdb, 0xe8, 0xda,
	0xe7, 0x06, 0x08, 0x7e, 0x81, 0x38, 0x29, 0xc0, 0x0b, 0xc1, 0x73, 0x67, 0x3f, 0xed, 0x6f, 0xfb,
	0x71, 0x54, 0x20, 0x2f, 0x7f, 0xa8, 0xef, 0x6c, 0x3e, 0x12, 0x46, 0x48, 0xb8, 0x9f, 0xa3, 0x8f,
	0xc4, 0x07, 0xf4, 0x33, 0xd4, 0x6d, 0xdc, 0x82, 0xb3, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x2c, 0x8d, 0x7d, 0x15, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthServiceClient interface {
	// 节点启动状态检测
	Alive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AliveResponse, error)
	// 节点就绪状态监测
	Ready(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
	// 服务版本查询
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Prometheus监控
	MetricsPrometheus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Alive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AliveResponse, error) {
	out := new(AliveResponse)
	err := c.cc.Invoke(ctx, "/solstice.api.v1.health.HealthService/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) Ready(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/solstice.api.v1.health.HealthService/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/solstice.api.v1.health.HealthService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) MetricsPrometheus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/solstice.api.v1.health.HealthService/MetricsPrometheus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
type HealthServiceServer interface {
	// 节点启动状态检测
	Alive(context.Context, *empty.Empty) (*AliveResponse, error)
	// 节点就绪状态监测
	Ready(context.Context, *empty.Empty) (*ReadyResponse, error)
	// 服务版本查询
	Version(context.Context, *empty.Empty) (*VersionResponse, error)
	// Prometheus监控
	MetricsPrometheus(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
}

// UnimplementedHealthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (*UnimplementedHealthServiceServer) Alive(ctx context.Context, req *empty.Empty) (*AliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (*UnimplementedHealthServiceServer) Ready(ctx context.Context, req *empty.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (*UnimplementedHealthServiceServer) Version(ctx context.Context, req *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedHealthServiceServer) MetricsPrometheus(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsPrometheus not implemented")
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solstice.api.v1.health.HealthService/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Alive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solstice.api.v1.health.HealthService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Ready(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solstice.api.v1.health.HealthService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_MetricsPrometheus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).MetricsPrometheus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solstice.api.v1.health.HealthService/MetricsPrometheus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).MetricsPrometheus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "solstice.api.v1.health.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _HealthService_Alive_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _HealthService_Ready_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _HealthService_Version_Handler,
		},
		{
			MethodName: "MetricsPrometheus",
			Handler:    _HealthService_MetricsPrometheus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}
