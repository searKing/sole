// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: health.proto

// 健康监测服务 API

package health

import (
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_ok Status = 0
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ok",
	}
	Status_value = map[string]int32{
		"ok": 0,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0}
}

type AliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status always contains "ok".
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sole.api.v1.health.Status" json:"status,omitempty"`
}

func (x *AliveResponse) Reset() {
	*x = AliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliveResponse) ProtoMessage() {}

func (x *AliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliveResponse.ProtoReflect.Descriptor instead.
func (*AliveResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0}
}

func (x *AliveResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ok
}

type ReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status always contains "ok".
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sole.api.v1.health.Status" json:"status,omitempty"`
	// Errors contains a list of errors that caused the not ready status.
	Errors map[string]string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReadyResponse) Reset() {
	*x = ReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyResponse) ProtoMessage() {}

func (x *ReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyResponse.ProtoReflect.Descriptor instead.
func (*ReadyResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{1}
}

func (x *ReadyResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ok
}

func (x *ReadyResponse) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务软件版本
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_health_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{2}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_health_proto protoreflect.FileDescriptor

var file_health_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x09,
	0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0f, 0x7b, 0x22, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x3a, 0x22, 0x6f, 0x6b, 0x22, 0x7d, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x7b, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3a, 0x22, 0x6f, 0x6b, 0x22, 0x7d, 0x22, 0x4a, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x64, 0x65, 0x76, 0x2d, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x7d, 0x2a, 0x10, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x6f, 0x6b, 0x10, 0x00, 0x32, 0x9f, 0x10, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x04, 0x0a, 0x05, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x03,
	0x92, 0x41, 0xc4, 0x03, 0x0a, 0x0c, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x9b, 0x91, 0xe6,
	0xb5, 0x8b, 0x1a, 0x9f, 0x03, 0x2b, 0x20, 0xe6, 0x9c, 0xac, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0xb3, 0xe8, 0xaf,
	0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xad, 0xa3,
	0xe5, 0xb8, 0xb8, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xef, 0xbc, 0x9b, 0xe4, 0xbd, 0x86, 0xe4,
	0xb8, 0x8d, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a,
	0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x0a, 0x2b, 0x20, 0xe5, 0xbd, 0x93, 0xe6, 0x9c, 0xac, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0x48, 0x54, 0x54, 0x50, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0xaf, 0xe5,
	0x8a, 0xa8, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0x20, 0xef, 0xbc, 0x8c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xa0, 0x81, 0x32, 0x30,
	0x30, 0xe3, 0x80, 0x82, 0x0a, 0x2b, 0x20, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d, 0xe6, 0xa3, 0x80, 0xe6,
	0xb5, 0x8b, 0xe6, 0x9c, 0xac, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0x80, 0xe4, 0xbe,
	0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xac, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x8a, 0xef,
	0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe7, 0xa0, 0x81, 0xe5, 0x8f, 0xaa, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe3, 0x80, 0x82, 0x32, 0x00, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0xcd, 0x03, 0x0a, 0x05, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x03,
	0x92, 0x41, 0x84, 0x03, 0x0a, 0x0c, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x9b, 0x91, 0xe6,
	0xb5, 0x8b, 0x1a, 0xdf, 0x02, 0x2b, 0x20, 0xe6, 0x9c, 0xac, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x9c, 0xac, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8d,
	0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0xb3, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe5, 0xaf,
	0xb9, 0xe5, 0xa4, 0x96, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xef, 0xbc, 0x9b, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe6, 0x9c, 0xac, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x48, 0x54, 0x54, 0x50, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8,
	0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x8f, 0x8a, 0xe6, 0x89, 0x80, 0xe4, 0xbe,
	0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xac, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x8a, 0xef,
	0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe7, 0xa0, 0x81, 0xe5, 0x8f, 0xaa, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe3, 0x80, 0x82, 0x32, 0x00, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0xbe, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf5, 0x01, 0x92, 0x41, 0xf1, 0x01, 0x0a, 0x0c, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7,
	0xe7, 0x9b, 0x91, 0xe6, 0xb5, 0x8b, 0x1a, 0xcc, 0x01, 0x2b, 0x20, 0xe6, 0x9c, 0xac, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xaf, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xac, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x8a, 0xef,
	0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe7, 0xa0, 0x81, 0xe5, 0x8f, 0xaa, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe3, 0x80, 0x82, 0x0a, 0x32, 0x00, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0xec, 0x05, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xa8, 0x05,
	0x92, 0x41, 0xa4, 0x05, 0x0a, 0x0f, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0x1a, 0xb8, 0x04, 0x2b, 0x20, 0xe6, 0x9c, 0xac, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x9c, 0xac, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x8c, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0x8d, 0xb3, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe6, 0xad, 0xa3, 0xe5, 0xb8,
	0xb8, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4, 0x96, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x9b, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe6, 0x9c, 0xac, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x48, 0x54, 0x54, 0x50, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8,
	0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x8f, 0x8a, 0xe6, 0x89,
	0x80, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x0a, 0x2b, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c,
	0xac, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x9c, 0xa8,
	0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe4,
	0xb8, 0x8a, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0x8f, 0xaa, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe3, 0x80, 0x82, 0x0a, 0x2b, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x75, 0x73, 0x20, 0x41, 0x50, 0x49, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x75, 0x73, 0xe6,
	0x98, 0xaf, 0xe4, 0xb8, 0x80, 0xe7, 0xa7, 0x8d, 0xe9, 0x9b, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbc,
	0x8f, 0xe5, 0xba, 0xa6, 0xe9, 0x87, 0x8f, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef, 0xbc, 0x8c,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0x8f, 0xaf, 0xe8,
	0x81, 0x9a, 0xe5, 0x90, 0x88, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef, 0xbc,
	0x9b, 0xe5, 0xa6, 0x82, 0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x97, 0xe7, 0x9a, 0x84, 0xe5, 0xbd, 0x93,
	0xe5, 0x89, 0x8d, 0xe6, 0xb7, 0xb1, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0x9a, 0x8f, 0xe5,
	0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe5, 0x85, 0xa5, 0xe9, 0x98, 0x9f, 0xe5, 0x87, 0xba, 0xe9, 0x98,
	0x9f, 0xe8, 0x80, 0x8c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xef, 0xbc, 0x9b, 0x48, 0x54, 0x54,
	0x50, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe9, 0x9a, 0x8f, 0x48, 0x54, 0x54, 0x50, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xe5, 0x88, 0xb0, 0xe6, 0x9d, 0xa5, 0xe8, 0x80, 0x8c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x0a,
	0x22, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x3a,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x32, 0x00, 0x3a, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x3b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_health_proto_rawDescOnce sync.Once
	file_health_proto_rawDescData = file_health_proto_rawDesc
)

func file_health_proto_rawDescGZIP() []byte {
	file_health_proto_rawDescOnce.Do(func() {
		file_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_health_proto_rawDescData)
	})
	return file_health_proto_rawDescData
}

var file_health_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_health_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_health_proto_goTypes = []interface{}{
	(Status)(0),               // 0: sole.api.v1.health.Status
	(*AliveResponse)(nil),     // 1: sole.api.v1.health.AliveResponse
	(*ReadyResponse)(nil),     // 2: sole.api.v1.health.ReadyResponse
	(*VersionResponse)(nil),   // 3: sole.api.v1.health.VersionResponse
	nil,                       // 4: sole.api.v1.health.ReadyResponse.ErrorsEntry
	(*empty.Empty)(nil),       // 5: google.protobuf.Empty
	(*httpbody.HttpBody)(nil), // 6: google.api.HttpBody
}
var file_health_proto_depIdxs = []int32{
	0, // 0: sole.api.v1.health.AliveResponse.status:type_name -> sole.api.v1.health.Status
	0, // 1: sole.api.v1.health.ReadyResponse.status:type_name -> sole.api.v1.health.Status
	4, // 2: sole.api.v1.health.ReadyResponse.errors:type_name -> sole.api.v1.health.ReadyResponse.ErrorsEntry
	5, // 3: sole.api.v1.health.HealthService.Alive:input_type -> google.protobuf.Empty
	5, // 4: sole.api.v1.health.HealthService.Ready:input_type -> google.protobuf.Empty
	5, // 5: sole.api.v1.health.HealthService.Version:input_type -> google.protobuf.Empty
	5, // 6: sole.api.v1.health.HealthService.MetricsPrometheus:input_type -> google.protobuf.Empty
	1, // 7: sole.api.v1.health.HealthService.Alive:output_type -> sole.api.v1.health.AliveResponse
	2, // 8: sole.api.v1.health.HealthService.Ready:output_type -> sole.api.v1.health.ReadyResponse
	3, // 9: sole.api.v1.health.HealthService.Version:output_type -> sole.api.v1.health.VersionResponse
	6, // 10: sole.api.v1.health.HealthService.MetricsPrometheus:output_type -> google.api.HttpBody
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_health_proto_init() }
func file_health_proto_init() {
	if File_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_health_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_health_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_health_proto_goTypes,
		DependencyIndexes: file_health_proto_depIdxs,
		EnumInfos:         file_health_proto_enumTypes,
		MessageInfos:      file_health_proto_msgTypes,
	}.Build()
	File_health_proto = out.File
	file_health_proto_rawDesc = nil
	file_health_proto_goTypes = nil
	file_health_proto_depIdxs = nil
}
