// Copyright 2020 The searKing Author. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.3
// source: viper.proto

package viper

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 日志等级
type Log_Level int32

const (
	Log_panic   Log_Level = 0
	Log_fatal   Log_Level = 1
	Log_error   Log_Level = 2
	Log_warn    Log_Level = 3
	Log_warning Log_Level = 3
	Log_info    Log_Level = 4
	Log_debug   Log_Level = 5
	Log_trace   Log_Level = 6
)

// Enum value maps for Log_Level.
var (
	Log_Level_name = map[int32]string{
		0: "panic",
		1: "fatal",
		2: "error",
		3: "warn",
		// Duplicate value: 3: "warning",
		4: "info",
		5: "debug",
		6: "trace",
	}
	Log_Level_value = map[string]int32{
		"panic":   0,
		"fatal":   1,
		"error":   2,
		"warn":    3,
		"warning": 3,
		"info":    4,
		"debug":   5,
		"trace":   6,
	}
)

func (x Log_Level) Enum() *Log_Level {
	p := new(Log_Level)
	*p = x
	return p
}

func (x Log_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_viper_proto_enumTypes[0].Descriptor()
}

func (Log_Level) Type() protoreflect.EnumType {
	return &file_viper_proto_enumTypes[0]
}

func (x Log_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Level.Descriptor instead.
func (Log_Level) EnumDescriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{3, 0}
}

// 日志格式
type Log_Format int32

const (
	Log_json Log_Format = 0
	Log_text Log_Format = 1
)

// Enum value maps for Log_Format.
var (
	Log_Format_name = map[int32]string{
		0: "json",
		1: "text",
	}
	Log_Format_value = map[string]int32{
		"json": 0,
		"text": 1,
	}
)

func (x Log_Format) Enum() *Log_Format {
	p := new(Log_Format)
	*p = x
	return p
}

func (x Log_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_viper_proto_enumTypes[1].Descriptor()
}

func (Log_Format) Type() protoreflect.EnumType {
	return &file_viper_proto_enumTypes[1]
}

func (x Log_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Format.Descriptor instead.
func (Log_Format) EnumDescriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{3, 1}
}

type Tracing_Type int32

const (
	Tracing_urber_jaeger Tracing_Type = 0 //uber-jaeger
	Tracing_zipkin       Tracing_Type = 1 //zipkin
)

// Enum value maps for Tracing_Type.
var (
	Tracing_Type_name = map[int32]string{
		0: "urber_jaeger",
		1: "zipkin",
	}
	Tracing_Type_value = map[string]int32{
		"urber_jaeger": 0,
		"zipkin":       1,
	}
)

func (x Tracing_Type) Enum() *Tracing_Type {
	p := new(Tracing_Type)
	*p = x
	return p
}

func (x Tracing_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tracing_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_viper_proto_enumTypes[2].Descriptor()
}

func (Tracing_Type) Type() protoreflect.EnumType {
	return &file_viper_proto_enumTypes[2]
}

func (x Tracing_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tracing_Type.Descriptor instead.
func (Tracing_Type) EnumDescriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4, 0}
}

// Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
type Tracing_Jaeger_Sampler_Type int32

const (
	Tracing_Jaeger_Sampler_const         Tracing_Jaeger_Sampler_Type = 0
	Tracing_Jaeger_Sampler_probabilistic Tracing_Jaeger_Sampler_Type = 1
	Tracing_Jaeger_Sampler_rateLimiting  Tracing_Jaeger_Sampler_Type = 2
	Tracing_Jaeger_Sampler_remote        Tracing_Jaeger_Sampler_Type = 3
)

// Enum value maps for Tracing_Jaeger_Sampler_Type.
var (
	Tracing_Jaeger_Sampler_Type_name = map[int32]string{
		0: "const",
		1: "probabilistic",
		2: "rateLimiting",
		3: "remote",
	}
	Tracing_Jaeger_Sampler_Type_value = map[string]int32{
		"const":         0,
		"probabilistic": 1,
		"rateLimiting":  2,
		"remote":        3,
	}
)

func (x Tracing_Jaeger_Sampler_Type) Enum() *Tracing_Jaeger_Sampler_Type {
	p := new(Tracing_Jaeger_Sampler_Type)
	*p = x
	return p
}

func (x Tracing_Jaeger_Sampler_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tracing_Jaeger_Sampler_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_viper_proto_enumTypes[3].Descriptor()
}

func (Tracing_Jaeger_Sampler_Type) Type() protoreflect.EnumType {
	return &file_viper_proto_enumTypes[3]
}

func (x Tracing_Jaeger_Sampler_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tracing_Jaeger_Sampler_Type.Descriptor instead.
func (Tracing_Jaeger_Sampler_Type) EnumDescriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4, 0, 1, 0}
}

// ViperProto is immutable, so mutex free
type ViperProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemSecret string    `protobuf:"bytes,1,opt,name=system_secret,json=systemSecret,proto3" json:"system_secret,omitempty"`
	AppInfo      *AppInfo  `protobuf:"bytes,2,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	Service      *Service  `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Log          *Log      `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty"`
	Tracing      *Tracing  `protobuf:"bytes,5,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Web          *Web      `protobuf:"bytes,6,opt,name=web,proto3" json:"web,omitempty"`
	Database     *Database `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *ViperProto) Reset() {
	*x = ViperProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViperProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViperProto) ProtoMessage() {}

func (x *ViperProto) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViperProto.ProtoReflect.Descriptor instead.
func (*ViperProto) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{0}
}

func (x *ViperProto) GetSystemSecret() string {
	if x != nil {
		return x.SystemSecret
	}
	return ""
}

func (x *ViperProto) GetAppInfo() *AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *ViperProto) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ViperProto) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ViperProto) GetTracing() *Tracing {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *ViperProto) GetWeb() *Web {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *ViperProto) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildVersion string `protobuf:"bytes,1,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"` // 编译版本
	BuildHash    string `protobuf:"bytes,2,opt,name=build_hash,json=buildHash,proto3" json:"build_hash,omitempty"`          // 源码hash
	BuildTime    string `protobuf:"bytes,3,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`          // 编译时间
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{1}
}

func (x *AppInfo) GetBuildVersion() string {
	if x != nil {
		return x.BuildVersion
	}
	return ""
}

func (x *AppInfo) GetBuildHash() string {
	if x != nil {
		return x.BuildHash
	}
	return ""
}

func (x *AppInfo) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // 服务名称
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // 服务全称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                    // 服务描述
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                                      // 服务实例ID
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level            Log_Level          `protobuf:"varint,1,opt,name=level,proto3,enum=sole.api.v1.viper.Log_Level" json:"level,omitempty"`                // 日志最低打印等级
	Format           Log_Format         `protobuf:"varint,2,opt,name=format,proto3,enum=sole.api.v1.viper.Log_Format" json:"format,omitempty"`             // 日志格式
	Path             string             `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                                    //日志存储路径
	RotationDuration *duration.Duration `protobuf:"bytes,4,opt,name=rotation_duration,json=rotationDuration,proto3" json:"rotation_duration,omitempty"`    // 日志循环覆盖分片时间
	RotationMaxCount int32              `protobuf:"varint,5,opt,name=rotation_max_count,json=rotationMaxCount,proto3" json:"rotation_max_count,omitempty"` //日志循环覆盖保留分片个数
	RotationMaxAge   *duration.Duration `protobuf:"bytes,6,opt,name=rotation_max_age,json=rotationMaxAge,proto3" json:"rotation_max_age,omitempty"`        // 文件最大保存时间
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{3}
}

func (x *Log) GetLevel() Log_Level {
	if x != nil {
		return x.Level
	}
	return Log_panic
}

func (x *Log) GetFormat() Log_Format {
	if x != nil {
		return x.Format
	}
	return Log_json
}

func (x *Log) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Log) GetRotationDuration() *duration.Duration {
	if x != nil {
		return x.RotationDuration
	}
	return nil
}

func (x *Log) GetRotationMaxCount() int32 {
	if x != nil {
		return x.RotationMaxCount
	}
	return 0
}

func (x *Log) GetRotationMaxAge() *duration.Duration {
	if x != nil {
		return x.RotationMaxAge
	}
	return nil
}

type Tracing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool            `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Type   Tracing_Type    `protobuf:"varint,2,opt,name=type,proto3,enum=sole.api.v1.viper.Tracing_Type" json:"type,omitempty"`
	Jaeger *Tracing_Jaeger `protobuf:"bytes,3,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
}

func (x *Tracing) Reset() {
	*x = Tracing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing) ProtoMessage() {}

func (x *Tracing) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing.ProtoReflect.Descriptor instead.
func (*Tracing) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4}
}

func (x *Tracing) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Tracing) GetType() Tracing_Type {
	if x != nil {
		return x.Type
	}
	return Tracing_urber_jaeger
}

func (x *Tracing) GetJaeger() *Tracing_Jaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

type Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindAddr      *Web_Net  `protobuf:"bytes,1,opt,name=bind_addr,json=bindAddr,proto3" json:"bind_addr,omitempty"`                // for listen
	AdvertiseAddr *Web_Net  `protobuf:"bytes,2,opt,name=advertise_addr,json=advertiseAddr,proto3" json:"advertise_addr,omitempty"` // for expose
	Tls           *Web_TLS  `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`                                          // for tls such as https
	Cors          *Web_CORS `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`                                        // for cors
	// for debug
	ForceDisableTls bool                 `protobuf:"varint,5,opt,name=force_disable_tls,json=forceDisableTls,proto3" json:"force_disable_tls,omitempty"` // disable tls
	LocalIpResolver *Web_LocalIpResolver `protobuf:"bytes,6,opt,name=local_ip_resolver,json=localIpResolver,proto3" json:"local_ip_resolver,omitempty"`  // for resolve local ip to expose, used if advertise_addr is empty
}

func (x *Web) Reset() {
	*x = Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web) ProtoMessage() {}

func (x *Web) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web.ProtoReflect.Descriptor instead.
func (*Web) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5}
}

func (x *Web) GetBindAddr() *Web_Net {
	if x != nil {
		return x.BindAddr
	}
	return nil
}

func (x *Web) GetAdvertiseAddr() *Web_Net {
	if x != nil {
		return x.AdvertiseAddr
	}
	return nil
}

func (x *Web) GetTls() *Web_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Web) GetCors() *Web_CORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Web) GetForceDisableTls() bool {
	if x != nil {
		return x.ForceDisableTls
	}
	return false
}

func (x *Web) GetLocalIpResolver() *Web_LocalIpResolver {
	if x != nil {
		return x.LocalIpResolver
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dsn               string             `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"` // memory|schema://[username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN]
	MaxWaitDuration   *duration.Duration `protobuf:"bytes,2,opt,name=max_wait_duration,json=maxWaitDuration,proto3" json:"max_wait_duration,omitempty"`
	FailAfterDuration *duration.Duration `protobuf:"bytes,3,opt,name=fail_after_duration,json=failAfterDuration,proto3" json:"fail_after_duration,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{6}
}

func (x *Database) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *Database) GetMaxWaitDuration() *duration.Duration {
	if x != nil {
		return x.MaxWaitDuration
	}
	return nil
}

func (x *Database) GetFailAfterDuration() *duration.Duration {
	if x != nil {
		return x.FailAfterDuration
	}
	return nil
}

type Tracing_Jaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reporter *Tracing_Jaeger_Reporter `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Sampler  *Tracing_Jaeger_Sampler  `protobuf:"bytes,2,opt,name=sampler,proto3" json:"sampler,omitempty"`
}

func (x *Tracing_Jaeger) Reset() {
	*x = Tracing_Jaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger) ProtoMessage() {}

func (x *Tracing_Jaeger) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Tracing_Jaeger) GetReporter() *Tracing_Jaeger_Reporter {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Tracing_Jaeger) GetSampler() *Tracing_Jaeger_Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

// Reporter configures the reporter. All fields are optional.
type Tracing_Jaeger_Reporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocalAgentHostPort instructs reporter to send spans to jaeger-agent at this address
	LocalAgentHostPort string `protobuf:"bytes,1,opt,name=local_agent_host_port,json=localAgentHostPort,proto3" json:"local_agent_host_port,omitempty"`
}

func (x *Tracing_Jaeger_Reporter) Reset() {
	*x = Tracing_Jaeger_Reporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger_Reporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger_Reporter) ProtoMessage() {}

func (x *Tracing_Jaeger_Reporter) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger_Reporter.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger_Reporter) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Tracing_Jaeger_Reporter) GetLocalAgentHostPort() string {
	if x != nil {
		return x.LocalAgentHostPort
	}
	return ""
}

// Sampler allows initializing a non-default sampler.  All fields are optional.
type Tracing_Jaeger_Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_url is the address of jaeger-agent's HTTP sampling server
	ServerUrl string                      `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	Type      Tracing_Jaeger_Sampler_Type `protobuf:"varint,2,opt,name=type,proto3,enum=sole.api.v1.viper.Tracing_Jaeger_Sampler_Type" json:"type,omitempty"`
	// Param is a value passed to the sampler.
	// Valid values for Param field are:
	// - for "const" sampler, 0 or 1 for always false/true respectively
	// - for "probabilistic" sampler, a probability between 0 and 1
	// - for "rateLimiting" sampler, the number of spans per second
	// - for "remote" sampler, param is the same as for "probabilistic"
	//   and indicates the initial sampling rate before the actual one
	//   is received from the mothership.
	Param float32 `protobuf:"fixed32,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *Tracing_Jaeger_Sampler) Reset() {
	*x = Tracing_Jaeger_Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing_Jaeger_Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing_Jaeger_Sampler) ProtoMessage() {}

func (x *Tracing_Jaeger_Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing_Jaeger_Sampler.ProtoReflect.Descriptor instead.
func (*Tracing_Jaeger_Sampler) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *Tracing_Jaeger_Sampler) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *Tracing_Jaeger_Sampler) GetType() Tracing_Jaeger_Sampler_Type {
	if x != nil {
		return x.Type
	}
	return Tracing_Jaeger_Sampler_const
}

func (x *Tracing_Jaeger_Sampler) GetParam() float32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type Web_Net struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Web_Net) Reset() {
	*x = Web_Net{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_Net) ProtoMessage() {}

func (x *Web_Net) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_Net.ProtoReflect.Descriptor instead.
func (*Web_Net) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Web_Net) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Web_Net) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Web_LocalIpResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks  []string           `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	Addresses []string           `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Timeout   *duration.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Web_LocalIpResolver) Reset() {
	*x = Web_LocalIpResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_LocalIpResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_LocalIpResolver) ProtoMessage() {}

func (x *Web_LocalIpResolver) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_LocalIpResolver.ProtoReflect.Descriptor instead.
func (*Web_LocalIpResolver) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Web_LocalIpResolver) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Web_LocalIpResolver) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Web_LocalIpResolver) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Web_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable        bool             `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	KeyPairBase64 *Web_TLS_KeyPair `protobuf:"bytes,2,opt,name=key_pair_base64,json=keyPairBase64,proto3" json:"key_pair_base64,omitempty"` // key pair in base64 format encoded from pem
	KeyPairPath   *Web_TLS_KeyPair `protobuf:"bytes,3,opt,name=key_pair_path,json=keyPairPath,proto3" json:"key_pair_path,omitempty"`       // key pair stored in file from pem
	// service_name is used to verify the hostname on the returned
	// certificates unless InsecureSkipVerify is given. It is also included
	// in the client's handshake to support virtual hosting unless it is
	// an IP address.
	ServiceName      string   `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	AllowedTlsCidrs  []string `protobuf:"bytes,5,rep,name=allowed_tls_cidrs,json=allowedTlsCidrs,proto3" json:"allowed_tls_cidrs,omitempty"` //"127.0.0.1/24"
	WhitelistedPaths []string `protobuf:"bytes,6,rep,name=whitelisted_paths,json=whitelistedPaths,proto3" json:"whitelisted_paths,omitempty"`
}

func (x *Web_TLS) Reset() {
	*x = Web_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_TLS) ProtoMessage() {}

func (x *Web_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_TLS.ProtoReflect.Descriptor instead.
func (*Web_TLS) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Web_TLS) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Web_TLS) GetKeyPairBase64() *Web_TLS_KeyPair {
	if x != nil {
		return x.KeyPairBase64
	}
	return nil
}

func (x *Web_TLS) GetKeyPairPath() *Web_TLS_KeyPair {
	if x != nil {
		return x.KeyPairPath
	}
	return nil
}

func (x *Web_TLS) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Web_TLS) GetAllowedTlsCidrs() []string {
	if x != nil {
		return x.AllowedTlsCidrs
	}
	return nil
}

func (x *Web_TLS) GetWhitelistedPaths() []string {
	if x != nil {
		return x.WhitelistedPaths
	}
	return nil
}

type Web_CORS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// returns Access-Control-Allow-Origin: * if false
	UseConditional bool `protobuf:"varint,2,opt,name=use_conditional,json=useConditional,proto3" json:"use_conditional,omitempty"`
	// allowed_origins is a list of origins a cross-domain request can be executed from.
	// If the special "*" value is present in the list, all origins will be allowed.
	// An origin may contain a wildcard (*) to replace 0 or more characters
	// (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penalty.
	// Only one wildcard can be used per origin.
	// Default value is ["*"]
	// return Access-Control-Allow-Origin
	AllowedOrigins []string `protobuf:"bytes,3,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	// allowed_methods is a list of methods the client is allowed to use with
	// cross-domain requests. Default value is simple methods (HEAD, GET and POST).
	AllowedMethods []string `protobuf:"bytes,4,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
	// allowed_headers is list of non simple headers the client is allowed to use with
	// cross-domain requests.
	// If the special "*" value is present in the list, all headers will be allowed.
	// Default value is [] but "Origin" is always appended to the list.
	AllowedHeaders []string `protobuf:"bytes,5,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	// exposed_headers indicates which headers are safe to expose to the API of a CORS
	// API specification
	// return Access-Control-Expose-Headers
	ExposedHeaders []string `protobuf:"bytes,6,rep,name=exposed_headers,json=exposedHeaders,proto3" json:"exposed_headers,omitempty"`
	// allow_credentials indicates whether the request can include user credentials like
	// cookies, HTTP authentication or client side SSL certificates.
	// return Access-Control-Allow-Credentials
	AllowCredentials []string `protobuf:"bytes,7,rep,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// options_passthrough instructs preflight to let other potential next handlers to
	// process the OPTIONS method. Turn this on if your application handles OPTIONS.
	OptionsPassthrough bool `protobuf:"varint,8,opt,name=options_passthrough,json=optionsPassthrough,proto3" json:"options_passthrough,omitempty"`
	// max_age indicates how long the results of a preflight request
	// can be cached
	MaxAge *duration.Duration `protobuf:"bytes,9,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// debug flag adds additional output to debug server side CORS issues
	Debug bool `protobuf:"varint,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Web_CORS) Reset() {
	*x = Web_CORS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_CORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_CORS) ProtoMessage() {}

func (x *Web_CORS) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_CORS.ProtoReflect.Descriptor instead.
func (*Web_CORS) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Web_CORS) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Web_CORS) GetUseConditional() bool {
	if x != nil {
		return x.UseConditional
	}
	return false
}

func (x *Web_CORS) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *Web_CORS) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *Web_CORS) GetAllowedHeaders() []string {
	if x != nil {
		return x.AllowedHeaders
	}
	return nil
}

func (x *Web_CORS) GetExposedHeaders() []string {
	if x != nil {
		return x.ExposedHeaders
	}
	return nil
}

func (x *Web_CORS) GetAllowCredentials() []string {
	if x != nil {
		return x.AllowCredentials
	}
	return nil
}

func (x *Web_CORS) GetOptionsPassthrough() bool {
	if x != nil {
		return x.OptionsPassthrough
	}
	return false
}

func (x *Web_CORS) GetMaxAge() *duration.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Web_CORS) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

// a public/private key pair
type Web_TLS_KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert string `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"` // public key
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`   // private key
}

func (x *Web_TLS_KeyPair) Reset() {
	*x = Web_TLS_KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Web_TLS_KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Web_TLS_KeyPair) ProtoMessage() {}

func (x *Web_TLS_KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_viper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Web_TLS_KeyPair.ProtoReflect.Descriptor instead.
func (*Web_TLS_KeyPair) Descriptor() ([]byte, []int) {
	return file_viper_proto_rawDescGZIP(), []int{5, 2, 0}
}

func (x *Web_TLS_KeyPair) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *Web_TLS_KeyPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_viper_proto protoreflect.FileDescriptor

var file_viper_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69,
	0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x02, 0x0a, 0x0a, 0x56, 0x69, 0x70,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x77, 0x65, 0x62,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x03,
	0x77, 0x65, 0x62, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae,
	0x04, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x6f, 0x0a, 0x11, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27, 0xe2,
	0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x28, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x12, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x10, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c,
	0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e, 0x5b, 0x2d, 0x2b, 0x5d,
	0x3f, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x2a, 0x29, 0x3f, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0e, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x10, 0x06, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0x1c, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x01, 0x22,
	0xe9, 0x04, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x1a, 0xa6, 0x03, 0x0a,
	0x06, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x69, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65,
	0x67, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x1a, 0x3d, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x1a, 0xcf, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x4b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x10, 0x03, 0x22, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x75, 0x72, 0x62, 0x65, 0x72, 0x5f, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x7a, 0x69, 0x70, 0x6b, 0x69, 0x6e, 0x10, 0x01, 0x22, 0xdb, 0x0a, 0x0a, 0x03,
	0x57, 0x65, 0x62, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x4e,
	0x65, 0x74, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x0e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x4e, 0x65, 0x74,
	0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x2c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x2e, 0x43, 0x4f, 0x52, 0x53, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x1a, 0x2d,
	0x0a, 0x03, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xa9, 0x01,
	0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e,
	0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xde, 0x02, 0x0a, 0x03, 0x54, 0x4c,
	0x53, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x76, 0x69, 0x70, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x54, 0x4c, 0x53, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x46, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x70, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x2e, 0x54, 0x4c, 0x53, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6c, 0x73, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x2f, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0xbc, 0x03, 0x0a, 0x04, 0x43,
	0x4f, 0x52, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x73, 0x73, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x5b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f,
	0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a,
	0x29, 0x3f, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x80, 0x02, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x6e, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27,
	0xe2, 0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x28, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x0a, 0x21, 0x5e, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x28, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x3f,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x4b,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x70, 0x65, 0x72, 0x3b, 0x76, 0x69, 0x70, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_viper_proto_rawDescOnce sync.Once
	file_viper_proto_rawDescData = file_viper_proto_rawDesc
)

func file_viper_proto_rawDescGZIP() []byte {
	file_viper_proto_rawDescOnce.Do(func() {
		file_viper_proto_rawDescData = protoimpl.X.CompressGZIP(file_viper_proto_rawDescData)
	})
	return file_viper_proto_rawDescData
}

var file_viper_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_viper_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_viper_proto_goTypes = []interface{}{
	(Log_Level)(0),                   // 0: sole.api.v1.viper.Log.Level
	(Log_Format)(0),                  // 1: sole.api.v1.viper.Log.Format
	(Tracing_Type)(0),                // 2: sole.api.v1.viper.Tracing.Type
	(Tracing_Jaeger_Sampler_Type)(0), // 3: sole.api.v1.viper.Tracing.Jaeger.Sampler.Type
	(*ViperProto)(nil),               // 4: sole.api.v1.viper.ViperProto
	(*AppInfo)(nil),                  // 5: sole.api.v1.viper.AppInfo
	(*Service)(nil),                  // 6: sole.api.v1.viper.Service
	(*Log)(nil),                      // 7: sole.api.v1.viper.Log
	(*Tracing)(nil),                  // 8: sole.api.v1.viper.Tracing
	(*Web)(nil),                      // 9: sole.api.v1.viper.Web
	(*Database)(nil),                 // 10: sole.api.v1.viper.Database
	(*Tracing_Jaeger)(nil),           // 11: sole.api.v1.viper.Tracing.Jaeger
	(*Tracing_Jaeger_Reporter)(nil),  // 12: sole.api.v1.viper.Tracing.Jaeger.Reporter
	(*Tracing_Jaeger_Sampler)(nil),   // 13: sole.api.v1.viper.Tracing.Jaeger.Sampler
	(*Web_Net)(nil),                  // 14: sole.api.v1.viper.Web.Net
	(*Web_LocalIpResolver)(nil),      // 15: sole.api.v1.viper.Web.LocalIpResolver
	(*Web_TLS)(nil),                  // 16: sole.api.v1.viper.Web.TLS
	(*Web_CORS)(nil),                 // 17: sole.api.v1.viper.Web.CORS
	(*Web_TLS_KeyPair)(nil),          // 18: sole.api.v1.viper.Web.TLS.KeyPair
	(*duration.Duration)(nil),        // 19: google.protobuf.Duration
}
var file_viper_proto_depIdxs = []int32{
	5,  // 0: sole.api.v1.viper.ViperProto.app_info:type_name -> sole.api.v1.viper.AppInfo
	6,  // 1: sole.api.v1.viper.ViperProto.service:type_name -> sole.api.v1.viper.Service
	7,  // 2: sole.api.v1.viper.ViperProto.log:type_name -> sole.api.v1.viper.Log
	8,  // 3: sole.api.v1.viper.ViperProto.tracing:type_name -> sole.api.v1.viper.Tracing
	9,  // 4: sole.api.v1.viper.ViperProto.web:type_name -> sole.api.v1.viper.Web
	10, // 5: sole.api.v1.viper.ViperProto.database:type_name -> sole.api.v1.viper.Database
	0,  // 6: sole.api.v1.viper.Log.level:type_name -> sole.api.v1.viper.Log.Level
	1,  // 7: sole.api.v1.viper.Log.format:type_name -> sole.api.v1.viper.Log.Format
	19, // 8: sole.api.v1.viper.Log.rotation_duration:type_name -> google.protobuf.Duration
	19, // 9: sole.api.v1.viper.Log.rotation_max_age:type_name -> google.protobuf.Duration
	2,  // 10: sole.api.v1.viper.Tracing.type:type_name -> sole.api.v1.viper.Tracing.Type
	11, // 11: sole.api.v1.viper.Tracing.jaeger:type_name -> sole.api.v1.viper.Tracing.Jaeger
	14, // 12: sole.api.v1.viper.Web.bind_addr:type_name -> sole.api.v1.viper.Web.Net
	14, // 13: sole.api.v1.viper.Web.advertise_addr:type_name -> sole.api.v1.viper.Web.Net
	16, // 14: sole.api.v1.viper.Web.tls:type_name -> sole.api.v1.viper.Web.TLS
	17, // 15: sole.api.v1.viper.Web.cors:type_name -> sole.api.v1.viper.Web.CORS
	15, // 16: sole.api.v1.viper.Web.local_ip_resolver:type_name -> sole.api.v1.viper.Web.LocalIpResolver
	19, // 17: sole.api.v1.viper.Database.max_wait_duration:type_name -> google.protobuf.Duration
	19, // 18: sole.api.v1.viper.Database.fail_after_duration:type_name -> google.protobuf.Duration
	12, // 19: sole.api.v1.viper.Tracing.Jaeger.reporter:type_name -> sole.api.v1.viper.Tracing.Jaeger.Reporter
	13, // 20: sole.api.v1.viper.Tracing.Jaeger.sampler:type_name -> sole.api.v1.viper.Tracing.Jaeger.Sampler
	3,  // 21: sole.api.v1.viper.Tracing.Jaeger.Sampler.type:type_name -> sole.api.v1.viper.Tracing.Jaeger.Sampler.Type
	19, // 22: sole.api.v1.viper.Web.LocalIpResolver.timeout:type_name -> google.protobuf.Duration
	18, // 23: sole.api.v1.viper.Web.TLS.key_pair_base64:type_name -> sole.api.v1.viper.Web.TLS.KeyPair
	18, // 24: sole.api.v1.viper.Web.TLS.key_pair_path:type_name -> sole.api.v1.viper.Web.TLS.KeyPair
	19, // 25: sole.api.v1.viper.Web.CORS.max_age:type_name -> google.protobuf.Duration
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_viper_proto_init() }
func file_viper_proto_init() {
	if File_viper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_viper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViperProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger_Reporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing_Jaeger_Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_Net); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_LocalIpResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_CORS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Web_TLS_KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_viper_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_viper_proto_goTypes,
		DependencyIndexes: file_viper_proto_depIdxs,
		EnumInfos:         file_viper_proto_enumTypes,
		MessageInfos:      file_viper_proto_msgTypes,
	}.Build()
	File_viper_proto = out.File
	file_viper_proto_rawDesc = nil
	file_viper_proto_goTypes = nil
	file_viper_proto_depIdxs = nil
}
