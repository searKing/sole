// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: v1/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 日志等级
type Configuration_Log_Level int32

const (
	Configuration_Log_panic   Configuration_Log_Level = 0
	Configuration_Log_fatal   Configuration_Log_Level = 1
	Configuration_Log_error   Configuration_Log_Level = 2
	Configuration_Log_warn    Configuration_Log_Level = 3
	Configuration_Log_warning Configuration_Log_Level = 3
	Configuration_Log_info    Configuration_Log_Level = 4
	Configuration_Log_debug   Configuration_Log_Level = 5
	Configuration_Log_trace   Configuration_Log_Level = 6
)

// Enum value maps for Configuration_Log_Level.
var (
	Configuration_Log_Level_name = map[int32]string{
		0: "panic",
		1: "fatal",
		2: "error",
		3: "warn",
		// Duplicate value: 3: "warning",
		4: "info",
		5: "debug",
		6: "trace",
	}
	Configuration_Log_Level_value = map[string]int32{
		"panic":   0,
		"fatal":   1,
		"error":   2,
		"warn":    3,
		"warning": 3,
		"info":    4,
		"debug":   5,
		"trace":   6,
	}
)

func (x Configuration_Log_Level) Enum() *Configuration_Log_Level {
	p := new(Configuration_Log_Level)
	*p = x
	return p
}

func (x Configuration_Log_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Log_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_config_config_proto_enumTypes[0].Descriptor()
}

func (Configuration_Log_Level) Type() protoreflect.EnumType {
	return &file_v1_config_config_proto_enumTypes[0]
}

func (x Configuration_Log_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Log_Level.Descriptor instead.
func (Configuration_Log_Level) EnumDescriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 4, 0}
}

// 日志格式
type Configuration_Log_Format int32

const (
	Configuration_Log_json       Configuration_Log_Format = 0
	Configuration_Log_text       Configuration_Log_Format = 1
	Configuration_Log_glog       Configuration_Log_Format = 2
	Configuration_Log_glog_human Configuration_Log_Format = 3
)

// Enum value maps for Configuration_Log_Format.
var (
	Configuration_Log_Format_name = map[int32]string{
		0: "json",
		1: "text",
		2: "glog",
		3: "glog_human",
	}
	Configuration_Log_Format_value = map[string]int32{
		"json":       0,
		"text":       1,
		"glog":       2,
		"glog_human": 3,
	}
)

func (x Configuration_Log_Format) Enum() *Configuration_Log_Format {
	p := new(Configuration_Log_Format)
	*p = x
	return p
}

func (x Configuration_Log_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Log_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_config_config_proto_enumTypes[1].Descriptor()
}

func (Configuration_Log_Format) Type() protoreflect.EnumType {
	return &file_v1_config_config_proto_enumTypes[1]
}

func (x Configuration_Log_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Log_Format.Descriptor instead.
func (Configuration_Log_Format) EnumDescriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 4, 1}
}

// 参数配置文件
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log                 *Configuration_Log `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Web                 *Configuration_Web `protobuf:"bytes,2,opt,name=web,proto3" json:"web,omitempty"`
	DynamicEnvironments map[string]string  `protobuf:"bytes,3,rep,name=dynamic_environments,json=dynamicEnvironments,proto3" json:"dynamic_environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 动态环境变量，用来更新程序环境变量；比如织云只能下发文件，此处可以实现间接下发环境变量
	// https://gocloud.dev/
	SecretKeeperUrl string                          `protobuf:"bytes,4,opt,name=secret_keeper_url,json=secretKeeperUrl,proto3" json:"secret_keeper_url,omitempty"` // 服务秘钥，用于解密s3等敏感信息，"base64key://smGbjm71Nxd1Ig5FS0wj9SlbzAIrnolCz9bQQ6uAhl4="
	Go              *Configuration_GoParam          `protobuf:"bytes,5,opt,name=go,proto3" json:"go,omitempty"`
	FileCleaners    []*Configuration_FileCleanParam `protobuf:"bytes,6,rep,name=file_cleaners,json=fileCleaners,proto3" json:"file_cleaners,omitempty"` // 文件清理
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetLog() *Configuration_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Configuration) GetWeb() *Configuration_Web {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *Configuration) GetDynamicEnvironments() map[string]string {
	if x != nil {
		return x.DynamicEnvironments
	}
	return nil
}

func (x *Configuration) GetSecretKeeperUrl() string {
	if x != nil {
		return x.SecretKeeperUrl
	}
	return ""
}

func (x *Configuration) GetGo() *Configuration_GoParam {
	if x != nil {
		return x.Go
	}
	return nil
}

func (x *Configuration) GetFileCleaners() []*Configuration_FileCleanParam {
	if x != nil {
		return x.FileCleaners
	}
	return nil
}

// Go相关参数
type Configuration_GoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=gc_interval,json=gcInterval,proto3" json:"gc_interval,omitempty"` // CGO GC 间隔, cgo本身强制2min, forcegcperiod
}

func (x *Configuration_GoParam) Reset() {
	*x = Configuration_GoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_GoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_GoParam) ProtoMessage() {}

func (x *Configuration_GoParam) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_GoParam.ProtoReflect.Descriptor instead.
func (*Configuration_GoParam) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Configuration_GoParam) GetGcInterval() *durationpb.Duration {
	if x != nil {
		return x.GcInterval
	}
	return nil
}

// 文件清理参数
type Configuration_FileCleanParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePattern     string               `protobuf:"bytes,1,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`                 // 文件通配符
	CleanInterval   *durationpb.Duration `protobuf:"bytes,2,opt,name=clean_interval,json=cleanInterval,proto3" json:"clean_interval,omitempty"`           // 文件最大保存时间
	MaxCount        int64                `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`                         //文件保留分片个数
	MaxAge          *durationpb.Duration `protobuf:"bytes,4,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`                                // 文件最大保存时间-修改时间
	MinAge          *durationpb.Duration `protobuf:"bytes,5,opt,name=min_age,json=minAge,proto3" json:"min_age,omitempty"`                                // 文件最小保存时间，低于这个的进行保护，不删除
	MaxUsedPercent  float32              `protobuf:"fixed32,6,opt,name=max_used_percent,json=maxUsedPercent,proto3" json:"max_used_percent,omitempty"`    // 文件空间百分比
	MaxIusedPercent float32              `protobuf:"fixed32,7,opt,name=max_iused_percent,json=maxIusedPercent,proto3" json:"max_iused_percent,omitempty"` // 文件最大Node百分比
}

func (x *Configuration_FileCleanParam) Reset() {
	*x = Configuration_FileCleanParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_FileCleanParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_FileCleanParam) ProtoMessage() {}

func (x *Configuration_FileCleanParam) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_FileCleanParam.ProtoReflect.Descriptor instead.
func (*Configuration_FileCleanParam) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Configuration_FileCleanParam) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *Configuration_FileCleanParam) GetCleanInterval() *durationpb.Duration {
	if x != nil {
		return x.CleanInterval
	}
	return nil
}

func (x *Configuration_FileCleanParam) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Configuration_FileCleanParam) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Configuration_FileCleanParam) GetMinAge() *durationpb.Duration {
	if x != nil {
		return x.MinAge
	}
	return nil
}

func (x *Configuration_FileCleanParam) GetMaxUsedPercent() float32 {
	if x != nil {
		return x.MaxUsedPercent
	}
	return 0
}

func (x *Configuration_FileCleanParam) GetMaxIusedPercent() float32 {
	if x != nil {
		return x.MaxIusedPercent
	}
	return 0
}

type Configuration_Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindAddr                     *Configuration_Web_Net `protobuf:"bytes,1,opt,name=bind_addr,json=bindAddr,proto3" json:"bind_addr,omitempty"`                                                                      // for listen
	ShutdownDelayDuration        *durationpb.Duration   `protobuf:"bytes,2,opt,name=shutdown_delay_duration,json=shutdownDelayDuration,proto3" json:"shutdown_delay_duration,omitempty"`                             // ShutdownDelayDuration allows to block shutdown for graceful exit.
	MaxConcurrencyUnary          int64                  `protobuf:"varint,3,opt,name=max_concurrency_unary,json=maxConcurrencyUnary,proto3" json:"max_concurrency_unary,omitempty"`                                  // for concurrent parallel requests of unary server, The default is 0 (no limit is given)
	MaxConcurrencyStream         int64                  `protobuf:"varint,4,opt,name=max_concurrency_stream,json=maxConcurrencyStream,proto3" json:"max_concurrency_stream,omitempty"`                               // for concurrent parallel requests of stream server, The default is 0 (no limit is given)
	BurstLimitTimeoutUnary       *durationpb.Duration   `protobuf:"bytes,5,opt,name=burst_limit_timeout_unary,json=burstLimitTimeoutUnary,proto3" json:"burst_limit_timeout_unary,omitempty"`                        // for concurrent parallel requests of unary server, The default is 0 (no limit is given)
	BurstLimitTimeoutStream      *durationpb.Duration   `protobuf:"bytes,6,opt,name=burst_limit_timeout_stream,json=burstLimitTimeoutStream,proto3" json:"burst_limit_timeout_stream,omitempty"`                     // for concurrent parallel requests of stream server, The default is 0 (no limit is given)
	HandledTimeoutUnary          *durationpb.Duration   `protobuf:"bytes,7,opt,name=handled_timeout_unary,json=handledTimeoutUnary,proto3" json:"handled_timeout_unary,omitempty"`                                   // for max handing time of unary server, The default is 0 (no limit is given)
	HandledTimeoutStream         *durationpb.Duration   `protobuf:"bytes,8,opt,name=handled_timeout_stream,json=handledTimeoutStream,proto3" json:"handled_timeout_stream,omitempty"`                                // for max handing time of unary server, The default is 0 (no limit is given)
	MaxReceiveMessageSizeInBytes int64                  `protobuf:"varint,9,opt,name=max_receive_message_size_in_bytes,json=maxReceiveMessageSizeInBytes,proto3" json:"max_receive_message_size_in_bytes,omitempty"` // sets the maximum message size in bytes the grpc server can receive, The default is 0 (no limit is given).
	MaxSendMessageSizeInBytes    int64                  `protobuf:"varint,10,opt,name=max_send_message_size_in_bytes,json=maxSendMessageSizeInBytes,proto3" json:"max_send_message_size_in_bytes,omitempty"`         // sets the maximum message size in bytes the grpc server can send, The default is 0 (no limit is given).
	// for debug
	ForceDisableTls bool `protobuf:"varint,11,opt,name=force_disable_tls,json=forceDisableTls,proto3" json:"force_disable_tls,omitempty"` // disable tls
}

func (x *Configuration_Web) Reset() {
	*x = Configuration_Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_Web) ProtoMessage() {}

func (x *Configuration_Web) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_Web.ProtoReflect.Descriptor instead.
func (*Configuration_Web) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Configuration_Web) GetBindAddr() *Configuration_Web_Net {
	if x != nil {
		return x.BindAddr
	}
	return nil
}

func (x *Configuration_Web) GetShutdownDelayDuration() *durationpb.Duration {
	if x != nil {
		return x.ShutdownDelayDuration
	}
	return nil
}

func (x *Configuration_Web) GetMaxConcurrencyUnary() int64 {
	if x != nil {
		return x.MaxConcurrencyUnary
	}
	return 0
}

func (x *Configuration_Web) GetMaxConcurrencyStream() int64 {
	if x != nil {
		return x.MaxConcurrencyStream
	}
	return 0
}

func (x *Configuration_Web) GetBurstLimitTimeoutUnary() *durationpb.Duration {
	if x != nil {
		return x.BurstLimitTimeoutUnary
	}
	return nil
}

func (x *Configuration_Web) GetBurstLimitTimeoutStream() *durationpb.Duration {
	if x != nil {
		return x.BurstLimitTimeoutStream
	}
	return nil
}

func (x *Configuration_Web) GetHandledTimeoutUnary() *durationpb.Duration {
	if x != nil {
		return x.HandledTimeoutUnary
	}
	return nil
}

func (x *Configuration_Web) GetHandledTimeoutStream() *durationpb.Duration {
	if x != nil {
		return x.HandledTimeoutStream
	}
	return nil
}

func (x *Configuration_Web) GetMaxReceiveMessageSizeInBytes() int64 {
	if x != nil {
		return x.MaxReceiveMessageSizeInBytes
	}
	return 0
}

func (x *Configuration_Web) GetMaxSendMessageSizeInBytes() int64 {
	if x != nil {
		return x.MaxSendMessageSizeInBytes
	}
	return 0
}

func (x *Configuration_Web) GetForceDisableTls() bool {
	if x != nil {
		return x.ForceDisableTls
	}
	return false
}

type Configuration_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                   Configuration_Log_Level  `protobuf:"varint,1,opt,name=level,proto3,enum=sole.api.v1.config.Configuration_Log_Level" json:"level,omitempty"`                                                                         // 日志最低打印等级
	Format                  Configuration_Log_Format `protobuf:"varint,2,opt,name=format,proto3,enum=sole.api.v1.config.Configuration_Log_Format" json:"format,omitempty"`                                                                      // 日志格式
	Path                    string                   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                                                                                                            //日志存储路径
	RotationDuration        *durationpb.Duration     `protobuf:"bytes,4,opt,name=rotation_duration,json=rotationDuration,proto3" json:"rotation_duration,omitempty"`                                                                            // 日志循环覆盖最大分片时间
	RotationSizeInByte      int64                    `protobuf:"varint,5,opt,name=rotation_size_in_byte,json=rotationSizeInByte,proto3" json:"rotation_size_in_byte,omitempty"`                                                                 //日志循环最大分片大小,单位为Byte
	RotationMaxCount        int64                    `protobuf:"varint,6,opt,name=rotation_max_count,json=rotationMaxCount,proto3" json:"rotation_max_count,omitempty"`                                                                         //日志循环覆盖保留分片个数
	RotationMaxAge          *durationpb.Duration     `protobuf:"bytes,7,opt,name=rotation_max_age,json=rotationMaxAge,proto3" json:"rotation_max_age,omitempty"`                                                                                // 文件最大保存时间
	ReportCaller            bool                     `protobuf:"varint,8,opt,name=report_caller,json=reportCaller,proto3" json:"report_caller,omitempty"`                                                                                       // 调用者堆栈
	MuteDirectlyOutput      bool                     `protobuf:"varint,9,opt,name=mute_directly_output,json=muteDirectlyOutput,proto3" json:"mute_directly_output,omitempty"`                                                                   // warn及更高级别日志是否打印到标准输出
	MuteDirectlyOutputLevel Configuration_Log_Level  `protobuf:"varint,10,opt,name=mute_directly_output_level,json=muteDirectlyOutputLevel,proto3,enum=sole.api.v1.config.Configuration_Log_Level" json:"mute_directly_output_level,omitempty"` // 标准输出日志最低打印等级
	TruncateMessageSizeTo   int64                    `protobuf:"varint,11,opt,name=truncate_message_size_to,json=truncateMessageSizeTo,proto3" json:"truncate_message_size_to,omitempty"`                                                       // 日志 message 最大长度，超长则截断; 当前仅glog和glog_human模式生效
	TruncateKeySizeTo       int64                    `protobuf:"varint,12,opt,name=truncate_key_size_to,json=truncateKeySizeTo,proto3" json:"truncate_key_size_to,omitempty"`                                                                   // 日志键值对的key最大长度，超长则截断; 当前仅glog和glog_human模式生效
	TruncateValueSizeTo     int64                    `protobuf:"varint,13,opt,name=truncate_value_size_to,json=truncateValueSizeTo,proto3" json:"truncate_value_size_to,omitempty"`                                                             // 日志键值对的value最大长度，超长则截断; 当前仅glog和glog_human模式生效
}

func (x *Configuration_Log) Reset() {
	*x = Configuration_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_Log) ProtoMessage() {}

func (x *Configuration_Log) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_Log.ProtoReflect.Descriptor instead.
func (*Configuration_Log) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Configuration_Log) GetLevel() Configuration_Log_Level {
	if x != nil {
		return x.Level
	}
	return Configuration_Log_panic
}

func (x *Configuration_Log) GetFormat() Configuration_Log_Format {
	if x != nil {
		return x.Format
	}
	return Configuration_Log_json
}

func (x *Configuration_Log) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Configuration_Log) GetRotationDuration() *durationpb.Duration {
	if x != nil {
		return x.RotationDuration
	}
	return nil
}

func (x *Configuration_Log) GetRotationSizeInByte() int64 {
	if x != nil {
		return x.RotationSizeInByte
	}
	return 0
}

func (x *Configuration_Log) GetRotationMaxCount() int64 {
	if x != nil {
		return x.RotationMaxCount
	}
	return 0
}

func (x *Configuration_Log) GetRotationMaxAge() *durationpb.Duration {
	if x != nil {
		return x.RotationMaxAge
	}
	return nil
}

func (x *Configuration_Log) GetReportCaller() bool {
	if x != nil {
		return x.ReportCaller
	}
	return false
}

func (x *Configuration_Log) GetMuteDirectlyOutput() bool {
	if x != nil {
		return x.MuteDirectlyOutput
	}
	return false
}

func (x *Configuration_Log) GetMuteDirectlyOutputLevel() Configuration_Log_Level {
	if x != nil {
		return x.MuteDirectlyOutputLevel
	}
	return Configuration_Log_panic
}

func (x *Configuration_Log) GetTruncateMessageSizeTo() int64 {
	if x != nil {
		return x.TruncateMessageSizeTo
	}
	return 0
}

func (x *Configuration_Log) GetTruncateKeySizeTo() int64 {
	if x != nil {
		return x.TruncateKeySizeTo
	}
	return 0
}

func (x *Configuration_Log) GetTruncateValueSizeTo() int64 {
	if x != nil {
		return x.TruncateValueSizeTo
	}
	return 0
}

type Configuration_Web_Net struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Configuration_Web_Net) Reset() {
	*x = Configuration_Web_Net{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_Web_Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_Web_Net) ProtoMessage() {}

func (x *Configuration_Web_Net) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_Web_Net.ProtoReflect.Descriptor instead.
func (*Configuration_Web_Net) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Configuration_Web_Net) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Configuration_Web_Net) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_v1_config_config_proto protoreflect.FileDescriptor

var file_v1_config_config_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x14, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65, 0x62,
	0x12, 0x6d, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x02, 0x67,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x02, 0x67, 0x6f, 0x12, 0x55, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x46, 0x0a,
	0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x07, 0x47, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x67, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xd0, 0x02, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x49, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a,
	0xbf, 0x06, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0x46, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65,
	0x62, 0x2e, 0x4e, 0x65, 0x74, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x51, 0x0a, 0x17, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x54, 0x0a, 0x19,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x56, 0x0a, 0x1a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x62, 0x75, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x21, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6c, 0x73, 0x1a, 0x2d, 0x0a, 0x03, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x8d, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x2e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x15, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x78, 0x41, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x75, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x75, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6c, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x1a, 0x6d,
	0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x17, 0x6d, 0x75,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x12, 0x2f,
	0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x54, 0x6f, 0x22, 0x63, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a,
	0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x61,
	0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x10, 0x06, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x67, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x67, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x10,
	0x03, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_config_config_proto_rawDescOnce sync.Once
	file_v1_config_config_proto_rawDescData = file_v1_config_config_proto_rawDesc
)

func file_v1_config_config_proto_rawDescGZIP() []byte {
	file_v1_config_config_proto_rawDescOnce.Do(func() {
		file_v1_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_config_config_proto_rawDescData)
	})
	return file_v1_config_config_proto_rawDescData
}

var file_v1_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_v1_config_config_proto_goTypes = []interface{}{
	(Configuration_Log_Level)(0),         // 0: sole.api.v1.config.Configuration.Log.Level
	(Configuration_Log_Format)(0),        // 1: sole.api.v1.config.Configuration.Log.Format
	(*Configuration)(nil),                // 2: sole.api.v1.config.Configuration
	nil,                                  // 3: sole.api.v1.config.Configuration.DynamicEnvironmentsEntry
	(*Configuration_GoParam)(nil),        // 4: sole.api.v1.config.Configuration.GoParam
	(*Configuration_FileCleanParam)(nil), // 5: sole.api.v1.config.Configuration.FileCleanParam
	(*Configuration_Web)(nil),            // 6: sole.api.v1.config.Configuration.Web
	(*Configuration_Log)(nil),            // 7: sole.api.v1.config.Configuration.Log
	(*Configuration_Web_Net)(nil),        // 8: sole.api.v1.config.Configuration.Web.Net
	(*durationpb.Duration)(nil),          // 9: google.protobuf.Duration
}
var file_v1_config_config_proto_depIdxs = []int32{
	7,  // 0: sole.api.v1.config.Configuration.log:type_name -> sole.api.v1.config.Configuration.Log
	6,  // 1: sole.api.v1.config.Configuration.web:type_name -> sole.api.v1.config.Configuration.Web
	3,  // 2: sole.api.v1.config.Configuration.dynamic_environments:type_name -> sole.api.v1.config.Configuration.DynamicEnvironmentsEntry
	4,  // 3: sole.api.v1.config.Configuration.go:type_name -> sole.api.v1.config.Configuration.GoParam
	5,  // 4: sole.api.v1.config.Configuration.file_cleaners:type_name -> sole.api.v1.config.Configuration.FileCleanParam
	9,  // 5: sole.api.v1.config.Configuration.GoParam.gc_interval:type_name -> google.protobuf.Duration
	9,  // 6: sole.api.v1.config.Configuration.FileCleanParam.clean_interval:type_name -> google.protobuf.Duration
	9,  // 7: sole.api.v1.config.Configuration.FileCleanParam.max_age:type_name -> google.protobuf.Duration
	9,  // 8: sole.api.v1.config.Configuration.FileCleanParam.min_age:type_name -> google.protobuf.Duration
	8,  // 9: sole.api.v1.config.Configuration.Web.bind_addr:type_name -> sole.api.v1.config.Configuration.Web.Net
	9,  // 10: sole.api.v1.config.Configuration.Web.shutdown_delay_duration:type_name -> google.protobuf.Duration
	9,  // 11: sole.api.v1.config.Configuration.Web.burst_limit_timeout_unary:type_name -> google.protobuf.Duration
	9,  // 12: sole.api.v1.config.Configuration.Web.burst_limit_timeout_stream:type_name -> google.protobuf.Duration
	9,  // 13: sole.api.v1.config.Configuration.Web.handled_timeout_unary:type_name -> google.protobuf.Duration
	9,  // 14: sole.api.v1.config.Configuration.Web.handled_timeout_stream:type_name -> google.protobuf.Duration
	0,  // 15: sole.api.v1.config.Configuration.Log.level:type_name -> sole.api.v1.config.Configuration.Log.Level
	1,  // 16: sole.api.v1.config.Configuration.Log.format:type_name -> sole.api.v1.config.Configuration.Log.Format
	9,  // 17: sole.api.v1.config.Configuration.Log.rotation_duration:type_name -> google.protobuf.Duration
	9,  // 18: sole.api.v1.config.Configuration.Log.rotation_max_age:type_name -> google.protobuf.Duration
	0,  // 19: sole.api.v1.config.Configuration.Log.mute_directly_output_level:type_name -> sole.api.v1.config.Configuration.Log.Level
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_v1_config_config_proto_init() }
func file_v1_config_config_proto_init() {
	if File_v1_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_GoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_FileCleanParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_Web_Net); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_config_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_config_config_proto_goTypes,
		DependencyIndexes: file_v1_config_config_proto_depIdxs,
		EnumInfos:         file_v1_config_config_proto_enumTypes,
		MessageInfos:      file_v1_config_config_proto_msgTypes,
	}.Build()
	File_v1_config_config_proto = out.File
	file_v1_config_config_proto_rawDesc = nil
	file_v1_config_config_proto_goTypes = nil
	file_v1_config_config_proto_depIdxs = nil
}
