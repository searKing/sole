// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: soletemplate/v1/soletemplate.service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SoleTemplateService_Health_FullMethodName  = "/searking.sole.api.soletemplate.v1.SoleTemplateService/Health"
	SoleTemplateService_Encrypt_FullMethodName = "/searking.sole.api.soletemplate.v1.SoleTemplateService/Encrypt"
	SoleTemplateService_Example_FullMethodName = "/searking.sole.api.soletemplate.v1.SoleTemplateService/Example"
)

// SoleTemplateServiceClient is the client API for SoleTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sole Template Service
type SoleTemplateServiceClient interface {
	// Health Check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Text Encrypt
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	// Example Service Interface
	// TODO: Replace with your own service interface
	Example(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error)
}

type soleTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoleTemplateServiceClient(cc grpc.ClientConnInterface) SoleTemplateServiceClient {
	return &soleTemplateServiceClient{cc}
}

func (c *soleTemplateServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SoleTemplateService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleTemplateServiceClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptResponse)
	err := c.cc.Invoke(ctx, SoleTemplateService_Encrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soleTemplateServiceClient) Example(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExampleResponse)
	err := c.cc.Invoke(ctx, SoleTemplateService_Example_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoleTemplateServiceServer is the server API for SoleTemplateService service.
// All implementations must embed UnimplementedSoleTemplateServiceServer
// for forward compatibility.
//
// Sole Template Service
type SoleTemplateServiceServer interface {
	// Health Check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Text Encrypt
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
	// Example Service Interface
	// TODO: Replace with your own service interface
	Example(context.Context, *ExampleRequest) (*ExampleResponse, error)
	mustEmbedUnimplementedSoleTemplateServiceServer()
}

// UnimplementedSoleTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoleTemplateServiceServer struct{}

func (UnimplementedSoleTemplateServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSoleTemplateServiceServer) Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedSoleTemplateServiceServer) Example(context.Context, *ExampleRequest) (*ExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Example not implemented")
}
func (UnimplementedSoleTemplateServiceServer) mustEmbedUnimplementedSoleTemplateServiceServer() {}
func (UnimplementedSoleTemplateServiceServer) testEmbeddedByValue()                             {}

// UnsafeSoleTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoleTemplateServiceServer will
// result in compilation errors.
type UnsafeSoleTemplateServiceServer interface {
	mustEmbedUnimplementedSoleTemplateServiceServer()
}

func RegisterSoleTemplateServiceServer(s grpc.ServiceRegistrar, srv SoleTemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedSoleTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SoleTemplateService_ServiceDesc, srv)
}

func _SoleTemplateService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleTemplateServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoleTemplateService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleTemplateServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoleTemplateService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleTemplateServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoleTemplateService_Encrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleTemplateServiceServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoleTemplateService_Example_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoleTemplateServiceServer).Example(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoleTemplateService_Example_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoleTemplateServiceServer).Example(ctx, req.(*ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoleTemplateService_ServiceDesc is the grpc.ServiceDesc for SoleTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoleTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searking.sole.api.soletemplate.v1.SoleTemplateService",
	HandlerType: (*SoleTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SoleTemplateService_Health_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _SoleTemplateService_Encrypt_Handler,
		},
		{
			MethodName: "Example",
			Handler:    _SoleTemplateService_Example_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soletemplate/v1/soletemplate.service.proto",
}
