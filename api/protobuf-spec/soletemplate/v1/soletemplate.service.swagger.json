{
  "swagger": "2.0",
  "info": {
    "title": "soletemplate/v1/soletemplate.service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SoleTemplateService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Encrypt": {
      "post": {
        "summary": "Text Encrypt",
        "operationId": "SoleTemplateService_Encrypt2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EncryptResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EncryptRequest"
            }
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      }
    },
    "/Example": {
      "post": {
        "summary": "Example Service Interface\nTODO: Replace with your own service interface",
        "operationId": "SoleTemplateService_Example2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExampleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExampleRequest"
            }
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      }
    },
    "/api/v1/soletemplate/encrypt": {
      "post": {
        "summary": "Text Encrypt",
        "operationId": "SoleTemplateService_Encrypt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EncryptResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EncryptRequest"
            }
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      }
    },
    "/api/v1/soletemplate/example": {
      "post": {
        "summary": "Example Service Interface\nTODO: Replace with your own service interface",
        "operationId": "SoleTemplateService_Example",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExampleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExampleRequest"
            }
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      }
    },
    "/api/v1/soletemplate/healthz": {
      "get": {
        "summary": "Health Check",
        "operationId": "SoleTemplateService_Health",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "RequestId",
            "description": "unique id for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "AppId",
            "description": "the ID of the application",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      },
      "post": {
        "summary": "Health Check",
        "operationId": "SoleTemplateService_Health2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HealthRequest"
            }
          }
        ],
        "tags": [
          "SoleTemplateService"
        ]
      }
    }
  },
  "definitions": {
    "ErrorErrorProto": {
      "type": "object",
      "description": "Deprecated. This message is only used by error format v1."
    },
    "errorsErrorStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code that corresponds to `google.rpc.Status.code`."
        },
        "message": {
          "type": "string",
          "description": "This corresponds to `google.rpc.Status.message`."
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ErrorErrorProto"
          },
          "description": "Deprecated. This field is only used by error format v1."
        },
        "status": {
          "$ref": "#/definitions/rpcCode",
          "description": "This is the enum version for `google.rpc.Status.code`."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "This corresponds to `google.rpc.Status.details`."
        }
      },
      "description": "This message has the same semantics as `google.rpc.Status`. It uses HTTP\nstatus code instead of gRPC status code. It has extra fields `status` and\n`errors` for backward compatibility with [Google API Client\nLibraries](https://developers.google.com/api-client-library)."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcCode": {
      "type": "string",
      "enum": [
        "OK",
        "CANCELLED",
        "UNKNOWN",
        "INVALID_ARGUMENT",
        "DEADLINE_EXCEEDED",
        "NOT_FOUND",
        "ALREADY_EXISTS",
        "PERMISSION_DENIED",
        "UNAUTHENTICATED",
        "RESOURCE_EXHAUSTED",
        "FAILED_PRECONDITION",
        "ABORTED",
        "OUT_OF_RANGE",
        "UNIMPLEMENTED",
        "INTERNAL",
        "UNAVAILABLE",
        "DATA_LOSS"
      ],
      "default": "OK",
      "description": "The canonical error codes for gRPC APIs.\n\n\nSometimes multiple error codes may apply.  Services should return\nthe most specific error code that applies.  For example, prefer\n`OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.\nSimilarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.\n\n - OK: Not an error; returned on success.\n\nHTTP Mapping: 200 OK\n - CANCELLED: The operation was cancelled, typically by the caller.\n\nHTTP Mapping: 499 Client Closed Request\n - UNKNOWN: Unknown error.  For example, this error may be returned when\na `Status` value received from another address space belongs to\nan error space that is not known in this address space.  Also\nerrors raised by APIs that do not return enough error information\nmay be converted to this error.\n\nHTTP Mapping: 500 Internal Server Error\n - INVALID_ARGUMENT: The client specified an invalid argument.  Note that this differs\nfrom `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments\nthat are problematic regardless of the state of the system\n(e.g., a malformed file name).\n\nHTTP Mapping: 400 Bad Request\n - DEADLINE_EXCEEDED: The deadline expired before the operation could complete. For operations\nthat change the state of the system, this error may be returned\neven if the operation has completed successfully.  For example, a\nsuccessful response from a server could have been delayed long\nenough for the deadline to expire.\n\nHTTP Mapping: 504 Gateway Timeout\n - NOT_FOUND: Some requested entity (e.g., file or directory) was not found.\n\nNote to server developers: if a request is denied for an entire class\nof users, such as gradual feature rollout or undocumented allowlist,\n`NOT_FOUND` may be used. If a request is denied for some users within\na class of users, such as user-based access control, `PERMISSION_DENIED`\nmust be used.\n\nHTTP Mapping: 404 Not Found\n - ALREADY_EXISTS: The entity that a client attempted to create (e.g., file or directory)\nalready exists.\n\nHTTP Mapping: 409 Conflict\n - PERMISSION_DENIED: The caller does not have permission to execute the specified\noperation. `PERMISSION_DENIED` must not be used for rejections\ncaused by exhausting some resource (use `RESOURCE_EXHAUSTED`\ninstead for those errors). `PERMISSION_DENIED` must not be\nused if the caller can not be identified (use `UNAUTHENTICATED`\ninstead for those errors). This error code does not imply the\nrequest is valid or the requested entity exists or satisfies\nother pre-conditions.\n\nHTTP Mapping: 403 Forbidden\n - UNAUTHENTICATED: The request does not have valid authentication credentials for the\noperation.\n\nHTTP Mapping: 401 Unauthorized\n - RESOURCE_EXHAUSTED: Some resource has been exhausted, perhaps a per-user quota, or\nperhaps the entire file system is out of space.\n\nHTTP Mapping: 429 Too Many Requests\n - FAILED_PRECONDITION: The operation was rejected because the system is not in a state\nrequired for the operation's execution.  For example, the directory\nto be deleted is non-empty, an rmdir operation is applied to\na non-directory, etc.\n\nService implementors can use the following guidelines to decide\nbetween `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:\n (a) Use `UNAVAILABLE` if the client can retry just the failing call.\n (b) Use `ABORTED` if the client should retry at a higher level. For\n     example, when a client-specified test-and-set fails, indicating the\n     client should restart a read-modify-write sequence.\n (c) Use `FAILED_PRECONDITION` if the client should not retry until\n     the system state has been explicitly fixed. For example, if an \"rmdir\"\n     fails because the directory is non-empty, `FAILED_PRECONDITION`\n     should be returned since the client should not retry unless\n     the files are deleted from the directory.\n\nHTTP Mapping: 400 Bad Request\n - ABORTED: The operation was aborted, typically due to a concurrency issue such as\na sequencer check failure or transaction abort.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 409 Conflict\n - OUT_OF_RANGE: The operation was attempted past the valid range.  E.g., seeking or\nreading past end-of-file.\n\nUnlike `INVALID_ARGUMENT`, this error indicates a problem that may\nbe fixed if the system state changes. For example, a 32-bit file\nsystem will generate `INVALID_ARGUMENT` if asked to read at an\noffset that is not in the range [0,2^32-1], but it will generate\n`OUT_OF_RANGE` if asked to read from an offset past the current\nfile size.\n\nThere is a fair bit of overlap between `FAILED_PRECONDITION` and\n`OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific\nerror) when it applies so that callers who are iterating through\na space can easily look for an `OUT_OF_RANGE` error to detect when\nthey are done.\n\nHTTP Mapping: 400 Bad Request\n - UNIMPLEMENTED: The operation is not implemented or is not supported/enabled in this\nservice.\n\nHTTP Mapping: 501 Not Implemented\n - INTERNAL: Internal errors.  This means that some invariants expected by the\nunderlying system have been broken.  This error code is reserved\nfor serious errors.\n\nHTTP Mapping: 500 Internal Server Error\n - UNAVAILABLE: The service is currently unavailable.  This is most likely a\ntransient condition, which can be corrected by retrying with\na backoff. Note that it is not always safe to retry\nnon-idempotent operations.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 503 Service Unavailable\n - DATA_LOSS: Unrecoverable data loss or corruption.\n\nHTTP Mapping: 500 Internal Server Error"
    },
    "v1EncryptRequest": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "unique id for the request"
        },
        "AppId": {
          "type": "string",
          "title": "the ID of the application"
        },
        "PlainText": {
          "type": "string",
          "format": "byte",
          "title": "plain text"
        }
      }
    },
    "v1EncryptResponse": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "same as request_id in the request, generate if not set"
        },
        "CipherText": {
          "type": "string",
          "format": "byte",
          "title": "cipher text"
        },
        "error": {
          "$ref": "#/definitions/errorsErrorStatus"
        }
      }
    },
    "v1ExampleRequest": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "unique id for the request"
        },
        "AppId": {
          "type": "string",
          "title": "the ID of the application"
        },
        "Message": {
          "type": "string",
          "title": "message"
        }
      }
    },
    "v1ExampleResponse": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "same as request_id in the request, generate if not set"
        },
        "Message": {
          "type": "string",
          "title": "message echo"
        },
        "error": {
          "$ref": "#/definitions/errorsErrorStatus"
        }
      }
    },
    "v1HealthRequest": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "unique id for the request"
        },
        "AppId": {
          "type": "string",
          "title": "the ID of the application"
        }
      }
    },
    "v1HealthResponse": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string",
          "title": "same as request_id in the request, generate if not set"
        },
        "Status": {
          "type": "string",
          "title": "health check status"
        },
        "Date": {
          "type": "string",
          "title": "query date time"
        },
        "error": {
          "$ref": "#/definitions/errorsErrorStatus"
        }
      }
    }
  }
}
