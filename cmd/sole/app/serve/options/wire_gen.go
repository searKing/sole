// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package options

import (
	"context"
	"github.com/searKing/golang/pkg/webserver"
	"github.com/searKing/sole/web/golang"
	"github.com/searKing/sole/web/golang/app/modules/date"
	"github.com/searKing/sole/web/golang/app/modules/debug"
	"github.com/searKing/sole/web/golang/app/modules/doc/swagger"
	"github.com/searKing/sole/web/golang/app/modules/index"
	"github.com/searKing/sole/web/golang/app/modules/webapp"
	"github.com/spf13/viper"
)

// Injectors from inject_webserver.go:

// RunServer 人脸驱动应用
func RunServer(ctx context.Context) (*_RunningServer, func(), error) {
	viperViper := viper.GetViper()
	configuration, err := NewConfig(viperViper)
	if err != nil {
		return nil, nil, err
	}
	options_env, err := NewEnv(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_log, err := NewLog(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	webServer, err := NewWebServer(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_fileCleaner, err := NewFileCleaner(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	controller := debug.NewController()
	dateController := date.NewController()
	indexController := index.NewController()
	webappController := webapp.NewController()
	swaggerController := swagger.NewController()
	v := golang.NewWebHandlers(webServer, controller, dateController, indexController, webappController, swaggerController)
	options_gc, err := NewGC(ctx, configuration)
	if err != nil {
		return nil, nil, err
	}
	options_RunningServer, err := _NewRunningServer(ctx, options_env, options_log, webServer, options_fileCleaner, v, options_gc)
	if err != nil {
		return nil, nil, err
	}
	return options_RunningServer, func() {
	}, nil
}

// inject_webserver.go:

type _RunningServer struct{}

// NewRunningServer 加载配置、启动服务
func _NewRunningServer(ctx context.Context, _ *_env, _ *_log,
	ws *webserver.WebServer, _ *_fileCleaner, _ []webserver.WebHandler, _ *_gc) (s *_RunningServer, err error) {
	prepared, err := ws.PrepareRun()
	if err != nil {
		return nil, err
	}

	return nil, prepared.Run(ctx)
}
